
RTOS-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08008088  08008088  00009088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082e8  080082e8  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  080082e8  080082e8  000092e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082f0  080082f0  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082f0  080082f0  000092f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082f4  080082f4  000092f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080082f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b10  2000006c  08008364  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b7c  08008364  0000ab7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001613d  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ec  00000000  00000000  000201d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  000233c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d89  00000000  00000000  00024580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e40  00000000  00000000  00025309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145eb  00000000  00000000  0002a149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f43cf  00000000  00000000  0003e734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132b03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c4  00000000  00000000  00132b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00137f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008070 	.word	0x08008070

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008070 	.word	0x08008070

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 fb5c 	bl	8000c20 <HAL_Init>
  RetargetInit(&huart2);
 8000568:	4813      	ldr	r0, [pc, #76]	@ (80005b8 <main+0x58>)
 800056a:	f000 f977 	bl	800085c <RetargetInit>
  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f887 	bl	8000680 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f907 	bl	8000784 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000576:	f000 f8d5 	bl	8000724 <MX_USART2_UART_Init>

  /* Init scheduler */
  osKernelInitialize();
 800057a:	f003 f857 	bl	800362c <osKernelInitialize>

  /* Creation of msgQueue */
  msgQueueID = osMessageQueueNew(5, sizeof(uint16_t), NULL);
 800057e:	2200      	movs	r2, #0
 8000580:	2102      	movs	r1, #2
 8000582:	2005      	movs	r0, #5
 8000584:	f003 f949 	bl	800381a <osMessageQueueNew>
 8000588:	4603      	mov	r3, r0
 800058a:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <main+0x5c>)
 800058c:	6013      	str	r3, [r2, #0]
  /* Creation of blinkThread */
  blinkThreadID = osThreadNew(blinkThread, NULL, &blinkThread_attr);
 800058e:	4a0c      	ldr	r2, [pc, #48]	@ (80005c0 <main+0x60>)
 8000590:	2100      	movs	r1, #0
 8000592:	480c      	ldr	r0, [pc, #48]	@ (80005c4 <main+0x64>)
 8000594:	f003 f894 	bl	80036c0 <osThreadNew>
 8000598:	4603      	mov	r3, r0
 800059a:	4a0b      	ldr	r2, [pc, #44]	@ (80005c8 <main+0x68>)
 800059c:	6013      	str	r3, [r2, #0]
  /* Creation of UARTThread */
  UARTThreadID = osThreadNew(UARTThread, NULL, &UARTThread_attr);
 800059e:	4a0b      	ldr	r2, [pc, #44]	@ (80005cc <main+0x6c>)
 80005a0:	2100      	movs	r1, #0
 80005a2:	480b      	ldr	r0, [pc, #44]	@ (80005d0 <main+0x70>)
 80005a4:	f003 f88c 	bl	80036c0 <osThreadNew>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a0a      	ldr	r2, [pc, #40]	@ (80005d4 <main+0x74>)
 80005ac:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 80005ae:	f003 f861 	bl	8003674 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  while (1);
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <main+0x52>
 80005b6:	bf00      	nop
 80005b8:	20000088 	.word	0x20000088
 80005bc:	20000118 	.word	0x20000118
 80005c0:	08008108 	.word	0x08008108
 80005c4:	080005d9 	.word	0x080005d9
 80005c8:	20000110 	.word	0x20000110
 80005cc:	0800812c 	.word	0x0800812c
 80005d0:	08000621 	.word	0x08000621
 80005d4:	20000114 	.word	0x20000114

080005d8 <blinkThread>:
}

void blinkThread(void *argument) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  uint16_t delay = 500; /* Default delay */
 80005e0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005e4:	82fb      	strh	r3, [r7, #22]
  uint16_t msg = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	81fb      	strh	r3, [r7, #14]
  osStatus_t status;

  while(1) {
    status = osMessageQueueGet(msgQueueID, &msg, 0, 10);
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <blinkThread+0x44>)
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	f107 010e 	add.w	r1, r7, #14
 80005f2:	230a      	movs	r3, #10
 80005f4:	2200      	movs	r2, #0
 80005f6:	f003 f9e3 	bl	80039c0 <osMessageQueueGet>
 80005fa:	6138      	str	r0, [r7, #16]
    if(status == osOK)
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <blinkThread+0x2e>
      delay = msg;
 8000602:	89fb      	ldrh	r3, [r7, #14]
 8000604:	82fb      	strh	r3, [r7, #22]

    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000606:	2120      	movs	r1, #32
 8000608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060c:	f000 fe2c 	bl	8001268 <HAL_GPIO_TogglePin>
    osDelay(delay);
 8000610:	8afb      	ldrh	r3, [r7, #22]
 8000612:	4618      	mov	r0, r3
 8000614:	f003 f8e6 	bl	80037e4 <osDelay>
    status = osMessageQueueGet(msgQueueID, &msg, 0, 10);
 8000618:	e7e7      	b.n	80005ea <blinkThread+0x12>
 800061a:	bf00      	nop
 800061c:	20000118 	.word	0x20000118

08000620 <UARTThread>:
  }
}

void UARTThread(void *argument) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint16_t delay = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	81fb      	strh	r3, [r7, #14]

  while(1) {
    printf("Specify the LD2 LED blink period: ");
 800062c:	480f      	ldr	r0, [pc, #60]	@ (800066c <UARTThread+0x4c>)
 800062e:	f006 f8ed 	bl	800680c <iprintf>
    fflush(stdout);
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <UARTThread+0x50>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4618      	mov	r0, r3
 800063a:	f006 f811 	bl	8006660 <fflush>
    scanf("%hu", &delay);
 800063e:	f107 030e 	add.w	r3, r7, #14
 8000642:	4619      	mov	r1, r3
 8000644:	480b      	ldr	r0, [pc, #44]	@ (8000674 <UARTThread+0x54>)
 8000646:	f006 f8f3 	bl	8006830 <iscanf>
    printf("\r\nSpecified period: %hu\n\r", delay);
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4619      	mov	r1, r3
 800064e:	480a      	ldr	r0, [pc, #40]	@ (8000678 <UARTThread+0x58>)
 8000650:	f006 f8dc 	bl	800680c <iprintf>
    osMessageQueuePut(msgQueueID, &delay, 0, osWaitForever);
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <UARTThread+0x5c>)
 8000656:	6818      	ldr	r0, [r3, #0]
 8000658:	f107 010e 	add.w	r1, r7, #14
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	2200      	movs	r2, #0
 8000662:	f003 f94d 	bl	8003900 <osMessageQueuePut>
    printf("Specify the LD2 LED blink period: ");
 8000666:	bf00      	nop
 8000668:	e7e0      	b.n	800062c <UARTThread+0xc>
 800066a:	bf00      	nop
 800066c:	080080a0 	.word	0x080080a0
 8000670:	2000001c 	.word	0x2000001c
 8000674:	080080c4 	.word	0x080080c4
 8000678:	080080c8 	.word	0x080080c8
 800067c:	20000118 	.word	0x20000118

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b096      	sub	sp, #88	@ 0x58
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2244      	movs	r2, #68	@ 0x44
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f006 f9d7 	bl	8006a42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006a6:	f000 fe07 	bl	80012b8 <HAL_PWREx_ControlVoltageScaling>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b0:	f000 f8ce 	bl	8000850 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	2310      	movs	r3, #16
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c6:	2302      	movs	r3, #2
 80006c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ce:	230a      	movs	r3, #10
 80006d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d2:	2307      	movs	r3, #7
 80006d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fe3e 	bl	8001364 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ee:	f000 f8af 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2303      	movs	r3, #3
 80006f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	2104      	movs	r1, #4
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fa06 	bl	8001b1c <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000716:	f000 f89b 	bl	8000850 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3758      	adds	r7, #88	@ 0x58
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_USART2_UART_Init+0x58>)
 800072a:	4a15      	ldr	r2, [pc, #84]	@ (8000780 <MX_USART2_UART_Init+0x5c>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_USART2_UART_Init+0x58>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000768:	f002 f8b8 	bl	80028dc <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 f86d 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000088 	.word	0x20000088
 8000780:	40004400 	.word	0x40004400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b2b      	ldr	r3, [pc, #172]	@ (8000848 <MX_GPIO_Init+0xc4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	4a2a      	ldr	r2, [pc, #168]	@ (8000848 <MX_GPIO_Init+0xc4>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a6:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <MX_GPIO_Init+0xc4>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <MX_GPIO_Init+0xc4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	4a24      	ldr	r2, [pc, #144]	@ (8000848 <MX_GPIO_Init+0xc4>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007be:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <MX_GPIO_Init+0xc4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <MX_GPIO_Init+0xc4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000848 <MX_GPIO_Init+0xc4>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <MX_GPIO_Init+0xc4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <MX_GPIO_Init+0xc4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a18      	ldr	r2, [pc, #96]	@ (8000848 <MX_GPIO_Init+0xc4>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000802:	f000 fd19 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000806:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <MX_GPIO_Init+0xc8>)
 800081e:	f000 fb61 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000822:	2320      	movs	r3, #32
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083c:	f000 fb52 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	@ 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000
 800084c:	48000800 	.word	0x48000800

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <Error_Handler+0x8>

0800085c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000864:	4a07      	ldr	r2, [pc, #28]	@ (8000884 <RetargetInit+0x28>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800086a:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <RetargetInit+0x2c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6898      	ldr	r0, [r3, #8]
 8000870:	2300      	movs	r3, #0
 8000872:	2202      	movs	r2, #2
 8000874:	2100      	movs	r1, #0
 8000876:	f005 ffed 	bl	8006854 <setvbuf>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000011c 	.word	0x2000011c
 8000888:	2000001c 	.word	0x2000001c

0800088c <_isatty>:

int _isatty(int fd) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	db04      	blt.n	80008a4 <_isatty+0x18>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b02      	cmp	r3, #2
 800089e:	dc01      	bgt.n	80008a4 <_isatty+0x18>
    return 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e005      	b.n	80008b0 <_isatty+0x24>

  errno = EBADF;
 80008a4:	f006 f91c 	bl	8006ae0 <__errno>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2209      	movs	r2, #9
 80008ac:	601a      	str	r2, [r3, #0]
  return 0;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_write>:

int _write(int fd, char* ptr, int len) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d002      	beq.n	80008d0 <_write+0x18>
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d111      	bne.n	80008f4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80008d0:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <_write+0x54>)
 80008d2:	6818      	ldr	r0, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	f002 f84b 	bl	8002978 <HAL_UART_Transmit>
 80008e2:	4603      	mov	r3, r0
 80008e4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008e6:	7dfb      	ldrb	r3, [r7, #23]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <_write+0x38>
      return len;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	e008      	b.n	8000902 <_write+0x4a>
    else
      return EIO;
 80008f0:	2305      	movs	r3, #5
 80008f2:	e006      	b.n	8000902 <_write+0x4a>
  }
  errno = EBADF;
 80008f4:	f006 f8f4 	bl	8006ae0 <__errno>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2209      	movs	r2, #9
 80008fc:	601a      	str	r2, [r3, #0]
  return -1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000902:	4618      	mov	r0, r3
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000011c 	.word	0x2000011c

08000910 <_close>:

int _close(int fd) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db04      	blt.n	8000928 <_close+0x18>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b02      	cmp	r3, #2
 8000922:	dc01      	bgt.n	8000928 <_close+0x18>
    return 0;
 8000924:	2300      	movs	r3, #0
 8000926:	e006      	b.n	8000936 <_close+0x26>

  errno = EBADF;
 8000928:	f006 f8da 	bl	8006ae0 <__errno>
 800092c:	4603      	mov	r3, r0
 800092e:	2209      	movs	r2, #9
 8000930:	601a      	str	r2, [r3, #0]
  return -1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <_read>:

int _read(int fd, char* ptr, int len) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d110      	bne.n	8000974 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <_read+0x4c>)
 8000954:	6818      	ldr	r0, [r3, #0]
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	2201      	movs	r2, #1
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	f002 f894 	bl	8002a8a <HAL_UART_Receive>
 8000962:	4603      	mov	r3, r0
 8000964:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000966:	7dfb      	ldrb	r3, [r7, #23]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d101      	bne.n	8000970 <_read+0x30>
      return 1;
 800096c:	2301      	movs	r3, #1
 800096e:	e008      	b.n	8000982 <_read+0x42>
    else
      return EIO;
 8000970:	2305      	movs	r3, #5
 8000972:	e006      	b.n	8000982 <_read+0x42>
  }
  errno = EBADF;
 8000974:	f006 f8b4 	bl	8006ae0 <__errno>
 8000978:	4603      	mov	r3, r0
 800097a:	2209      	movs	r2, #9
 800097c:	601a      	str	r2, [r3, #0]
  return -1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000011c 	.word	0x2000011c

08000990 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db08      	blt.n	80009b2 <_fstat+0x22>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	dc05      	bgt.n	80009b2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ac:	605a      	str	r2, [r3, #4]
    return 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e005      	b.n	80009be <_fstat+0x2e>
  }

  errno = EBADF;
 80009b2:	f006 f895 	bl	8006ae0 <__errno>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2209      	movs	r2, #9
 80009ba:	601a      	str	r2, [r3, #0]
  return 0;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d2:	4a10      	ldr	r2, [pc, #64]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	210f      	movs	r1, #15
 8000a02:	f06f 0001 	mvn.w	r0, #1
 8000a06:	f000 fa44 	bl	8000e92 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2288      	movs	r2, #136	@ 0x88
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f006 f802 	bl	8006a42 <memset>
  if(huart->Instance==USART2)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a21      	ldr	r2, [pc, #132]	@ (8000ac8 <HAL_UART_MspInit+0xb0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d13b      	bne.n	8000ac0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 fa85 	bl	8001f64 <HAL_RCCEx_PeriphCLKConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a60:	f7ff fef6 	bl	8000850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a64:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <HAL_UART_MspInit+0xb4>)
 8000a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a68:	4a18      	ldr	r2, [pc, #96]	@ (8000acc <HAL_UART_MspInit+0xb4>)
 8000a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a70:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <HAL_UART_MspInit+0xb4>)
 8000a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <HAL_UART_MspInit+0xb4>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a80:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <HAL_UART_MspInit+0xb4>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a88:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <HAL_UART_MspInit+0xb4>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a94:	230c      	movs	r3, #12
 8000a96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aac:	2307      	movs	r3, #7
 8000aae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000abc:	f000 fa12 	bl	8000ee4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ac0:	bf00      	nop
 8000ac2:	37b0      	adds	r7, #176	@ 0xb0
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0a:	f000 f8e5 	bl	8000cd8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b0e:	f004 fc7f 	bl	8005410 <xTaskGetSchedulerState>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d001      	beq.n	8000b1c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b18:	f005 fa76 	bl	8006008 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	@ (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f005 ffb8 	bl	8006ae0 <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20018000 	.word	0x20018000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	20000120 	.word	0x20000120
 8000ba4:	20001b80 	.word	0x20001b80

08000ba8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd0:	f7ff ffea 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <LoopForever+0xe>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	@ (8000c18 <LoopForever+0x16>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f005 ff77 	bl	8006aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfe:	f7ff fcaf 	bl	8000560 <main>

08000c02 <LoopForever>:

LoopForever:
    b LoopForever
 8000c02:	e7fe      	b.n	8000c02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c10:	080082f8 	.word	0x080082f8
  ldr r2, =_sbss
 8000c14:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c18:	20001b7c 	.word	0x20001b7c

08000c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_2_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <HAL_Init+0x3c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c5c <HAL_Init+0x3c>)
 8000c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c36:	2003      	movs	r0, #3
 8000c38:	f000 f920 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3c:	200f      	movs	r0, #15
 8000c3e:	f000 f80f 	bl	8000c60 <HAL_InitTick>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	e001      	b.n	8000c52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4e:	f7ff febb 	bl	80009c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40022000 	.word	0x40022000

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <HAL_InitTick+0x6c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d023      	beq.n	8000cbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <HAL_InitTick+0x70>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <HAL_InitTick+0x6c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f91d 	bl	8000eca <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10f      	bne.n	8000cb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d809      	bhi.n	8000cb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 f8f5 	bl	8000e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <HAL_InitTick+0x74>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e007      	b.n	8000cc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	e004      	b.n	8000cc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	e001      	b.n	8000cc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000124 	.word	0x20000124

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000124 	.word	0x20000124

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	@ (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	@ (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	@ 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff47 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5c 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e17f      	b.n	80011f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8171 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d005      	beq.n	8000f24 <HAL_GPIO_Init+0x40>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d130      	bne.n	8000f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	f003 0201 	and.w	r2, r3, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d118      	bne.n	8000fc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	6939      	ldr	r1, [r7, #16]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80ac 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b5f      	ldr	r3, [pc, #380]	@ (8001214 <HAL_GPIO_Init+0x330>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109a:	4a5e      	ldr	r2, [pc, #376]	@ (8001214 <HAL_GPIO_Init+0x330>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001214 <HAL_GPIO_Init+0x330>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001218 <HAL_GPIO_Init+0x334>)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x242>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	@ (800121c <HAL_GPIO_Init+0x338>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x23e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001220 <HAL_GPIO_Init+0x33c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x23a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001224 <HAL_GPIO_Init+0x340>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x236>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001228 <HAL_GPIO_Init+0x344>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x232>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4b      	ldr	r2, [pc, #300]	@ (800122c <HAL_GPIO_Init+0x348>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x22e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4a      	ldr	r2, [pc, #296]	@ (8001230 <HAL_GPIO_Init+0x34c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x22a>
 800110a:	2306      	movs	r3, #6
 800110c:	e00c      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800110e:	2307      	movs	r3, #7
 8001110:	e00a      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001112:	2305      	movs	r3, #5
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001116:	2304      	movs	r3, #4
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001126:	2300      	movs	r3, #0
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001138:	4937      	ldr	r1, [pc, #220]	@ (8001218 <HAL_GPIO_Init+0x334>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001146:	4b3b      	ldr	r3, [pc, #236]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800116a:	4a32      	ldr	r2, [pc, #200]	@ (8001234 <HAL_GPIO_Init+0x350>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001170:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001194:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800119a:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <HAL_GPIO_Init+0x350>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011be:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e8:	4a12      	ldr	r2, [pc, #72]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f47f ae78 	bne.w	8000ef4 <HAL_GPIO_Init+0x10>
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800
 8001224:	48000c00 	.word	0x48000c00
 8001228:	48001000 	.word	0x48001000
 800122c:	48001400 	.word	0x48001400
 8001230:	48001800 	.word	0x48001800
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001254:	e002      	b.n	800125c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4013      	ands	r3, r2
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43d9      	mvns	r1, r3
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	400b      	ands	r3, r1
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40007000 	.word	0x40007000

080012b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012c6:	d130      	bne.n	800132a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c8:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012d4:	d038      	beq.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d6:	4b20      	ldr	r3, [pc, #128]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012de:	4a1e      	ldr	r2, [pc, #120]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2232      	movs	r2, #50	@ 0x32
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001360 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	0c9b      	lsrs	r3, r3, #18
 80012f8:	3301      	adds	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012fc:	e002      	b.n	8001304 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3b01      	subs	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800130c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001310:	d102      	bne.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f2      	bne.n	80012fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001324:	d110      	bne.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e00f      	b.n	800134a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001336:	d007      	beq.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001338:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001340:	4a05      	ldr	r2, [pc, #20]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001342:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001346:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40007000 	.word	0x40007000
 800135c:	20000000 	.word	0x20000000
 8001360:	431bde83 	.word	0x431bde83

08001364 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e3ca      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001376:	4b97      	ldr	r3, [pc, #604]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001380:	4b94      	ldr	r3, [pc, #592]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80e4 	beq.w	8001560 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <HAL_RCC_OscConfig+0x4a>
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b0c      	cmp	r3, #12
 80013a2:	f040 808b 	bne.w	80014bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	f040 8087 	bne.w	80014bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ae:	4b89      	ldr	r3, [pc, #548]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_OscConfig+0x62>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e3a2      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	4b82      	ldr	r3, [pc, #520]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <HAL_RCC_OscConfig+0x7c>
 80013d6:	4b7f      	ldr	r3, [pc, #508]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013de:	e005      	b.n	80013ec <HAL_RCC_OscConfig+0x88>
 80013e0:	4b7c      	ldr	r3, [pc, #496]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80013e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d223      	bcs.n	8001438 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fd55 	bl	8001ea4 <RCC_SetFlashLatencyFromMSIRange>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e383      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001404:	4b73      	ldr	r3, [pc, #460]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a72      	ldr	r2, [pc, #456]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 800140a:	f043 0308 	orr.w	r3, r3, #8
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b70      	ldr	r3, [pc, #448]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	496d      	ldr	r1, [pc, #436]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001422:	4b6c      	ldr	r3, [pc, #432]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	4968      	ldr	r1, [pc, #416]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001432:	4313      	orrs	r3, r2
 8001434:	604b      	str	r3, [r1, #4]
 8001436:	e025      	b.n	8001484 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001438:	4b66      	ldr	r3, [pc, #408]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a65      	ldr	r2, [pc, #404]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 800143e:	f043 0308 	orr.w	r3, r3, #8
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b63      	ldr	r3, [pc, #396]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	4960      	ldr	r1, [pc, #384]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001456:	4b5f      	ldr	r3, [pc, #380]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	495b      	ldr	r1, [pc, #364]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001466:	4313      	orrs	r3, r2
 8001468:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d109      	bne.n	8001484 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fd15 	bl	8001ea4 <RCC_SetFlashLatencyFromMSIRange>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e343      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001484:	f000 fc4a 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001488:	4602      	mov	r2, r0
 800148a:	4b52      	ldr	r3, [pc, #328]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	4950      	ldr	r1, [pc, #320]	@ (80015d8 <HAL_RCC_OscConfig+0x274>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	fa22 f303 	lsr.w	r3, r2, r3
 80014a0:	4a4e      	ldr	r2, [pc, #312]	@ (80015dc <HAL_RCC_OscConfig+0x278>)
 80014a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014a4:	4b4e      	ldr	r3, [pc, #312]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fbd9 	bl	8000c60 <HAL_InitTick>
 80014ae:	4603      	mov	r3, r0
 80014b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d052      	beq.n	800155e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	e327      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d032      	beq.n	800152a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014c4:	4b43      	ldr	r3, [pc, #268]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a42      	ldr	r2, [pc, #264]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fc16 	bl	8000d00 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014d8:	f7ff fc12 	bl	8000d00 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e310      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ea:	4b3a      	ldr	r3, [pc, #232]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f6:	4b37      	ldr	r3, [pc, #220]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a36      	ldr	r2, [pc, #216]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b34      	ldr	r3, [pc, #208]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4931      	ldr	r1, [pc, #196]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001514:	4b2f      	ldr	r3, [pc, #188]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	492c      	ldr	r1, [pc, #176]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
 8001528:	e01a      	b.n	8001560 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800152a:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a29      	ldr	r2, [pc, #164]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001536:	f7ff fbe3 	bl	8000d00 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800153e:	f7ff fbdf 	bl	8000d00 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e2dd      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001550:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f0      	bne.n	800153e <HAL_RCC_OscConfig+0x1da>
 800155c:	e000      	b.n	8001560 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800155e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d074      	beq.n	8001656 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b08      	cmp	r3, #8
 8001570:	d005      	beq.n	800157e <HAL_RCC_OscConfig+0x21a>
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2b0c      	cmp	r3, #12
 8001576:	d10e      	bne.n	8001596 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2b03      	cmp	r3, #3
 800157c:	d10b      	bne.n	8001596 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d064      	beq.n	8001654 <HAL_RCC_OscConfig+0x2f0>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d160      	bne.n	8001654 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e2ba      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x24a>
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0b      	ldr	r2, [pc, #44]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e026      	b.n	80015fc <HAL_RCC_OscConfig+0x298>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015b6:	d115      	bne.n	80015e4 <HAL_RCC_OscConfig+0x280>
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80015be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a02      	ldr	r2, [pc, #8]	@ (80015d4 <HAL_RCC_OscConfig+0x270>)
 80015ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	e014      	b.n	80015fc <HAL_RCC_OscConfig+0x298>
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	08008150 	.word	0x08008150
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000004 	.word	0x20000004
 80015e4:	4ba0      	ldr	r3, [pc, #640]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a9f      	ldr	r2, [pc, #636]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80015ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b9d      	ldr	r3, [pc, #628]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a9c      	ldr	r2, [pc, #624]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80015f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fb7c 	bl	8000d00 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fb78 	bl	8000d00 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	@ 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e276      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800161e:	4b92      	ldr	r3, [pc, #584]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x2a8>
 800162a:	e014      	b.n	8001656 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fb68 	bl	8000d00 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fb64 	bl	8000d00 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	@ 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e262      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001646:	4b88      	ldr	r3, [pc, #544]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x2d0>
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d060      	beq.n	8001724 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2b04      	cmp	r3, #4
 8001666:	d005      	beq.n	8001674 <HAL_RCC_OscConfig+0x310>
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d119      	bne.n	80016a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d116      	bne.n	80016a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001674:	4b7c      	ldr	r3, [pc, #496]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_OscConfig+0x328>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e23f      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168c:	4b76      	ldr	r3, [pc, #472]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	061b      	lsls	r3, r3, #24
 800169a:	4973      	ldr	r1, [pc, #460]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a0:	e040      	b.n	8001724 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d023      	beq.n	80016f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b6:	f7ff fb23 	bl	8000d00 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016be:	f7ff fb1f 	bl	8000d00 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e21d      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d0:	4b65      	ldr	r3, [pc, #404]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016dc:	4b62      	ldr	r3, [pc, #392]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	495f      	ldr	r1, [pc, #380]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	e018      	b.n	8001724 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a5c      	ldr	r2, [pc, #368]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff faff 	bl	8000d00 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff fafb 	bl	8000d00 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e1f9      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001718:	4b53      	ldr	r3, [pc, #332]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d03c      	beq.n	80017aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01c      	beq.n	8001772 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001738:	4b4b      	ldr	r3, [pc, #300]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 800173a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800173e:	4a4a      	ldr	r2, [pc, #296]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001748:	f7ff fada 	bl	8000d00 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001750:	f7ff fad6 	bl	8000d00 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e1d4      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001762:	4b41      	ldr	r3, [pc, #260]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 8001764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0ef      	beq.n	8001750 <HAL_RCC_OscConfig+0x3ec>
 8001770:	e01b      	b.n	80017aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001772:	4b3d      	ldr	r3, [pc, #244]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 8001774:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001778:	4a3b      	ldr	r2, [pc, #236]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001782:	f7ff fabd 	bl	8000d00 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178a:	f7ff fab9 	bl	8000d00 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e1b7      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800179c:	4b32      	ldr	r3, [pc, #200]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 800179e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1ef      	bne.n	800178a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 80a6 	beq.w	8001904 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b8:	2300      	movs	r3, #0
 80017ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10d      	bne.n	80017e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c8:	4b27      	ldr	r3, [pc, #156]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017cc:	4a26      	ldr	r2, [pc, #152]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80017ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d4:	4b24      	ldr	r3, [pc, #144]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e0:	2301      	movs	r3, #1
 80017e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e4:	4b21      	ldr	r3, [pc, #132]	@ (800186c <HAL_RCC_OscConfig+0x508>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d118      	bne.n	8001822 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017f0:	4b1e      	ldr	r3, [pc, #120]	@ (800186c <HAL_RCC_OscConfig+0x508>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1d      	ldr	r2, [pc, #116]	@ (800186c <HAL_RCC_OscConfig+0x508>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fc:	f7ff fa80 	bl	8000d00 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001804:	f7ff fa7c 	bl	8000d00 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e17a      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <HAL_RCC_OscConfig+0x508>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d108      	bne.n	800183c <HAL_RCC_OscConfig+0x4d8>
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 800182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001830:	4a0d      	ldr	r2, [pc, #52]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800183a:	e029      	b.n	8001890 <HAL_RCC_OscConfig+0x52c>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b05      	cmp	r3, #5
 8001842:	d115      	bne.n	8001870 <HAL_RCC_OscConfig+0x50c>
 8001844:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 8001846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800184a:	4a07      	ldr	r2, [pc, #28]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800185a:	4a03      	ldr	r2, [pc, #12]	@ (8001868 <HAL_RCC_OscConfig+0x504>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001864:	e014      	b.n	8001890 <HAL_RCC_OscConfig+0x52c>
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	40007000 	.word	0x40007000
 8001870:	4b9c      	ldr	r3, [pc, #624]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001876:	4a9b      	ldr	r2, [pc, #620]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001880:	4b98      	ldr	r3, [pc, #608]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001886:	4a97      	ldr	r2, [pc, #604]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001888:	f023 0304 	bic.w	r3, r3, #4
 800188c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d016      	beq.n	80018c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff fa32 	bl	8000d00 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a0:	f7ff fa2e 	bl	8000d00 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e12a      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018b6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 80018b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0ed      	beq.n	80018a0 <HAL_RCC_OscConfig+0x53c>
 80018c4:	e015      	b.n	80018f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c6:	f7ff fa1b 	bl	8000d00 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7ff fa17 	bl	8000d00 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e113      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e4:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ed      	bne.n	80018ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f2:	7ffb      	ldrb	r3, [r7, #31]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f8:	4b7a      	ldr	r3, [pc, #488]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fc:	4a79      	ldr	r2, [pc, #484]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 80018fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001902:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80fe 	beq.w	8001b0a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001912:	2b02      	cmp	r3, #2
 8001914:	f040 80d0 	bne.w	8001ab8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001918:	4b72      	ldr	r3, [pc, #456]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0203 	and.w	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001928:	429a      	cmp	r2, r3
 800192a:	d130      	bne.n	800198e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	3b01      	subs	r3, #1
 8001938:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d127      	bne.n	800198e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001948:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d11f      	bne.n	800198e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001958:	2a07      	cmp	r2, #7
 800195a:	bf14      	ite	ne
 800195c:	2201      	movne	r2, #1
 800195e:	2200      	moveq	r2, #0
 8001960:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001962:	4293      	cmp	r3, r2
 8001964:	d113      	bne.n	800198e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001970:	085b      	lsrs	r3, r3, #1
 8001972:	3b01      	subs	r3, #1
 8001974:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d109      	bne.n	800198e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	085b      	lsrs	r3, r3, #1
 8001986:	3b01      	subs	r3, #1
 8001988:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d06e      	beq.n	8001a6c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2b0c      	cmp	r3, #12
 8001992:	d069      	beq.n	8001a68 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001994:	4b53      	ldr	r3, [pc, #332]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019a0:	4b50      	ldr	r3, [pc, #320]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0ad      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019b0:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 80019b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019bc:	f7ff f9a0 	bl	8000d00 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff f99c 	bl	8000d00 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e09a      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d6:	4b43      	ldr	r3, [pc, #268]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e2:	4b40      	ldr	r3, [pc, #256]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	4b40      	ldr	r3, [pc, #256]	@ (8001ae8 <HAL_RCC_OscConfig+0x784>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019f2:	3a01      	subs	r2, #1
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019fc:	0212      	lsls	r2, r2, #8
 80019fe:	4311      	orrs	r1, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a04:	0852      	lsrs	r2, r2, #1
 8001a06:	3a01      	subs	r2, #1
 8001a08:	0552      	lsls	r2, r2, #21
 8001a0a:	4311      	orrs	r1, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a10:	0852      	lsrs	r2, r2, #1
 8001a12:	3a01      	subs	r2, #1
 8001a14:	0652      	lsls	r2, r2, #25
 8001a16:	4311      	orrs	r1, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a1c:	0912      	lsrs	r2, r2, #4
 8001a1e:	0452      	lsls	r2, r2, #17
 8001a20:	430a      	orrs	r2, r1
 8001a22:	4930      	ldr	r1, [pc, #192]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4a2a      	ldr	r2, [pc, #168]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001a3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a40:	f7ff f95e 	bl	8000d00 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff f95a 	bl	8000d00 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e058      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a66:	e050      	b.n	8001b0a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e04f      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d148      	bne.n	8001b0a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a19      	ldr	r2, [pc, #100]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a84:	4b17      	ldr	r3, [pc, #92]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4a16      	ldr	r2, [pc, #88]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001a8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a90:	f7ff f936 	bl	8000d00 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff f932 	bl	8000d00 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e030      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x734>
 8001ab6:	e028      	b.n	8001b0a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2b0c      	cmp	r3, #12
 8001abc:	d023      	beq.n	8001b06 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a08      	ldr	r2, [pc, #32]	@ (8001ae4 <HAL_RCC_OscConfig+0x780>)
 8001ac4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff f919 	bl	8000d00 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad0:	e00c      	b.n	8001aec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7ff f915 	bl	8000d00 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d905      	bls.n	8001aec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e013      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aec:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <HAL_RCC_OscConfig+0x7b0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ec      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_RCC_OscConfig+0x7b0>)
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	4905      	ldr	r1, [pc, #20]	@ (8001b14 <HAL_RCC_OscConfig+0x7b0>)
 8001afe:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <HAL_RCC_OscConfig+0x7b4>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	60cb      	str	r3, [r1, #12]
 8001b04:	e001      	b.n	8001b0a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	feeefffc 	.word	0xfeeefffc

08001b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0e7      	b.n	8001d00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b30:	4b75      	ldr	r3, [pc, #468]	@ (8001d08 <HAL_RCC_ClockConfig+0x1ec>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d910      	bls.n	8001b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b72      	ldr	r3, [pc, #456]	@ (8001d08 <HAL_RCC_ClockConfig+0x1ec>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 0207 	bic.w	r2, r3, #7
 8001b46:	4970      	ldr	r1, [pc, #448]	@ (8001d08 <HAL_RCC_ClockConfig+0x1ec>)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b6e      	ldr	r3, [pc, #440]	@ (8001d08 <HAL_RCC_ClockConfig+0x1ec>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0cf      	b.n	8001d00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d010      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	4b66      	ldr	r3, [pc, #408]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d908      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b63      	ldr	r3, [pc, #396]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4960      	ldr	r1, [pc, #384]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d04c      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d121      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e0a6      	b.n	8001d00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bba:	4b54      	ldr	r3, [pc, #336]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d115      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e09a      	b.n	8001d00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e08e      	b.n	8001d00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be2:	4b4a      	ldr	r3, [pc, #296]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e086      	b.n	8001d00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bf2:	4b46      	ldr	r3, [pc, #280]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f023 0203 	bic.w	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4943      	ldr	r1, [pc, #268]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c04:	f7ff f87c 	bl	8000d00 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7ff f878 	bl	8000d00 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e06e      	b.n	8001d00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	4b3a      	ldr	r3, [pc, #232]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 020c 	and.w	r2, r3, #12
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1eb      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d010      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	4b31      	ldr	r3, [pc, #196]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d208      	bcs.n	8001c62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c50:	4b2e      	ldr	r3, [pc, #184]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	492b      	ldr	r1, [pc, #172]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c62:	4b29      	ldr	r3, [pc, #164]	@ (8001d08 <HAL_RCC_ClockConfig+0x1ec>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d210      	bcs.n	8001c92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c70:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <HAL_RCC_ClockConfig+0x1ec>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 0207 	bic.w	r2, r3, #7
 8001c78:	4923      	ldr	r1, [pc, #140]	@ (8001d08 <HAL_RCC_ClockConfig+0x1ec>)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c80:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <HAL_RCC_ClockConfig+0x1ec>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e036      	b.n	8001d00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d008      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	4918      	ldr	r1, [pc, #96]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d009      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cbc:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4910      	ldr	r1, [pc, #64]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cd0:	f000 f824 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f0>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	490b      	ldr	r1, [pc, #44]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f4>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cec:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f8>)
 8001cee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cf0:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_ClockConfig+0x1fc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe ffb3 	bl	8000c60 <HAL_InitTick>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cfe:	7afb      	ldrb	r3, [r7, #11]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	08008150 	.word	0x08008150
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	@ 0x24
 8001d20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d34:	4b3b      	ldr	r3, [pc, #236]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x34>
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	2b0c      	cmp	r3, #12
 8001d48:	d121      	bne.n	8001d8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d11e      	bne.n	8001d8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d50:	4b34      	ldr	r3, [pc, #208]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d5c:	4b31      	ldr	r3, [pc, #196]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	e005      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d78:	4a2b      	ldr	r2, [pc, #172]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10d      	bne.n	8001da4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d102      	bne.n	8001d9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d94:	4b25      	ldr	r3, [pc, #148]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	e004      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001da0:	4b23      	ldr	r3, [pc, #140]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x114>)
 8001da2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d134      	bne.n	8001e14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001daa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d003      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xac>
 8001dc0:	e005      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001dc4:	617b      	str	r3, [r7, #20]
      break;
 8001dc6:	e005      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dca:	617b      	str	r3, [r7, #20]
      break;
 8001dcc:	e002      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	617b      	str	r3, [r7, #20]
      break;
 8001dd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dd4:	4b13      	ldr	r3, [pc, #76]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	3301      	adds	r3, #1
 8001de0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001de2:	4b10      	ldr	r3, [pc, #64]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	0a1b      	lsrs	r3, r3, #8
 8001de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	fb03 f202 	mul.w	r2, r3, r2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	0e5b      	lsrs	r3, r3, #25
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	3301      	adds	r3, #1
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e14:	69bb      	ldr	r3, [r7, #24]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	@ 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	08008168 	.word	0x08008168
 8001e2c:	00f42400 	.word	0x00f42400
 8001e30:	007a1200 	.word	0x007a1200

08001e34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b03      	ldr	r3, [pc, #12]	@ (8001e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000000 	.word	0x20000000

08001e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e50:	f7ff fff0 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4904      	ldr	r1, [pc, #16]	@ (8001e74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08008160 	.word	0x08008160

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e7c:	f7ff ffda 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0adb      	lsrs	r3, r3, #11
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4904      	ldr	r1, [pc, #16]	@ (8001ea0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	08008160 	.word	0x08008160

08001ea4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ebc:	f7ff f9ee 	bl	800129c <HAL_PWREx_GetVoltageRange>
 8001ec0:	6178      	str	r0, [r7, #20]
 8001ec2:	e014      	b.n	8001eee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec4:	4b25      	ldr	r3, [pc, #148]	@ (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec8:	4a24      	ldr	r2, [pc, #144]	@ (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ed0:	4b22      	ldr	r3, [pc, #136]	@ (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001edc:	f7ff f9de 	bl	800129c <HAL_PWREx_GetVoltageRange>
 8001ee0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ef4:	d10b      	bne.n	8001f0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b80      	cmp	r3, #128	@ 0x80
 8001efa:	d919      	bls.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f00:	d902      	bls.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f02:	2302      	movs	r3, #2
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	e013      	b.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f08:	2301      	movs	r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	e010      	b.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b80      	cmp	r3, #128	@ 0x80
 8001f12:	d902      	bls.n	8001f1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f14:	2303      	movs	r3, #3
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	e00a      	b.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b80      	cmp	r3, #128	@ 0x80
 8001f1e:	d102      	bne.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f20:	2302      	movs	r3, #2
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	e004      	b.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b70      	cmp	r3, #112	@ 0x70
 8001f2a:	d101      	bne.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 0207 	bic.w	r2, r3, #7
 8001f38:	4909      	ldr	r1, [pc, #36]	@ (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f40:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40022000 	.word	0x40022000

08001f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f70:	2300      	movs	r3, #0
 8001f72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d041      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f84:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f88:	d02a      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f8e:	d824      	bhi.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f94:	d008      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f9a:	d81e      	bhi.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fa4:	d010      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fa6:	e018      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fa8:	4b86      	ldr	r3, [pc, #536]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4a85      	ldr	r2, [pc, #532]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fabb 	bl	8002538 <RCCEx_PLLSAI1_Config>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fc6:	e00c      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3320      	adds	r3, #32
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fba6 	bl	8002720 <RCCEx_PLLSAI2_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fd8:	e003      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	74fb      	strb	r3, [r7, #19]
      break;
 8001fde:	e000      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fe2:	7cfb      	ldrb	r3, [r7, #19]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10b      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fe8:	4b76      	ldr	r3, [pc, #472]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ff6:	4973      	ldr	r1, [pc, #460]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ffe:	e001      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d041      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002014:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002018:	d02a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800201a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800201e:	d824      	bhi.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002020:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002024:	d008      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002026:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800202a:	d81e      	bhi.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002034:	d010      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002036:	e018      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002038:	4b62      	ldr	r3, [pc, #392]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4a61      	ldr	r2, [pc, #388]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002042:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002044:	e015      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3304      	adds	r3, #4
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fa73 	bl	8002538 <RCCEx_PLLSAI1_Config>
 8002052:	4603      	mov	r3, r0
 8002054:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002056:	e00c      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3320      	adds	r3, #32
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fb5e 	bl	8002720 <RCCEx_PLLSAI2_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002068:	e003      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	74fb      	strb	r3, [r7, #19]
      break;
 800206e:	e000      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002072:	7cfb      	ldrb	r3, [r7, #19]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002078:	4b52      	ldr	r3, [pc, #328]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002086:	494f      	ldr	r1, [pc, #316]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800208e:	e001      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80a0 	beq.w	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020a6:	4b47      	ldr	r3, [pc, #284]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020b6:	2300      	movs	r3, #0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00d      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020bc:	4b41      	ldr	r3, [pc, #260]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c0:	4a40      	ldr	r2, [pc, #256]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020c8:	4b3e      	ldr	r3, [pc, #248]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d4:	2301      	movs	r3, #1
 80020d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d8:	4b3b      	ldr	r3, [pc, #236]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a3a      	ldr	r2, [pc, #232]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020e4:	f7fe fe0c 	bl	8000d00 <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ea:	e009      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ec:	f7fe fe08 	bl	8000d00 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d902      	bls.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	74fb      	strb	r3, [r7, #19]
        break;
 80020fe:	e005      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002100:	4b31      	ldr	r3, [pc, #196]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0ef      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d15c      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002112:	4b2c      	ldr	r3, [pc, #176]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002118:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800211c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01f      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	429a      	cmp	r2, r3
 800212e:	d019      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002130:	4b24      	ldr	r3, [pc, #144]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002136:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800213a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800213c:	4b21      	ldr	r3, [pc, #132]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002142:	4a20      	ldr	r2, [pc, #128]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800214c:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002152:	4a1c      	ldr	r2, [pc, #112]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800215c:	4a19      	ldr	r2, [pc, #100]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d016      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216e:	f7fe fdc7 	bl	8000d00 <HAL_GetTick>
 8002172:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002174:	e00b      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe fdc3 	bl	8000d00 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d902      	bls.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	74fb      	strb	r3, [r7, #19]
            break;
 800218c:	e006      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218e:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ec      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10c      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a2:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021b2:	4904      	ldr	r1, [pc, #16]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021ba:	e009      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	74bb      	strb	r3, [r7, #18]
 80021c0:	e006      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021cc:	7cfb      	ldrb	r3, [r7, #19]
 80021ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d0:	7c7b      	ldrb	r3, [r7, #17]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d6:	4b9e      	ldr	r3, [pc, #632]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021da:	4a9d      	ldr	r2, [pc, #628]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ee:	4b98      	ldr	r3, [pc, #608]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f4:	f023 0203 	bic.w	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fc:	4994      	ldr	r1, [pc, #592]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002210:	4b8f      	ldr	r3, [pc, #572]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002216:	f023 020c 	bic.w	r2, r3, #12
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221e:	498c      	ldr	r1, [pc, #560]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002232:	4b87      	ldr	r3, [pc, #540]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002238:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	4983      	ldr	r1, [pc, #524]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002254:	4b7e      	ldr	r3, [pc, #504]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	497b      	ldr	r1, [pc, #492]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002276:	4b76      	ldr	r3, [pc, #472]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002284:	4972      	ldr	r1, [pc, #456]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002298:	4b6d      	ldr	r3, [pc, #436]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a6:	496a      	ldr	r1, [pc, #424]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ba:	4b65      	ldr	r3, [pc, #404]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c8:	4961      	ldr	r1, [pc, #388]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022dc:	4b5c      	ldr	r3, [pc, #368]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ea:	4959      	ldr	r1, [pc, #356]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022fe:	4b54      	ldr	r3, [pc, #336]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002304:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800230c:	4950      	ldr	r1, [pc, #320]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002320:	4b4b      	ldr	r3, [pc, #300]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002326:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232e:	4948      	ldr	r1, [pc, #288]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002342:	4b43      	ldr	r3, [pc, #268]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002348:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002350:	493f      	ldr	r1, [pc, #252]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d028      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002364:	4b3a      	ldr	r3, [pc, #232]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002372:	4937      	ldr	r1, [pc, #220]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800237e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002382:	d106      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002384:	4b32      	ldr	r3, [pc, #200]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a31      	ldr	r2, [pc, #196]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800238e:	60d3      	str	r3, [r2, #12]
 8002390:	e011      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002396:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800239a:	d10c      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3304      	adds	r3, #4
 80023a0:	2101      	movs	r1, #1
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f8c8 	bl	8002538 <RCCEx_PLLSAI1_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
 80023b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d028      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023c2:	4b23      	ldr	r3, [pc, #140]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d0:	491f      	ldr	r1, [pc, #124]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023e0:	d106      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ec:	60d3      	str	r3, [r2, #12]
 80023ee:	e011      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023f8:	d10c      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3304      	adds	r3, #4
 80023fe:	2101      	movs	r1, #1
 8002400:	4618      	mov	r0, r3
 8002402:	f000 f899 	bl	8002538 <RCCEx_PLLSAI1_Config>
 8002406:	4603      	mov	r3, r0
 8002408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800240a:	7cfb      	ldrb	r3, [r7, #19]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d02b      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002426:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800242e:	4908      	ldr	r1, [pc, #32]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800243e:	d109      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002440:	4b03      	ldr	r3, [pc, #12]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a02      	ldr	r2, [pc, #8]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800244a:	60d3      	str	r3, [r2, #12]
 800244c:	e014      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002458:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800245c:	d10c      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	2101      	movs	r1, #1
 8002464:	4618      	mov	r0, r3
 8002466:	f000 f867 	bl	8002538 <RCCEx_PLLSAI1_Config>
 800246a:	4603      	mov	r3, r0
 800246c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02f      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002484:	4b2b      	ldr	r3, [pc, #172]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002492:	4928      	ldr	r1, [pc, #160]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800249e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024a2:	d10d      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3304      	adds	r3, #4
 80024a8:	2102      	movs	r1, #2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f844 	bl	8002538 <RCCEx_PLLSAI1_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d014      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024ba:	7cfb      	ldrb	r3, [r7, #19]
 80024bc:	74bb      	strb	r3, [r7, #18]
 80024be:	e011      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3320      	adds	r3, #32
 80024ce:	2102      	movs	r1, #2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 f925 	bl	8002720 <RCCEx_PLLSAI2_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024da:	7cfb      	ldrb	r3, [r7, #19]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024f0:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024fe:	490d      	ldr	r1, [pc, #52]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002512:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002518:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002522:	4904      	ldr	r1, [pc, #16]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800252a:	7cbb      	ldrb	r3, [r7, #18]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000

08002538 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002546:	4b75      	ldr	r3, [pc, #468]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d018      	beq.n	8002584 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002552:	4b72      	ldr	r3, [pc, #456]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0203 	and.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d10d      	bne.n	800257e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
       ||
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800256a:	4b6c      	ldr	r3, [pc, #432]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
       ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d047      	beq.n	800260e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
 8002582:	e044      	b.n	800260e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d018      	beq.n	80025be <RCCEx_PLLSAI1_Config+0x86>
 800258c:	2b03      	cmp	r3, #3
 800258e:	d825      	bhi.n	80025dc <RCCEx_PLLSAI1_Config+0xa4>
 8002590:	2b01      	cmp	r3, #1
 8002592:	d002      	beq.n	800259a <RCCEx_PLLSAI1_Config+0x62>
 8002594:	2b02      	cmp	r3, #2
 8002596:	d009      	beq.n	80025ac <RCCEx_PLLSAI1_Config+0x74>
 8002598:	e020      	b.n	80025dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800259a:	4b60      	ldr	r3, [pc, #384]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11d      	bne.n	80025e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025aa:	e01a      	b.n	80025e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025ac:	4b5b      	ldr	r3, [pc, #364]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d116      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025bc:	e013      	b.n	80025e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025be:	4b57      	ldr	r3, [pc, #348]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10f      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ca:	4b54      	ldr	r3, [pc, #336]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025da:	e006      	b.n	80025ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
      break;
 80025e0:	e004      	b.n	80025ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025e2:	bf00      	nop
 80025e4:	e002      	b.n	80025ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025e6:	bf00      	nop
 80025e8:	e000      	b.n	80025ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10d      	bne.n	800260e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025f2:	4b4a      	ldr	r3, [pc, #296]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	430b      	orrs	r3, r1
 8002608:	4944      	ldr	r1, [pc, #272]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 800260a:	4313      	orrs	r3, r2
 800260c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d17d      	bne.n	8002710 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002614:	4b41      	ldr	r3, [pc, #260]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a40      	ldr	r2, [pc, #256]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 800261a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800261e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002620:	f7fe fb6e 	bl	8000d00 <HAL_GetTick>
 8002624:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002626:	e009      	b.n	800263c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002628:	f7fe fb6a 	bl	8000d00 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d902      	bls.n	800263c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	73fb      	strb	r3, [r7, #15]
        break;
 800263a:	e005      	b.n	8002648 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800263c:	4b37      	ldr	r3, [pc, #220]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ef      	bne.n	8002628 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d160      	bne.n	8002710 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d111      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002654:	4b31      	ldr	r3, [pc, #196]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800265c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6892      	ldr	r2, [r2, #8]
 8002664:	0211      	lsls	r1, r2, #8
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68d2      	ldr	r2, [r2, #12]
 800266a:	0912      	lsrs	r2, r2, #4
 800266c:	0452      	lsls	r2, r2, #17
 800266e:	430a      	orrs	r2, r1
 8002670:	492a      	ldr	r1, [pc, #168]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	610b      	str	r3, [r1, #16]
 8002676:	e027      	b.n	80026c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d112      	bne.n	80026a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800267e:	4b27      	ldr	r3, [pc, #156]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002686:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6892      	ldr	r2, [r2, #8]
 800268e:	0211      	lsls	r1, r2, #8
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6912      	ldr	r2, [r2, #16]
 8002694:	0852      	lsrs	r2, r2, #1
 8002696:	3a01      	subs	r2, #1
 8002698:	0552      	lsls	r2, r2, #21
 800269a:	430a      	orrs	r2, r1
 800269c:	491f      	ldr	r1, [pc, #124]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	610b      	str	r3, [r1, #16]
 80026a2:	e011      	b.n	80026c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a4:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6892      	ldr	r2, [r2, #8]
 80026b4:	0211      	lsls	r1, r2, #8
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6952      	ldr	r2, [r2, #20]
 80026ba:	0852      	lsrs	r2, r2, #1
 80026bc:	3a01      	subs	r2, #1
 80026be:	0652      	lsls	r2, r2, #25
 80026c0:	430a      	orrs	r2, r1
 80026c2:	4916      	ldr	r1, [pc, #88]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026c8:	4b14      	ldr	r3, [pc, #80]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a13      	ldr	r2, [pc, #76]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe fb14 	bl	8000d00 <HAL_GetTick>
 80026d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026da:	e009      	b.n	80026f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026dc:	f7fe fb10 	bl	8000d00 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d902      	bls.n	80026f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	73fb      	strb	r3, [r7, #15]
          break;
 80026ee:	e005      	b.n	80026fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026f0:	4b0a      	ldr	r3, [pc, #40]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ef      	beq.n	80026dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	4904      	ldr	r1, [pc, #16]	@ (800271c <RCCEx_PLLSAI1_Config+0x1e4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000

08002720 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800272e:	4b6a      	ldr	r3, [pc, #424]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d018      	beq.n	800276c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800273a:	4b67      	ldr	r3, [pc, #412]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0203 	and.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d10d      	bne.n	8002766 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
       ||
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002752:	4b61      	ldr	r3, [pc, #388]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
       ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d047      	beq.n	80027f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	e044      	b.n	80027f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d018      	beq.n	80027a6 <RCCEx_PLLSAI2_Config+0x86>
 8002774:	2b03      	cmp	r3, #3
 8002776:	d825      	bhi.n	80027c4 <RCCEx_PLLSAI2_Config+0xa4>
 8002778:	2b01      	cmp	r3, #1
 800277a:	d002      	beq.n	8002782 <RCCEx_PLLSAI2_Config+0x62>
 800277c:	2b02      	cmp	r3, #2
 800277e:	d009      	beq.n	8002794 <RCCEx_PLLSAI2_Config+0x74>
 8002780:	e020      	b.n	80027c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002782:	4b55      	ldr	r3, [pc, #340]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11d      	bne.n	80027ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002792:	e01a      	b.n	80027ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002794:	4b50      	ldr	r3, [pc, #320]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279c:	2b00      	cmp	r3, #0
 800279e:	d116      	bne.n	80027ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a4:	e013      	b.n	80027ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027a6:	4b4c      	ldr	r3, [pc, #304]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027b2:	4b49      	ldr	r3, [pc, #292]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027c2:	e006      	b.n	80027d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      break;
 80027c8:	e004      	b.n	80027d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ca:	bf00      	nop
 80027cc:	e002      	b.n	80027d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ce:	bf00      	nop
 80027d0:	e000      	b.n	80027d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10d      	bne.n	80027f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027da:	4b3f      	ldr	r3, [pc, #252]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6819      	ldr	r1, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	430b      	orrs	r3, r1
 80027f0:	4939      	ldr	r1, [pc, #228]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d167      	bne.n	80028cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027fc:	4b36      	ldr	r3, [pc, #216]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a35      	ldr	r2, [pc, #212]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002808:	f7fe fa7a 	bl	8000d00 <HAL_GetTick>
 800280c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800280e:	e009      	b.n	8002824 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002810:	f7fe fa76 	bl	8000d00 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d902      	bls.n	8002824 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	73fb      	strb	r3, [r7, #15]
        break;
 8002822:	e005      	b.n	8002830 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002824:	4b2c      	ldr	r3, [pc, #176]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ef      	bne.n	8002810 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d14a      	bne.n	80028cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d111      	bne.n	8002860 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800283c:	4b26      	ldr	r3, [pc, #152]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6892      	ldr	r2, [r2, #8]
 800284c:	0211      	lsls	r1, r2, #8
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68d2      	ldr	r2, [r2, #12]
 8002852:	0912      	lsrs	r2, r2, #4
 8002854:	0452      	lsls	r2, r2, #17
 8002856:	430a      	orrs	r2, r1
 8002858:	491f      	ldr	r1, [pc, #124]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	614b      	str	r3, [r1, #20]
 800285e:	e011      	b.n	8002884 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002860:	4b1d      	ldr	r3, [pc, #116]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002868:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6892      	ldr	r2, [r2, #8]
 8002870:	0211      	lsls	r1, r2, #8
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6912      	ldr	r2, [r2, #16]
 8002876:	0852      	lsrs	r2, r2, #1
 8002878:	3a01      	subs	r2, #1
 800287a:	0652      	lsls	r2, r2, #25
 800287c:	430a      	orrs	r2, r1
 800287e:	4916      	ldr	r1, [pc, #88]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002880:	4313      	orrs	r3, r2
 8002882:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002884:	4b14      	ldr	r3, [pc, #80]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a13      	ldr	r2, [pc, #76]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800288e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002890:	f7fe fa36 	bl	8000d00 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002896:	e009      	b.n	80028ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002898:	f7fe fa32 	bl	8000d00 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	73fb      	strb	r3, [r7, #15]
          break;
 80028aa:	e005      	b.n	80028b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028ac:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ef      	beq.n	8002898 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	4904      	ldr	r1, [pc, #16]	@ (80028d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000

080028dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e040      	b.n	8002970 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe f88a 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	@ 0x24
 8002908:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0201 	bic.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fc32 	bl	800318c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f977 	bl	8002c1c <UART_SetConfig>
 800292e:	4603      	mov	r3, r0
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e01b      	b.n	8002970 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002956:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 fcb1 	bl	80032d0 <UART_CheckIdleState>
 800296e:	4603      	mov	r3, r0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	@ 0x28
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	4613      	mov	r3, r2
 8002986:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800298c:	2b20      	cmp	r3, #32
 800298e:	d177      	bne.n	8002a80 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_UART_Transmit+0x24>
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e070      	b.n	8002a82 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2221      	movs	r2, #33	@ 0x21
 80029ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ae:	f7fe f9a7 	bl	8000d00 <HAL_GetTick>
 80029b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	88fa      	ldrh	r2, [r7, #6]
 80029c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029cc:	d108      	bne.n	80029e0 <HAL_UART_Transmit+0x68>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d104      	bne.n	80029e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	e003      	b.n	80029e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029e8:	e02f      	b.n	8002a4a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2200      	movs	r2, #0
 80029f2:	2180      	movs	r1, #128	@ 0x80
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fd13 	bl	8003420 <UART_WaitOnFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e03b      	b.n	8002a82 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10b      	bne.n	8002a28 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	881a      	ldrh	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a1c:	b292      	uxth	r2, r2
 8002a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	3302      	adds	r3, #2
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e007      	b.n	8002a38 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1c9      	bne.n	80029ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2140      	movs	r1, #64	@ 0x40
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fcdd 	bl	8003420 <UART_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e005      	b.n	8002a82 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e000      	b.n	8002a82 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b08a      	sub	sp, #40	@ 0x28
 8002a8e:	af02      	add	r7, sp, #8
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	f040 80b6 	bne.w	8002c12 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_UART_Receive+0x28>
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0ae      	b.n	8002c14 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2222      	movs	r2, #34	@ 0x22
 8002ac2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002acc:	f7fe f918 	bl	8000d00 <HAL_GetTick>
 8002ad0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	88fa      	ldrh	r2, [r7, #6]
 8002ad6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aea:	d10e      	bne.n	8002b0a <HAL_UART_Receive+0x80>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d105      	bne.n	8002b00 <HAL_UART_Receive+0x76>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002afa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002afe:	e02d      	b.n	8002b5c <HAL_UART_Receive+0xd2>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	22ff      	movs	r2, #255	@ 0xff
 8002b04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b08:	e028      	b.n	8002b5c <HAL_UART_Receive+0xd2>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10d      	bne.n	8002b2e <HAL_UART_Receive+0xa4>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d104      	bne.n	8002b24 <HAL_UART_Receive+0x9a>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	22ff      	movs	r2, #255	@ 0xff
 8002b1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b22:	e01b      	b.n	8002b5c <HAL_UART_Receive+0xd2>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	227f      	movs	r2, #127	@ 0x7f
 8002b28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b2c:	e016      	b.n	8002b5c <HAL_UART_Receive+0xd2>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b36:	d10d      	bne.n	8002b54 <HAL_UART_Receive+0xca>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <HAL_UART_Receive+0xc0>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	227f      	movs	r2, #127	@ 0x7f
 8002b44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b48:	e008      	b.n	8002b5c <HAL_UART_Receive+0xd2>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	223f      	movs	r2, #63	@ 0x3f
 8002b4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b52:	e003      	b.n	8002b5c <HAL_UART_Receive+0xd2>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002b62:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b6c:	d108      	bne.n	8002b80 <HAL_UART_Receive+0xf6>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d104      	bne.n	8002b80 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e003      	b.n	8002b88 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b88:	e037      	b.n	8002bfa <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2200      	movs	r2, #0
 8002b92:	2120      	movs	r1, #32
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fc43 	bl	8003420 <UART_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e033      	b.n	8002c14 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10c      	bne.n	8002bcc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	8a7b      	ldrh	r3, [r7, #18]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	e00d      	b.n	8002be8 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	8a7b      	ldrh	r3, [r7, #18]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	4013      	ands	r3, r2
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3301      	adds	r3, #1
 8002be6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1c1      	bne.n	8002b8a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e000      	b.n	8002c14 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002c12:	2302      	movs	r3, #2
  }
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c20:	b08a      	sub	sp, #40	@ 0x28
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4ba4      	ldr	r3, [pc, #656]	@ (8002edc <UART_SetConfig+0x2c0>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c54:	430b      	orrs	r3, r1
 8002c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a99      	ldr	r2, [pc, #612]	@ (8002ee0 <UART_SetConfig+0x2c4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c84:	4313      	orrs	r3, r2
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a90      	ldr	r2, [pc, #576]	@ (8002ee4 <UART_SetConfig+0x2c8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d126      	bne.n	8002cf4 <UART_SetConfig+0xd8>
 8002ca6:	4b90      	ldr	r3, [pc, #576]	@ (8002ee8 <UART_SetConfig+0x2cc>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d81b      	bhi.n	8002cec <UART_SetConfig+0xd0>
 8002cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cbc <UART_SetConfig+0xa0>)
 8002cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cba:	bf00      	nop
 8002cbc:	08002ccd 	.word	0x08002ccd
 8002cc0:	08002cdd 	.word	0x08002cdd
 8002cc4:	08002cd5 	.word	0x08002cd5
 8002cc8:	08002ce5 	.word	0x08002ce5
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cd2:	e116      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cda:	e112      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002cdc:	2304      	movs	r3, #4
 8002cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ce2:	e10e      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002ce4:	2308      	movs	r3, #8
 8002ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cea:	e10a      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002cec:	2310      	movs	r3, #16
 8002cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cf2:	e106      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a7c      	ldr	r2, [pc, #496]	@ (8002eec <UART_SetConfig+0x2d0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d138      	bne.n	8002d70 <UART_SetConfig+0x154>
 8002cfe:	4b7a      	ldr	r3, [pc, #488]	@ (8002ee8 <UART_SetConfig+0x2cc>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	d82d      	bhi.n	8002d68 <UART_SetConfig+0x14c>
 8002d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d14 <UART_SetConfig+0xf8>)
 8002d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d12:	bf00      	nop
 8002d14:	08002d49 	.word	0x08002d49
 8002d18:	08002d69 	.word	0x08002d69
 8002d1c:	08002d69 	.word	0x08002d69
 8002d20:	08002d69 	.word	0x08002d69
 8002d24:	08002d59 	.word	0x08002d59
 8002d28:	08002d69 	.word	0x08002d69
 8002d2c:	08002d69 	.word	0x08002d69
 8002d30:	08002d69 	.word	0x08002d69
 8002d34:	08002d51 	.word	0x08002d51
 8002d38:	08002d69 	.word	0x08002d69
 8002d3c:	08002d69 	.word	0x08002d69
 8002d40:	08002d69 	.word	0x08002d69
 8002d44:	08002d61 	.word	0x08002d61
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d4e:	e0d8      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002d50:	2302      	movs	r3, #2
 8002d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d56:	e0d4      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d5e:	e0d0      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002d60:	2308      	movs	r3, #8
 8002d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d66:	e0cc      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002d68:	2310      	movs	r3, #16
 8002d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d6e:	e0c8      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a5e      	ldr	r2, [pc, #376]	@ (8002ef0 <UART_SetConfig+0x2d4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d125      	bne.n	8002dc6 <UART_SetConfig+0x1aa>
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee8 <UART_SetConfig+0x2cc>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d84:	2b30      	cmp	r3, #48	@ 0x30
 8002d86:	d016      	beq.n	8002db6 <UART_SetConfig+0x19a>
 8002d88:	2b30      	cmp	r3, #48	@ 0x30
 8002d8a:	d818      	bhi.n	8002dbe <UART_SetConfig+0x1a2>
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d00a      	beq.n	8002da6 <UART_SetConfig+0x18a>
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d814      	bhi.n	8002dbe <UART_SetConfig+0x1a2>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <UART_SetConfig+0x182>
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d008      	beq.n	8002dae <UART_SetConfig+0x192>
 8002d9c:	e00f      	b.n	8002dbe <UART_SetConfig+0x1a2>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002da4:	e0ad      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002da6:	2302      	movs	r3, #2
 8002da8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dac:	e0a9      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002dae:	2304      	movs	r3, #4
 8002db0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002db4:	e0a5      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002db6:	2308      	movs	r3, #8
 8002db8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dbc:	e0a1      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002dbe:	2310      	movs	r3, #16
 8002dc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dc4:	e09d      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef4 <UART_SetConfig+0x2d8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d125      	bne.n	8002e1c <UART_SetConfig+0x200>
 8002dd0:	4b45      	ldr	r3, [pc, #276]	@ (8002ee8 <UART_SetConfig+0x2cc>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002dda:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ddc:	d016      	beq.n	8002e0c <UART_SetConfig+0x1f0>
 8002dde:	2bc0      	cmp	r3, #192	@ 0xc0
 8002de0:	d818      	bhi.n	8002e14 <UART_SetConfig+0x1f8>
 8002de2:	2b80      	cmp	r3, #128	@ 0x80
 8002de4:	d00a      	beq.n	8002dfc <UART_SetConfig+0x1e0>
 8002de6:	2b80      	cmp	r3, #128	@ 0x80
 8002de8:	d814      	bhi.n	8002e14 <UART_SetConfig+0x1f8>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <UART_SetConfig+0x1d8>
 8002dee:	2b40      	cmp	r3, #64	@ 0x40
 8002df0:	d008      	beq.n	8002e04 <UART_SetConfig+0x1e8>
 8002df2:	e00f      	b.n	8002e14 <UART_SetConfig+0x1f8>
 8002df4:	2300      	movs	r3, #0
 8002df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dfa:	e082      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e02:	e07e      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002e04:	2304      	movs	r3, #4
 8002e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e0a:	e07a      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002e0c:	2308      	movs	r3, #8
 8002e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e12:	e076      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002e14:	2310      	movs	r3, #16
 8002e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e1a:	e072      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a35      	ldr	r2, [pc, #212]	@ (8002ef8 <UART_SetConfig+0x2dc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d12a      	bne.n	8002e7c <UART_SetConfig+0x260>
 8002e26:	4b30      	ldr	r3, [pc, #192]	@ (8002ee8 <UART_SetConfig+0x2cc>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e34:	d01a      	beq.n	8002e6c <UART_SetConfig+0x250>
 8002e36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e3a:	d81b      	bhi.n	8002e74 <UART_SetConfig+0x258>
 8002e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e40:	d00c      	beq.n	8002e5c <UART_SetConfig+0x240>
 8002e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e46:	d815      	bhi.n	8002e74 <UART_SetConfig+0x258>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <UART_SetConfig+0x238>
 8002e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e50:	d008      	beq.n	8002e64 <UART_SetConfig+0x248>
 8002e52:	e00f      	b.n	8002e74 <UART_SetConfig+0x258>
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e5a:	e052      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e62:	e04e      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002e64:	2304      	movs	r3, #4
 8002e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e6a:	e04a      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e72:	e046      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002e74:	2310      	movs	r3, #16
 8002e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e7a:	e042      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a17      	ldr	r2, [pc, #92]	@ (8002ee0 <UART_SetConfig+0x2c4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d13a      	bne.n	8002efc <UART_SetConfig+0x2e0>
 8002e86:	4b18      	ldr	r3, [pc, #96]	@ (8002ee8 <UART_SetConfig+0x2cc>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e94:	d01a      	beq.n	8002ecc <UART_SetConfig+0x2b0>
 8002e96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e9a:	d81b      	bhi.n	8002ed4 <UART_SetConfig+0x2b8>
 8002e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ea0:	d00c      	beq.n	8002ebc <UART_SetConfig+0x2a0>
 8002ea2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ea6:	d815      	bhi.n	8002ed4 <UART_SetConfig+0x2b8>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <UART_SetConfig+0x298>
 8002eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb0:	d008      	beq.n	8002ec4 <UART_SetConfig+0x2a8>
 8002eb2:	e00f      	b.n	8002ed4 <UART_SetConfig+0x2b8>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eba:	e022      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ec2:	e01e      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eca:	e01a      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002ecc:	2308      	movs	r3, #8
 8002ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ed2:	e016      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002ed4:	2310      	movs	r3, #16
 8002ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eda:	e012      	b.n	8002f02 <UART_SetConfig+0x2e6>
 8002edc:	efff69f3 	.word	0xefff69f3
 8002ee0:	40008000 	.word	0x40008000
 8002ee4:	40013800 	.word	0x40013800
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40004400 	.word	0x40004400
 8002ef0:	40004800 	.word	0x40004800
 8002ef4:	40004c00 	.word	0x40004c00
 8002ef8:	40005000 	.word	0x40005000
 8002efc:	2310      	movs	r3, #16
 8002efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a9f      	ldr	r2, [pc, #636]	@ (8003184 <UART_SetConfig+0x568>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d17a      	bne.n	8003002 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d824      	bhi.n	8002f5e <UART_SetConfig+0x342>
 8002f14:	a201      	add	r2, pc, #4	@ (adr r2, 8002f1c <UART_SetConfig+0x300>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f41 	.word	0x08002f41
 8002f20:	08002f5f 	.word	0x08002f5f
 8002f24:	08002f49 	.word	0x08002f49
 8002f28:	08002f5f 	.word	0x08002f5f
 8002f2c:	08002f4f 	.word	0x08002f4f
 8002f30:	08002f5f 	.word	0x08002f5f
 8002f34:	08002f5f 	.word	0x08002f5f
 8002f38:	08002f5f 	.word	0x08002f5f
 8002f3c:	08002f57 	.word	0x08002f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f40:	f7fe ff84 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 8002f44:	61f8      	str	r0, [r7, #28]
        break;
 8002f46:	e010      	b.n	8002f6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f48:	4b8f      	ldr	r3, [pc, #572]	@ (8003188 <UART_SetConfig+0x56c>)
 8002f4a:	61fb      	str	r3, [r7, #28]
        break;
 8002f4c:	e00d      	b.n	8002f6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f4e:	f7fe fee5 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8002f52:	61f8      	str	r0, [r7, #28]
        break;
 8002f54:	e009      	b.n	8002f6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f5a:	61fb      	str	r3, [r7, #28]
        break;
 8002f5c:	e005      	b.n	8002f6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80fb 	beq.w	8003168 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d305      	bcc.n	8002f8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d903      	bls.n	8002f96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f94:	e0e8      	b.n	8003168 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	461c      	mov	r4, r3
 8002f9c:	4615      	mov	r5, r2
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	022b      	lsls	r3, r5, #8
 8002fa8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002fac:	0222      	lsls	r2, r4, #8
 8002fae:	68f9      	ldr	r1, [r7, #12]
 8002fb0:	6849      	ldr	r1, [r1, #4]
 8002fb2:	0849      	lsrs	r1, r1, #1
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	4688      	mov	r8, r1
 8002fb8:	4681      	mov	r9, r0
 8002fba:	eb12 0a08 	adds.w	sl, r2, r8
 8002fbe:	eb43 0b09 	adc.w	fp, r3, r9
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fd0:	4650      	mov	r0, sl
 8002fd2:	4659      	mov	r1, fp
 8002fd4:	f7fd f94c 	bl	8000270 <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fe6:	d308      	bcc.n	8002ffa <UART_SetConfig+0x3de>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fee:	d204      	bcs.n	8002ffa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	60da      	str	r2, [r3, #12]
 8002ff8:	e0b6      	b.n	8003168 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003000:	e0b2      	b.n	8003168 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800300a:	d15e      	bne.n	80030ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800300c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003010:	2b08      	cmp	r3, #8
 8003012:	d828      	bhi.n	8003066 <UART_SetConfig+0x44a>
 8003014:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <UART_SetConfig+0x400>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	08003041 	.word	0x08003041
 8003020:	08003049 	.word	0x08003049
 8003024:	08003051 	.word	0x08003051
 8003028:	08003067 	.word	0x08003067
 800302c:	08003057 	.word	0x08003057
 8003030:	08003067 	.word	0x08003067
 8003034:	08003067 	.word	0x08003067
 8003038:	08003067 	.word	0x08003067
 800303c:	0800305f 	.word	0x0800305f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003040:	f7fe ff04 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 8003044:	61f8      	str	r0, [r7, #28]
        break;
 8003046:	e014      	b.n	8003072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003048:	f7fe ff16 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 800304c:	61f8      	str	r0, [r7, #28]
        break;
 800304e:	e010      	b.n	8003072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003050:	4b4d      	ldr	r3, [pc, #308]	@ (8003188 <UART_SetConfig+0x56c>)
 8003052:	61fb      	str	r3, [r7, #28]
        break;
 8003054:	e00d      	b.n	8003072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003056:	f7fe fe61 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 800305a:	61f8      	str	r0, [r7, #28]
        break;
 800305c:	e009      	b.n	8003072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800305e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003062:	61fb      	str	r3, [r7, #28]
        break;
 8003064:	e005      	b.n	8003072 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d077      	beq.n	8003168 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005a      	lsls	r2, r3, #1
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	441a      	add	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b0f      	cmp	r3, #15
 8003092:	d916      	bls.n	80030c2 <UART_SetConfig+0x4a6>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800309a:	d212      	bcs.n	80030c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f023 030f 	bic.w	r3, r3, #15
 80030a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	8afb      	ldrh	r3, [r7, #22]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	8afa      	ldrh	r2, [r7, #22]
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	e052      	b.n	8003168 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030c8:	e04e      	b.n	8003168 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d827      	bhi.n	8003122 <UART_SetConfig+0x506>
 80030d2:	a201      	add	r2, pc, #4	@ (adr r2, 80030d8 <UART_SetConfig+0x4bc>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080030fd 	.word	0x080030fd
 80030dc:	08003105 	.word	0x08003105
 80030e0:	0800310d 	.word	0x0800310d
 80030e4:	08003123 	.word	0x08003123
 80030e8:	08003113 	.word	0x08003113
 80030ec:	08003123 	.word	0x08003123
 80030f0:	08003123 	.word	0x08003123
 80030f4:	08003123 	.word	0x08003123
 80030f8:	0800311b 	.word	0x0800311b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030fc:	f7fe fea6 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 8003100:	61f8      	str	r0, [r7, #28]
        break;
 8003102:	e014      	b.n	800312e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003104:	f7fe feb8 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 8003108:	61f8      	str	r0, [r7, #28]
        break;
 800310a:	e010      	b.n	800312e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800310c:	4b1e      	ldr	r3, [pc, #120]	@ (8003188 <UART_SetConfig+0x56c>)
 800310e:	61fb      	str	r3, [r7, #28]
        break;
 8003110:	e00d      	b.n	800312e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003112:	f7fe fe03 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8003116:	61f8      	str	r0, [r7, #28]
        break;
 8003118:	e009      	b.n	800312e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800311a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800311e:	61fb      	str	r3, [r7, #28]
        break;
 8003120:	e005      	b.n	800312e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800312c:	bf00      	nop
    }

    if (pclk != 0U)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d019      	beq.n	8003168 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	085a      	lsrs	r2, r3, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	441a      	add	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	fbb2 f3f3 	udiv	r3, r2, r3
 8003146:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b0f      	cmp	r3, #15
 800314c:	d909      	bls.n	8003162 <UART_SetConfig+0x546>
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003154:	d205      	bcs.n	8003162 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60da      	str	r2, [r3, #12]
 8003160:	e002      	b.n	8003168 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003174:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003178:	4618      	mov	r0, r3
 800317a:	3728      	adds	r7, #40	@ 0x28
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003182:	bf00      	nop
 8003184:	40008000 	.word	0x40008000
 8003188:	00f42400 	.word	0x00f42400

0800318c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01a      	beq.n	80032a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800328a:	d10a      	bne.n	80032a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	605a      	str	r2, [r3, #4]
  }
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b098      	sub	sp, #96	@ 0x60
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032e0:	f7fd fd0e 	bl	8000d00 <HAL_GetTick>
 80032e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d12e      	bne.n	8003352 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fc:	2200      	movs	r2, #0
 80032fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f88c 	bl	8003420 <UART_WaitOnFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d021      	beq.n	8003352 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003316:	e853 3f00 	ldrex	r3, [r3]
 800331a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800331c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003322:	653b      	str	r3, [r7, #80]	@ 0x50
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800332c:	647b      	str	r3, [r7, #68]	@ 0x44
 800332e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003334:	e841 2300 	strex	r3, r2, [r1]
 8003338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800333a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1e6      	bne.n	800330e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e062      	b.n	8003418 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b04      	cmp	r3, #4
 800335e:	d149      	bne.n	80033f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003360:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003368:	2200      	movs	r2, #0
 800336a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f856 	bl	8003420 <UART_WaitOnFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d03c      	beq.n	80033f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	623b      	str	r3, [r7, #32]
   return(result);
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800338e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003398:	633b      	str	r3, [r7, #48]	@ 0x30
 800339a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800339e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033a0:	e841 2300 	strex	r3, r2, [r1]
 80033a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e6      	bne.n	800337a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3308      	adds	r3, #8
 80033b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3308      	adds	r3, #8
 80033ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033cc:	61fa      	str	r2, [r7, #28]
 80033ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	69b9      	ldr	r1, [r7, #24]
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	617b      	str	r3, [r7, #20]
   return(result);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e5      	bne.n	80033ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e011      	b.n	8003418 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3758      	adds	r7, #88	@ 0x58
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003430:	e04f      	b.n	80034d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d04b      	beq.n	80034d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343a:	f7fd fc61 	bl	8000d00 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	429a      	cmp	r2, r3
 8003448:	d302      	bcc.n	8003450 <UART_WaitOnFlagUntilTimeout+0x30>
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e04e      	b.n	80034f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	d037      	beq.n	80034d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b80      	cmp	r3, #128	@ 0x80
 8003466:	d034      	beq.n	80034d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b40      	cmp	r3, #64	@ 0x40
 800346c:	d031      	beq.n	80034d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b08      	cmp	r3, #8
 800347a:	d110      	bne.n	800349e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2208      	movs	r2, #8
 8003482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f838 	bl	80034fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2208      	movs	r2, #8
 800348e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e029      	b.n	80034f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ac:	d111      	bne.n	80034d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f81e 	bl	80034fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e00f      	b.n	80034f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4013      	ands	r3, r2
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	429a      	cmp	r2, r3
 80034e0:	bf0c      	ite	eq
 80034e2:	2301      	moveq	r3, #1
 80034e4:	2300      	movne	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d0a0      	beq.n	8003432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b095      	sub	sp, #84	@ 0x54
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003516:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003520:	643b      	str	r3, [r7, #64]	@ 0x40
 8003522:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003526:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800352e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e6      	bne.n	8003502 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3308      	adds	r3, #8
 800353a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	61fb      	str	r3, [r7, #28]
   return(result);
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3308      	adds	r3, #8
 8003552:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003554:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003556:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800355a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e5      	bne.n	8003534 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356c:	2b01      	cmp	r3, #1
 800356e:	d118      	bne.n	80035a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	60bb      	str	r3, [r7, #8]
   return(result);
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f023 0310 	bic.w	r3, r3, #16
 8003584:	647b      	str	r3, [r7, #68]	@ 0x44
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6979      	ldr	r1, [r7, #20]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	613b      	str	r3, [r7, #16]
   return(result);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e6      	bne.n	8003570 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035b6:	bf00      	nop
 80035b8:	3754      	adds	r7, #84	@ 0x54
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <__NVIC_SetPriority>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	6039      	str	r1, [r7, #0]
 80035ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	db0a      	blt.n	80035ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	490c      	ldr	r1, [pc, #48]	@ (8003610 <__NVIC_SetPriority+0x4c>)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	440b      	add	r3, r1
 80035e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80035ec:	e00a      	b.n	8003604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	4908      	ldr	r1, [pc, #32]	@ (8003614 <__NVIC_SetPriority+0x50>)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	3b04      	subs	r3, #4
 80035fc:	0112      	lsls	r2, r2, #4
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	440b      	add	r3, r1
 8003602:	761a      	strb	r2, [r3, #24]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	e000e100 	.word	0xe000e100
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800361c:	2100      	movs	r1, #0
 800361e:	f06f 0004 	mvn.w	r0, #4
 8003622:	f7ff ffcf 	bl	80035c4 <__NVIC_SetPriority>
#endif
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003632:	f3ef 8305 	mrs	r3, IPSR
 8003636:	603b      	str	r3, [r7, #0]
  return(result);
 8003638:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800363e:	f06f 0305 	mvn.w	r3, #5
 8003642:	607b      	str	r3, [r7, #4]
 8003644:	e00c      	b.n	8003660 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003646:	4b0a      	ldr	r3, [pc, #40]	@ (8003670 <osKernelInitialize+0x44>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d105      	bne.n	800365a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800364e:	4b08      	ldr	r3, [pc, #32]	@ (8003670 <osKernelInitialize+0x44>)
 8003650:	2201      	movs	r2, #1
 8003652:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003654:	2300      	movs	r3, #0
 8003656:	607b      	str	r3, [r7, #4]
 8003658:	e002      	b.n	8003660 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800365a:	f04f 33ff 	mov.w	r3, #4294967295
 800365e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003660:	687b      	ldr	r3, [r7, #4]
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000128 	.word	0x20000128

08003674 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800367a:	f3ef 8305 	mrs	r3, IPSR
 800367e:	603b      	str	r3, [r7, #0]
  return(result);
 8003680:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003686:	f06f 0305 	mvn.w	r3, #5
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	e010      	b.n	80036b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800368e:	4b0b      	ldr	r3, [pc, #44]	@ (80036bc <osKernelStart+0x48>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d109      	bne.n	80036aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003696:	f7ff ffbf 	bl	8003618 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800369a:	4b08      	ldr	r3, [pc, #32]	@ (80036bc <osKernelStart+0x48>)
 800369c:	2202      	movs	r2, #2
 800369e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80036a0:	f001 fa68 	bl	8004b74 <vTaskStartScheduler>
      stat = osOK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	e002      	b.n	80036b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295
 80036ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036b0:	687b      	ldr	r3, [r7, #4]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000128 	.word	0x20000128

080036c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08e      	sub	sp, #56	@ 0x38
 80036c4:	af04      	add	r7, sp, #16
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036d0:	f3ef 8305 	mrs	r3, IPSR
 80036d4:	617b      	str	r3, [r7, #20]
  return(result);
 80036d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d17e      	bne.n	80037da <osThreadNew+0x11a>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d07b      	beq.n	80037da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80036e2:	2380      	movs	r3, #128	@ 0x80
 80036e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80036e6:	2318      	movs	r3, #24
 80036e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80036ee:	f04f 33ff 	mov.w	r3, #4294967295
 80036f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d045      	beq.n	8003786 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <osThreadNew+0x48>
        name = attr->name;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <osThreadNew+0x6e>
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b38      	cmp	r3, #56	@ 0x38
 8003720:	d805      	bhi.n	800372e <osThreadNew+0x6e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <osThreadNew+0x72>
        return (NULL);
 800372e:	2300      	movs	r3, #0
 8003730:	e054      	b.n	80037dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00e      	beq.n	8003768 <osThreadNew+0xa8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b5b      	cmp	r3, #91	@ 0x5b
 8003750:	d90a      	bls.n	8003768 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003756:	2b00      	cmp	r3, #0
 8003758:	d006      	beq.n	8003768 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <osThreadNew+0xa8>
        mem = 1;
 8003762:	2301      	movs	r3, #1
 8003764:	61bb      	str	r3, [r7, #24]
 8003766:	e010      	b.n	800378a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10c      	bne.n	800378a <osThreadNew+0xca>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d108      	bne.n	800378a <osThreadNew+0xca>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d104      	bne.n	800378a <osThreadNew+0xca>
          mem = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	e001      	b.n	800378a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d110      	bne.n	80037b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003798:	9202      	str	r2, [sp, #8]
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	6a3a      	ldr	r2, [r7, #32]
 80037a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f001 f808 	bl	80047bc <xTaskCreateStatic>
 80037ac:	4603      	mov	r3, r0
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	e013      	b.n	80037da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d110      	bne.n	80037da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	f107 0310 	add.w	r3, r7, #16
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f001 f856 	bl	800487c <xTaskCreate>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d001      	beq.n	80037da <osThreadNew+0x11a>
            hTask = NULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037da:	693b      	ldr	r3, [r7, #16]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3728      	adds	r7, #40	@ 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037ec:	f3ef 8305 	mrs	r3, IPSR
 80037f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80037f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <osDelay+0x1c>
    stat = osErrorISR;
 80037f8:	f06f 0305 	mvn.w	r3, #5
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	e007      	b.n	8003810 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <osDelay+0x2c>
      vTaskDelay(ticks);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f001 f97c 	bl	8004b08 <vTaskDelay>
    }
  }

  return (stat);
 8003810:	68fb      	ldr	r3, [r7, #12]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800381a:	b580      	push	{r7, lr}
 800381c:	b08a      	sub	sp, #40	@ 0x28
 800381e:	af02      	add	r7, sp, #8
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800382a:	f3ef 8305 	mrs	r3, IPSR
 800382e:	613b      	str	r3, [r7, #16]
  return(result);
 8003830:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003832:	2b00      	cmp	r3, #0
 8003834:	d15f      	bne.n	80038f6 <osMessageQueueNew+0xdc>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d05c      	beq.n	80038f6 <osMessageQueueNew+0xdc>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d059      	beq.n	80038f6 <osMessageQueueNew+0xdc>
    mem = -1;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d029      	beq.n	80038a2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d012      	beq.n	800387c <osMessageQueueNew+0x62>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b4f      	cmp	r3, #79	@ 0x4f
 800385c:	d90e      	bls.n	800387c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	429a      	cmp	r2, r3
 8003874:	d302      	bcc.n	800387c <osMessageQueueNew+0x62>
        mem = 1;
 8003876:	2301      	movs	r3, #1
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	e014      	b.n	80038a6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d110      	bne.n	80038a6 <osMessageQueueNew+0x8c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10c      	bne.n	80038a6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003890:	2b00      	cmp	r3, #0
 8003892:	d108      	bne.n	80038a6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d104      	bne.n	80038a6 <osMessageQueueNew+0x8c>
          mem = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	e001      	b.n	80038a6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d10b      	bne.n	80038c4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2100      	movs	r1, #0
 80038b6:	9100      	str	r1, [sp, #0]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fa30 	bl	8003d20 <xQueueGenericCreateStatic>
 80038c0:	61f8      	str	r0, [r7, #28]
 80038c2:	e008      	b.n	80038d6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d105      	bne.n	80038d6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80038ca:	2200      	movs	r2, #0
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 faa3 	bl	8003e1a <xQueueGenericCreate>
 80038d4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00c      	beq.n	80038f6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <osMessageQueueNew+0xd0>
        name = attr->name;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e001      	b.n	80038ee <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80038ee:	6979      	ldr	r1, [r7, #20]
 80038f0:	69f8      	ldr	r0, [r7, #28]
 80038f2:	f000 ff05 	bl	8004700 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80038f6:	69fb      	ldr	r3, [r7, #28]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003914:	2300      	movs	r3, #0
 8003916:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003918:	f3ef 8305 	mrs	r3, IPSR
 800391c:	617b      	str	r3, [r7, #20]
  return(result);
 800391e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003920:	2b00      	cmp	r3, #0
 8003922:	d028      	beq.n	8003976 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <osMessageQueuePut+0x36>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <osMessageQueuePut+0x36>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003936:	f06f 0303 	mvn.w	r3, #3
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	e038      	b.n	80039b0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800393e:	2300      	movs	r3, #0
 8003940:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003942:	f107 0210 	add.w	r2, r7, #16
 8003946:	2300      	movs	r3, #0
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	69b8      	ldr	r0, [r7, #24]
 800394c:	f000 fbc6 	bl	80040dc <xQueueGenericSendFromISR>
 8003950:	4603      	mov	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	d003      	beq.n	800395e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003956:	f06f 0302 	mvn.w	r3, #2
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	e028      	b.n	80039b0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d025      	beq.n	80039b0 <osMessageQueuePut+0xb0>
 8003964:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <osMessageQueuePut+0xbc>)
 8003966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	e01c      	b.n	80039b0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <osMessageQueuePut+0x82>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d103      	bne.n	800398a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003982:	f06f 0303 	mvn.w	r3, #3
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	e012      	b.n	80039b0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800398a:	2300      	movs	r3, #0
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	69b8      	ldr	r0, [r7, #24]
 8003992:	f000 faa1 	bl	8003ed8 <xQueueGenericSend>
 8003996:	4603      	mov	r3, r0
 8003998:	2b01      	cmp	r3, #1
 800399a:	d009      	beq.n	80039b0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80039a2:	f06f 0301 	mvn.w	r3, #1
 80039a6:	61fb      	str	r3, [r7, #28]
 80039a8:	e002      	b.n	80039b0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80039aa:	f06f 0302 	mvn.w	r3, #2
 80039ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80039b0:	69fb      	ldr	r3, [r7, #28]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	e000ed04 	.word	0xe000ed04

080039c0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039d6:	f3ef 8305 	mrs	r3, IPSR
 80039da:	617b      	str	r3, [r7, #20]
  return(result);
 80039dc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d028      	beq.n	8003a34 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <osMessageQueueGet+0x34>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <osMessageQueueGet+0x34>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80039f4:	f06f 0303 	mvn.w	r3, #3
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	e037      	b.n	8003a6c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003a00:	f107 0310 	add.w	r3, r7, #16
 8003a04:	461a      	mov	r2, r3
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	69b8      	ldr	r0, [r7, #24]
 8003a0a:	f000 fce7 	bl	80043dc <xQueueReceiveFromISR>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d003      	beq.n	8003a1c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003a14:	f06f 0302 	mvn.w	r3, #2
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	e027      	b.n	8003a6c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d024      	beq.n	8003a6c <osMessageQueueGet+0xac>
 8003a22:	4b15      	ldr	r3, [pc, #84]	@ (8003a78 <osMessageQueueGet+0xb8>)
 8003a24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	e01b      	b.n	8003a6c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <osMessageQueueGet+0x80>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d103      	bne.n	8003a48 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003a40:	f06f 0303 	mvn.w	r3, #3
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e011      	b.n	8003a6c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	69b8      	ldr	r0, [r7, #24]
 8003a4e:	f000 fbe3 	bl	8004218 <xQueueReceive>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d009      	beq.n	8003a6c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003a5e:	f06f 0301 	mvn.w	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	e002      	b.n	8003a6c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003a66:	f06f 0302 	mvn.w	r3, #2
 8003a6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	e000ed04 	.word	0xe000ed04

08003a7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4a07      	ldr	r2, [pc, #28]	@ (8003aa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4a06      	ldr	r2, [pc, #24]	@ (8003aac <vApplicationGetIdleTaskMemory+0x30>)
 8003a92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2280      	movs	r2, #128	@ 0x80
 8003a98:	601a      	str	r2, [r3, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	2000012c 	.word	0x2000012c
 8003aac:	20000188 	.word	0x20000188

08003ab0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a07      	ldr	r2, [pc, #28]	@ (8003adc <vApplicationGetTimerTaskMemory+0x2c>)
 8003ac0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	4a06      	ldr	r2, [pc, #24]	@ (8003ae0 <vApplicationGetTimerTaskMemory+0x30>)
 8003ac6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ace:	601a      	str	r2, [r3, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	20000388 	.word	0x20000388
 8003ae0:	200003e4 	.word	0x200003e4

08003ae4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f103 0208 	add.w	r2, r3, #8
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295
 8003afc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f103 0208 	add.w	r2, r3, #8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f103 0208 	add.w	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b085      	sub	sp, #20
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	601a      	str	r2, [r3, #0]
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d103      	bne.n	8003ba6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e00c      	b.n	8003bc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e002      	b.n	8003bb4 <vListInsert+0x2e>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d2f6      	bcs.n	8003bae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	601a      	str	r2, [r3, #0]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6892      	ldr	r2, [r2, #8]
 8003c0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6852      	ldr	r2, [r2, #4]
 8003c18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d103      	bne.n	8003c2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	1e5a      	subs	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10b      	bne.n	8003c78 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
 8003c76:	e7fd      	b.n	8003c74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c78:	f002 f936 	bl	8005ee8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c84:	68f9      	ldr	r1, [r7, #12]
 8003c86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c88:	fb01 f303 	mul.w	r3, r1, r3
 8003c8c:	441a      	add	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	68f9      	ldr	r1, [r7, #12]
 8003cac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003cae:	fb01 f303 	mul.w	r3, r1, r3
 8003cb2:	441a      	add	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	22ff      	movs	r2, #255	@ 0xff
 8003cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	22ff      	movs	r2, #255	@ 0xff
 8003cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d114      	bne.n	8003cf8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01a      	beq.n	8003d0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3310      	adds	r3, #16
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 f9d8 	bl	8005090 <xTaskRemoveFromEventList>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d012      	beq.n	8003d0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d1c <xQueueGenericReset+0xd0>)
 8003ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	e009      	b.n	8003d0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3310      	adds	r3, #16
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fef1 	bl	8003ae4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3324      	adds	r3, #36	@ 0x24
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff feec 	bl	8003ae4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d0c:	f002 f91e 	bl	8005f4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d10:	2301      	movs	r3, #1
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08e      	sub	sp, #56	@ 0x38
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10b      	bne.n	8003d4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d46:	bf00      	nop
 8003d48:	bf00      	nop
 8003d4a:	e7fd      	b.n	8003d48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10b      	bne.n	8003d6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	e7fd      	b.n	8003d66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <xQueueGenericCreateStatic+0x56>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <xQueueGenericCreateStatic+0x5a>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <xQueueGenericCreateStatic+0x5c>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10b      	bne.n	8003d98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	623b      	str	r3, [r7, #32]
}
 8003d92:	bf00      	nop
 8003d94:	bf00      	nop
 8003d96:	e7fd      	b.n	8003d94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <xQueueGenericCreateStatic+0x84>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <xQueueGenericCreateStatic+0x88>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <xQueueGenericCreateStatic+0x8a>
 8003da8:	2300      	movs	r3, #0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10b      	bne.n	8003dc6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	61fb      	str	r3, [r7, #28]
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	e7fd      	b.n	8003dc2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003dc6:	2350      	movs	r3, #80	@ 0x50
 8003dc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b50      	cmp	r3, #80	@ 0x50
 8003dce:	d00b      	beq.n	8003de8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	61bb      	str	r3, [r7, #24]
}
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	e7fd      	b.n	8003de4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003de8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00d      	beq.n	8003e10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dfc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f840 	bl	8003e90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3730      	adds	r7, #48	@ 0x30
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b08a      	sub	sp, #40	@ 0x28
 8003e1e:	af02      	add	r7, sp, #8
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	4613      	mov	r3, r2
 8003e26:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10b      	bne.n	8003e46 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	613b      	str	r3, [r7, #16]
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	e7fd      	b.n	8003e42 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	3350      	adds	r3, #80	@ 0x50
 8003e54:	4618      	mov	r0, r3
 8003e56:	f002 f969 	bl	800612c <pvPortMalloc>
 8003e5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d011      	beq.n	8003e86 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	3350      	adds	r3, #80	@ 0x50
 8003e6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e74:	79fa      	ldrb	r2, [r7, #7]
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f805 	bl	8003e90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e86:	69bb      	ldr	r3, [r7, #24]
	}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d103      	bne.n	8003eac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e002      	b.n	8003eb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	69b8      	ldr	r0, [r7, #24]
 8003ec2:	f7ff fec3 	bl	8003c4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	78fa      	ldrb	r2, [r7, #3]
 8003eca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08e      	sub	sp, #56	@ 0x38
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10b      	bne.n	8003f0c <xQueueGenericSend+0x34>
	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f06:	bf00      	nop
 8003f08:	bf00      	nop
 8003f0a:	e7fd      	b.n	8003f08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <xQueueGenericSend+0x42>
 8003f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <xQueueGenericSend+0x46>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <xQueueGenericSend+0x48>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <xQueueGenericSend+0x64>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f36:	bf00      	nop
 8003f38:	bf00      	nop
 8003f3a:	e7fd      	b.n	8003f38 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d103      	bne.n	8003f4a <xQueueGenericSend+0x72>
 8003f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <xQueueGenericSend+0x76>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <xQueueGenericSend+0x78>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <xQueueGenericSend+0x94>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	623b      	str	r3, [r7, #32]
}
 8003f66:	bf00      	nop
 8003f68:	bf00      	nop
 8003f6a:	e7fd      	b.n	8003f68 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f6c:	f001 fa50 	bl	8005410 <xTaskGetSchedulerState>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <xQueueGenericSend+0xa4>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <xQueueGenericSend+0xa8>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <xQueueGenericSend+0xaa>
 8003f80:	2300      	movs	r3, #0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10b      	bne.n	8003f9e <xQueueGenericSend+0xc6>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	61fb      	str	r3, [r7, #28]
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	e7fd      	b.n	8003f9a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f9e:	f001 ffa3 	bl	8005ee8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <xQueueGenericSend+0xdc>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d129      	bne.n	8004008 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fba:	f000 fa91 	bl	80044e0 <prvCopyDataToQueue>
 8003fbe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d010      	beq.n	8003fea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fca:	3324      	adds	r3, #36	@ 0x24
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 f85f 	bl	8005090 <xTaskRemoveFromEventList>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d013      	beq.n	8004000 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80040d8 <xQueueGenericSend+0x200>)
 8003fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	e00a      	b.n	8004000 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ff0:	4b39      	ldr	r3, [pc, #228]	@ (80040d8 <xQueueGenericSend+0x200>)
 8003ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004000:	f001 ffa4 	bl	8005f4c <vPortExitCritical>
				return pdPASS;
 8004004:	2301      	movs	r3, #1
 8004006:	e063      	b.n	80040d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800400e:	f001 ff9d 	bl	8005f4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004012:	2300      	movs	r3, #0
 8004014:	e05c      	b.n	80040d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	4618      	mov	r0, r3
 8004022:	f001 f899 	bl	8005158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800402a:	f001 ff8f 	bl	8005f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800402e:	f000 fe09 	bl	8004c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004032:	f001 ff59 	bl	8005ee8 <vPortEnterCritical>
 8004036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004038:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800403c:	b25b      	sxtb	r3, r3
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d103      	bne.n	800404c <xQueueGenericSend+0x174>
 8004044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800404c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004052:	b25b      	sxtb	r3, r3
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d103      	bne.n	8004062 <xQueueGenericSend+0x18a>
 800405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004062:	f001 ff73 	bl	8005f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004066:	1d3a      	adds	r2, r7, #4
 8004068:	f107 0314 	add.w	r3, r7, #20
 800406c:	4611      	mov	r1, r2
 800406e:	4618      	mov	r0, r3
 8004070:	f001 f888 	bl	8005184 <xTaskCheckForTimeOut>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d124      	bne.n	80040c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800407a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800407c:	f000 fb28 	bl	80046d0 <prvIsQueueFull>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d018      	beq.n	80040b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004088:	3310      	adds	r3, #16
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f000 ffac 	bl	8004fec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004094:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004096:	f000 fab3 	bl	8004600 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800409a:	f000 fde1 	bl	8004c60 <xTaskResumeAll>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f47f af7c 	bne.w	8003f9e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80040a6:	4b0c      	ldr	r3, [pc, #48]	@ (80040d8 <xQueueGenericSend+0x200>)
 80040a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	e772      	b.n	8003f9e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040ba:	f000 faa1 	bl	8004600 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040be:	f000 fdcf 	bl	8004c60 <xTaskResumeAll>
 80040c2:	e76c      	b.n	8003f9e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040c6:	f000 fa9b 	bl	8004600 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040ca:	f000 fdc9 	bl	8004c60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3738      	adds	r7, #56	@ 0x38
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	e000ed04 	.word	0xe000ed04

080040dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b090      	sub	sp, #64	@ 0x40
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80040ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10b      	bne.n	800410c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004106:	bf00      	nop
 8004108:	bf00      	nop
 800410a:	e7fd      	b.n	8004108 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d103      	bne.n	800411a <xQueueGenericSendFromISR+0x3e>
 8004112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <xQueueGenericSendFromISR+0x42>
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <xQueueGenericSendFromISR+0x44>
 800411e:	2300      	movs	r3, #0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d103      	bne.n	800414a <xQueueGenericSendFromISR+0x6e>
 8004142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <xQueueGenericSendFromISR+0x72>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <xQueueGenericSendFromISR+0x74>
 800414e:	2300      	movs	r3, #0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	623b      	str	r3, [r7, #32]
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	e7fd      	b.n	8004168 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800416c:	f001 ff9c 	bl	80060a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004170:	f3ef 8211 	mrs	r2, BASEPRI
 8004174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	61fa      	str	r2, [r7, #28]
 8004186:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004188:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800418a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800418c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004194:	429a      	cmp	r2, r3
 8004196:	d302      	bcc.n	800419e <xQueueGenericSendFromISR+0xc2>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d12f      	bne.n	80041fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800419e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80041b4:	f000 f994 	bl	80044e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d112      	bne.n	80041e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d016      	beq.n	80041f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041cc:	3324      	adds	r3, #36	@ 0x24
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 ff5e 	bl	8005090 <xTaskRemoveFromEventList>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00e      	beq.n	80041f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00b      	beq.n	80041f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e007      	b.n	80041f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80041ec:	3301      	adds	r3, #1
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	b25a      	sxtb	r2, r3
 80041f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80041f8:	2301      	movs	r3, #1
 80041fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80041fc:	e001      	b.n	8004202 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004204:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800420c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800420e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004210:	4618      	mov	r0, r3
 8004212:	3740      	adds	r7, #64	@ 0x40
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08c      	sub	sp, #48	@ 0x30
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004224:	2300      	movs	r3, #0
 8004226:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800422c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10b      	bne.n	800424a <xQueueReceive+0x32>
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	623b      	str	r3, [r7, #32]
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop
 8004248:	e7fd      	b.n	8004246 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d103      	bne.n	8004258 <xQueueReceive+0x40>
 8004250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <xQueueReceive+0x44>
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <xQueueReceive+0x46>
 800425c:	2300      	movs	r3, #0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <xQueueReceive+0x62>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	61fb      	str	r3, [r7, #28]
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop
 8004278:	e7fd      	b.n	8004276 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800427a:	f001 f8c9 	bl	8005410 <xTaskGetSchedulerState>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d102      	bne.n	800428a <xQueueReceive+0x72>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <xQueueReceive+0x76>
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <xQueueReceive+0x78>
 800428e:	2300      	movs	r3, #0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10b      	bne.n	80042ac <xQueueReceive+0x94>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	61bb      	str	r3, [r7, #24]
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042ac:	f001 fe1c 	bl	8005ee8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01f      	beq.n	80042fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042c0:	f000 f978 	bl	80045b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	1e5a      	subs	r2, r3, #1
 80042c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00f      	beq.n	80042f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d6:	3310      	adds	r3, #16
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fed9 	bl	8005090 <xTaskRemoveFromEventList>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042e4:	4b3c      	ldr	r3, [pc, #240]	@ (80043d8 <xQueueReceive+0x1c0>)
 80042e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042f4:	f001 fe2a 	bl	8005f4c <vPortExitCritical>
				return pdPASS;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e069      	b.n	80043d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d103      	bne.n	800430a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004302:	f001 fe23 	bl	8005f4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004306:	2300      	movs	r3, #0
 8004308:	e062      	b.n	80043d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800430a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800430c:	2b00      	cmp	r3, #0
 800430e:	d106      	bne.n	800431e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004310:	f107 0310 	add.w	r3, r7, #16
 8004314:	4618      	mov	r0, r3
 8004316:	f000 ff1f 	bl	8005158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800431a:	2301      	movs	r3, #1
 800431c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800431e:	f001 fe15 	bl	8005f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004322:	f000 fc8f 	bl	8004c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004326:	f001 fddf 	bl	8005ee8 <vPortEnterCritical>
 800432a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004330:	b25b      	sxtb	r3, r3
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004336:	d103      	bne.n	8004340 <xQueueReceive+0x128>
 8004338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004342:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004346:	b25b      	sxtb	r3, r3
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d103      	bne.n	8004356 <xQueueReceive+0x13e>
 800434e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004356:	f001 fdf9 	bl	8005f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800435a:	1d3a      	adds	r2, r7, #4
 800435c:	f107 0310 	add.w	r3, r7, #16
 8004360:	4611      	mov	r1, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f000 ff0e 	bl	8005184 <xTaskCheckForTimeOut>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d123      	bne.n	80043b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800436e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004370:	f000 f998 	bl	80046a4 <prvIsQueueEmpty>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d017      	beq.n	80043aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	3324      	adds	r3, #36	@ 0x24
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fe32 	bl	8004fec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004388:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800438a:	f000 f939 	bl	8004600 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800438e:	f000 fc67 	bl	8004c60 <xTaskResumeAll>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d189      	bne.n	80042ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004398:	4b0f      	ldr	r3, [pc, #60]	@ (80043d8 <xQueueReceive+0x1c0>)
 800439a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	e780      	b.n	80042ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043ac:	f000 f928 	bl	8004600 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043b0:	f000 fc56 	bl	8004c60 <xTaskResumeAll>
 80043b4:	e77a      	b.n	80042ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043b8:	f000 f922 	bl	8004600 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043bc:	f000 fc50 	bl	8004c60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043c2:	f000 f96f 	bl	80046a4 <prvIsQueueEmpty>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f43f af6f 	beq.w	80042ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3730      	adds	r7, #48	@ 0x30
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	e000ed04 	.word	0xe000ed04

080043dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08e      	sub	sp, #56	@ 0x38
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	623b      	str	r3, [r7, #32]
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	e7fd      	b.n	8004406 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d103      	bne.n	8004418 <xQueueReceiveFromISR+0x3c>
 8004410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <xQueueReceiveFromISR+0x40>
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <xQueueReceiveFromISR+0x42>
 800441c:	2300      	movs	r3, #0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10b      	bne.n	800443a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	61fb      	str	r3, [r7, #28]
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	e7fd      	b.n	8004436 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800443a:	f001 fe35 	bl	80060a8 <vPortValidateInterruptPriority>
	__asm volatile
 800443e:	f3ef 8211 	mrs	r2, BASEPRI
 8004442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	61ba      	str	r2, [r7, #24]
 8004454:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004456:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004458:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800445a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004462:	2b00      	cmp	r3, #0
 8004464:	d02f      	beq.n	80044c6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800446c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004474:	f000 f89e 	bl	80045b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447a:	1e5a      	subs	r2, r3, #1
 800447c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004480:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d112      	bne.n	80044b0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d016      	beq.n	80044c0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	3310      	adds	r3, #16
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fdfa 	bl	8005090 <xTaskRemoveFromEventList>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00e      	beq.n	80044c0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00b      	beq.n	80044c0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e007      	b.n	80044c0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80044b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044b4:	3301      	adds	r3, #1
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	b25a      	sxtb	r2, r3
 80044ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80044c0:	2301      	movs	r3, #1
 80044c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c4:	e001      	b.n	80044ca <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f383 8811 	msr	BASEPRI, r3
}
 80044d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3738      	adds	r7, #56	@ 0x38
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10d      	bne.n	800451a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d14d      	bne.n	80045a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 ff9e 	bl	800544c <xTaskPriorityDisinherit>
 8004510:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	e043      	b.n	80045a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d119      	bne.n	8004554 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6858      	ldr	r0, [r3, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004528:	461a      	mov	r2, r3
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	f002 fb05 	bl	8006b3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	441a      	add	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d32b      	bcc.n	80045a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	e026      	b.n	80045a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68d8      	ldr	r0, [r3, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	461a      	mov	r2, r3
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	f002 faeb 	bl	8006b3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	425b      	negs	r3, r3
 800456e:	441a      	add	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d207      	bcs.n	8004590 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	425b      	negs	r3, r3
 800458a:	441a      	add	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d105      	bne.n	80045a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	3b01      	subs	r3, #1
 80045a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80045aa:	697b      	ldr	r3, [r7, #20]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d018      	beq.n	80045f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	441a      	add	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d303      	bcc.n	80045e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68d9      	ldr	r1, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	461a      	mov	r2, r3
 80045f2:	6838      	ldr	r0, [r7, #0]
 80045f4:	f002 faa1 	bl	8006b3a <memcpy>
	}
}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004608:	f001 fc6e 	bl	8005ee8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004612:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004614:	e011      	b.n	800463a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	2b00      	cmp	r3, #0
 800461c:	d012      	beq.n	8004644 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3324      	adds	r3, #36	@ 0x24
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fd34 	bl	8005090 <xTaskRemoveFromEventList>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800462e:	f000 fe0d 	bl	800524c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	3b01      	subs	r3, #1
 8004636:	b2db      	uxtb	r3, r3
 8004638:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800463a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463e:	2b00      	cmp	r3, #0
 8004640:	dce9      	bgt.n	8004616 <prvUnlockQueue+0x16>
 8004642:	e000      	b.n	8004646 <prvUnlockQueue+0x46>
					break;
 8004644:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	22ff      	movs	r2, #255	@ 0xff
 800464a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800464e:	f001 fc7d 	bl	8005f4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004652:	f001 fc49 	bl	8005ee8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800465c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800465e:	e011      	b.n	8004684 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d012      	beq.n	800468e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3310      	adds	r3, #16
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fd0f 	bl	8005090 <xTaskRemoveFromEventList>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004678:	f000 fde8 	bl	800524c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800467c:	7bbb      	ldrb	r3, [r7, #14]
 800467e:	3b01      	subs	r3, #1
 8004680:	b2db      	uxtb	r3, r3
 8004682:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004688:	2b00      	cmp	r3, #0
 800468a:	dce9      	bgt.n	8004660 <prvUnlockQueue+0x60>
 800468c:	e000      	b.n	8004690 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800468e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	22ff      	movs	r2, #255	@ 0xff
 8004694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004698:	f001 fc58 	bl	8005f4c <vPortExitCritical>
}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046ac:	f001 fc1c 	bl	8005ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046b8:	2301      	movs	r3, #1
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e001      	b.n	80046c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046c2:	f001 fc43 	bl	8005f4c <vPortExitCritical>

	return xReturn;
 80046c6:	68fb      	ldr	r3, [r7, #12]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046d8:	f001 fc06 	bl	8005ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d102      	bne.n	80046ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046e8:	2301      	movs	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e001      	b.n	80046f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046f2:	f001 fc2b 	bl	8005f4c <vPortExitCritical>

	return xReturn;
 80046f6:	68fb      	ldr	r3, [r7, #12]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e014      	b.n	800473a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004710:	4a0f      	ldr	r2, [pc, #60]	@ (8004750 <vQueueAddToRegistry+0x50>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800471c:	490c      	ldr	r1, [pc, #48]	@ (8004750 <vQueueAddToRegistry+0x50>)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004726:	4a0a      	ldr	r2, [pc, #40]	@ (8004750 <vQueueAddToRegistry+0x50>)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4413      	add	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004732:	e006      	b.n	8004742 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3301      	adds	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b07      	cmp	r3, #7
 800473e:	d9e7      	bls.n	8004710 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	200007e4 	.word	0x200007e4

08004754 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004764:	f001 fbc0 	bl	8005ee8 <vPortEnterCritical>
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800476e:	b25b      	sxtb	r3, r3
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d103      	bne.n	800477e <vQueueWaitForMessageRestricted+0x2a>
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004784:	b25b      	sxtb	r3, r3
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d103      	bne.n	8004794 <vQueueWaitForMessageRestricted+0x40>
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004794:	f001 fbda 	bl	8005f4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	3324      	adds	r3, #36	@ 0x24
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fc45 	bl	8005038 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80047ae:	6978      	ldr	r0, [r7, #20]
 80047b0:	f7ff ff26 	bl	8004600 <prvUnlockQueue>
	}
 80047b4:	bf00      	nop
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08e      	sub	sp, #56	@ 0x38
 80047c0:	af04      	add	r7, sp, #16
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10b      	bne.n	80047e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	623b      	str	r3, [r7, #32]
}
 80047e2:	bf00      	nop
 80047e4:	bf00      	nop
 80047e6:	e7fd      	b.n	80047e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10b      	bne.n	8004806 <xTaskCreateStatic+0x4a>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	61fb      	str	r3, [r7, #28]
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	e7fd      	b.n	8004802 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004806:	235c      	movs	r3, #92	@ 0x5c
 8004808:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b5c      	cmp	r3, #92	@ 0x5c
 800480e:	d00b      	beq.n	8004828 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	61bb      	str	r3, [r7, #24]
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	e7fd      	b.n	8004824 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004828:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800482a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01e      	beq.n	800486e <xTaskCreateStatic+0xb2>
 8004830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01b      	beq.n	800486e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004838:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004848:	2300      	movs	r3, #0
 800484a:	9303      	str	r3, [sp, #12]
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	9302      	str	r3, [sp, #8]
 8004850:	f107 0314 	add.w	r3, r7, #20
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f850 	bl	8004906 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004866:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004868:	f000 f8de 	bl	8004a28 <prvAddNewTaskToReadyList>
 800486c:	e001      	b.n	8004872 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004872:	697b      	ldr	r3, [r7, #20]
	}
 8004874:	4618      	mov	r0, r3
 8004876:	3728      	adds	r7, #40	@ 0x28
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08c      	sub	sp, #48	@ 0x30
 8004880:	af04      	add	r7, sp, #16
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800488c:	88fb      	ldrh	r3, [r7, #6]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4618      	mov	r0, r3
 8004892:	f001 fc4b 	bl	800612c <pvPortMalloc>
 8004896:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00e      	beq.n	80048bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800489e:	205c      	movs	r0, #92	@ 0x5c
 80048a0:	f001 fc44 	bl	800612c <pvPortMalloc>
 80048a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80048b2:	e005      	b.n	80048c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048b4:	6978      	ldr	r0, [r7, #20]
 80048b6:	f001 fd07 	bl	80062c8 <vPortFree>
 80048ba:	e001      	b.n	80048c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d017      	beq.n	80048f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048ce:	88fa      	ldrh	r2, [r7, #6]
 80048d0:	2300      	movs	r3, #0
 80048d2:	9303      	str	r3, [sp, #12]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	9302      	str	r3, [sp, #8]
 80048d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f80e 	bl	8004906 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048ea:	69f8      	ldr	r0, [r7, #28]
 80048ec:	f000 f89c 	bl	8004a28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048f0:	2301      	movs	r3, #1
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	e002      	b.n	80048fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048f6:	f04f 33ff 	mov.w	r3, #4294967295
 80048fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048fc:	69bb      	ldr	r3, [r7, #24]
	}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b088      	sub	sp, #32
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	461a      	mov	r2, r3
 800491e:	21a5      	movs	r1, #165	@ 0xa5
 8004920:	f002 f88f 	bl	8006a42 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004926:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800492e:	3b01      	subs	r3, #1
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	f023 0307 	bic.w	r3, r3, #7
 800493c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00b      	beq.n	8004960 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	617b      	str	r3, [r7, #20]
}
 800495a:	bf00      	nop
 800495c:	bf00      	nop
 800495e:	e7fd      	b.n	800495c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01f      	beq.n	80049a6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	e012      	b.n	8004992 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	4413      	add	r3, r2
 8004972:	7819      	ldrb	r1, [r3, #0]
 8004974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	3334      	adds	r3, #52	@ 0x34
 800497c:	460a      	mov	r2, r1
 800497e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	4413      	add	r3, r2
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d006      	beq.n	800499a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	3301      	adds	r3, #1
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	2b0f      	cmp	r3, #15
 8004996:	d9e9      	bls.n	800496c <prvInitialiseNewTask+0x66>
 8004998:	e000      	b.n	800499c <prvInitialiseNewTask+0x96>
			{
				break;
 800499a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800499c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049a4:	e003      	b.n	80049ae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b0:	2b37      	cmp	r3, #55	@ 0x37
 80049b2:	d901      	bls.n	80049b8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049b4:	2337      	movs	r3, #55	@ 0x37
 80049b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049c2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c6:	2200      	movs	r2, #0
 80049c8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049cc:	3304      	adds	r3, #4
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff f8a8 	bl	8003b24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d6:	3318      	adds	r3, #24
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff f8a3 	bl	8003b24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f6:	2200      	movs	r2, #0
 80049f8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	68f9      	ldr	r1, [r7, #12]
 8004a06:	69b8      	ldr	r0, [r7, #24]
 8004a08:	f001 f93e 	bl	8005c88 <pxPortInitialiseStack>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a1e:	bf00      	nop
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a30:	f001 fa5a 	bl	8005ee8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a34:	4b2d      	ldr	r3, [pc, #180]	@ (8004aec <prvAddNewTaskToReadyList+0xc4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8004aec <prvAddNewTaskToReadyList+0xc4>)
 8004a3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8004af0 <prvAddNewTaskToReadyList+0xc8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a46:	4a2a      	ldr	r2, [pc, #168]	@ (8004af0 <prvAddNewTaskToReadyList+0xc8>)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a4c:	4b27      	ldr	r3, [pc, #156]	@ (8004aec <prvAddNewTaskToReadyList+0xc4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d110      	bne.n	8004a76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a54:	f000 fc1e 	bl	8005294 <prvInitialiseTaskLists>
 8004a58:	e00d      	b.n	8004a76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a5a:	4b26      	ldr	r3, [pc, #152]	@ (8004af4 <prvAddNewTaskToReadyList+0xcc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a62:	4b23      	ldr	r3, [pc, #140]	@ (8004af0 <prvAddNewTaskToReadyList+0xc8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d802      	bhi.n	8004a76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a70:	4a1f      	ldr	r2, [pc, #124]	@ (8004af0 <prvAddNewTaskToReadyList+0xc8>)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a76:	4b20      	ldr	r3, [pc, #128]	@ (8004af8 <prvAddNewTaskToReadyList+0xd0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004af8 <prvAddNewTaskToReadyList+0xd0>)
 8004a7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a80:	4b1d      	ldr	r3, [pc, #116]	@ (8004af8 <prvAddNewTaskToReadyList+0xd0>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004afc <prvAddNewTaskToReadyList+0xd4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d903      	bls.n	8004a9c <prvAddNewTaskToReadyList+0x74>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a98:	4a18      	ldr	r2, [pc, #96]	@ (8004afc <prvAddNewTaskToReadyList+0xd4>)
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4a15      	ldr	r2, [pc, #84]	@ (8004b00 <prvAddNewTaskToReadyList+0xd8>)
 8004aaa:	441a      	add	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	f7ff f843 	bl	8003b3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ab8:	f001 fa48 	bl	8005f4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004abc:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <prvAddNewTaskToReadyList+0xcc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00e      	beq.n	8004ae2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <prvAddNewTaskToReadyList+0xc8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d207      	bcs.n	8004ae2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8004b04 <prvAddNewTaskToReadyList+0xdc>)
 8004ad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ae2:	bf00      	nop
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000cf8 	.word	0x20000cf8
 8004af0:	20000824 	.word	0x20000824
 8004af4:	20000d04 	.word	0x20000d04
 8004af8:	20000d14 	.word	0x20000d14
 8004afc:	20000d00 	.word	0x20000d00
 8004b00:	20000828 	.word	0x20000828
 8004b04:	e000ed04 	.word	0xe000ed04

08004b08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d018      	beq.n	8004b4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b1a:	4b14      	ldr	r3, [pc, #80]	@ (8004b6c <vTaskDelay+0x64>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <vTaskDelay+0x32>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	60bb      	str	r3, [r7, #8]
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	e7fd      	b.n	8004b36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b3a:	f000 f883 	bl	8004c44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b3e:	2100      	movs	r1, #0
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fcf3 	bl	800552c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b46:	f000 f88b 	bl	8004c60 <xTaskResumeAll>
 8004b4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d107      	bne.n	8004b62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b52:	4b07      	ldr	r3, [pc, #28]	@ (8004b70 <vTaskDelay+0x68>)
 8004b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000d20 	.word	0x20000d20
 8004b70:	e000ed04 	.word	0xe000ed04

08004b74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	@ 0x28
 8004b78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b82:	463a      	mov	r2, r7
 8004b84:	1d39      	adds	r1, r7, #4
 8004b86:	f107 0308 	add.w	r3, r7, #8
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe ff76 	bl	8003a7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b90:	6839      	ldr	r1, [r7, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	9202      	str	r2, [sp, #8]
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	460a      	mov	r2, r1
 8004ba2:	4922      	ldr	r1, [pc, #136]	@ (8004c2c <vTaskStartScheduler+0xb8>)
 8004ba4:	4822      	ldr	r0, [pc, #136]	@ (8004c30 <vTaskStartScheduler+0xbc>)
 8004ba6:	f7ff fe09 	bl	80047bc <xTaskCreateStatic>
 8004baa:	4603      	mov	r3, r0
 8004bac:	4a21      	ldr	r2, [pc, #132]	@ (8004c34 <vTaskStartScheduler+0xc0>)
 8004bae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bb0:	4b20      	ldr	r3, [pc, #128]	@ (8004c34 <vTaskStartScheduler+0xc0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e001      	b.n	8004bc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d102      	bne.n	8004bce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004bc8:	f000 fd04 	bl	80055d4 <xTimerCreateTimerTask>
 8004bcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d116      	bne.n	8004c02 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	613b      	str	r3, [r7, #16]
}
 8004be6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004be8:	4b13      	ldr	r3, [pc, #76]	@ (8004c38 <vTaskStartScheduler+0xc4>)
 8004bea:	f04f 32ff 	mov.w	r2, #4294967295
 8004bee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004bf0:	4b12      	ldr	r3, [pc, #72]	@ (8004c3c <vTaskStartScheduler+0xc8>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004bf6:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <vTaskStartScheduler+0xcc>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bfc:	f001 f8d0 	bl	8005da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c00:	e00f      	b.n	8004c22 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c08:	d10b      	bne.n	8004c22 <vTaskStartScheduler+0xae>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	60fb      	str	r3, [r7, #12]
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	e7fd      	b.n	8004c1e <vTaskStartScheduler+0xaa>
}
 8004c22:	bf00      	nop
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	080080e4 	.word	0x080080e4
 8004c30:	08005265 	.word	0x08005265
 8004c34:	20000d1c 	.word	0x20000d1c
 8004c38:	20000d18 	.word	0x20000d18
 8004c3c:	20000d04 	.word	0x20000d04
 8004c40:	20000cfc 	.word	0x20000cfc

08004c44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c48:	4b04      	ldr	r3, [pc, #16]	@ (8004c5c <vTaskSuspendAll+0x18>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	4a03      	ldr	r2, [pc, #12]	@ (8004c5c <vTaskSuspendAll+0x18>)
 8004c50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c52:	bf00      	nop
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	20000d20 	.word	0x20000d20

08004c60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c6e:	4b42      	ldr	r3, [pc, #264]	@ (8004d78 <xTaskResumeAll+0x118>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10b      	bne.n	8004c8e <xTaskResumeAll+0x2e>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	603b      	str	r3, [r7, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c8e:	f001 f92b 	bl	8005ee8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c92:	4b39      	ldr	r3, [pc, #228]	@ (8004d78 <xTaskResumeAll+0x118>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	4a37      	ldr	r2, [pc, #220]	@ (8004d78 <xTaskResumeAll+0x118>)
 8004c9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c9c:	4b36      	ldr	r3, [pc, #216]	@ (8004d78 <xTaskResumeAll+0x118>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d162      	bne.n	8004d6a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ca4:	4b35      	ldr	r3, [pc, #212]	@ (8004d7c <xTaskResumeAll+0x11c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d05e      	beq.n	8004d6a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cac:	e02f      	b.n	8004d0e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cae:	4b34      	ldr	r3, [pc, #208]	@ (8004d80 <xTaskResumeAll+0x120>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3318      	adds	r3, #24
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe ff9c 	bl	8003bf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fe ff97 	bl	8003bf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cce:	4b2d      	ldr	r3, [pc, #180]	@ (8004d84 <xTaskResumeAll+0x124>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d903      	bls.n	8004cde <xTaskResumeAll+0x7e>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cda:	4a2a      	ldr	r2, [pc, #168]	@ (8004d84 <xTaskResumeAll+0x124>)
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4a27      	ldr	r2, [pc, #156]	@ (8004d88 <xTaskResumeAll+0x128>)
 8004cec:	441a      	add	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f7fe ff22 	bl	8003b3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfe:	4b23      	ldr	r3, [pc, #140]	@ (8004d8c <xTaskResumeAll+0x12c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d302      	bcc.n	8004d0e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004d08:	4b21      	ldr	r3, [pc, #132]	@ (8004d90 <xTaskResumeAll+0x130>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8004d80 <xTaskResumeAll+0x120>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1cb      	bne.n	8004cae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d1c:	f000 fb58 	bl	80053d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d20:	4b1c      	ldr	r3, [pc, #112]	@ (8004d94 <xTaskResumeAll+0x134>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d010      	beq.n	8004d4e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d2c:	f000 f846 	bl	8004dbc <xTaskIncrementTick>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004d36:	4b16      	ldr	r3, [pc, #88]	@ (8004d90 <xTaskResumeAll+0x130>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f1      	bne.n	8004d2c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004d48:	4b12      	ldr	r3, [pc, #72]	@ (8004d94 <xTaskResumeAll+0x134>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d4e:	4b10      	ldr	r3, [pc, #64]	@ (8004d90 <xTaskResumeAll+0x130>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d56:	2301      	movs	r3, #1
 8004d58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d98 <xTaskResumeAll+0x138>)
 8004d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d6a:	f001 f8ef 	bl	8005f4c <vPortExitCritical>

	return xAlreadyYielded;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000d20 	.word	0x20000d20
 8004d7c:	20000cf8 	.word	0x20000cf8
 8004d80:	20000cb8 	.word	0x20000cb8
 8004d84:	20000d00 	.word	0x20000d00
 8004d88:	20000828 	.word	0x20000828
 8004d8c:	20000824 	.word	0x20000824
 8004d90:	20000d0c 	.word	0x20000d0c
 8004d94:	20000d08 	.word	0x20000d08
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004da2:	4b05      	ldr	r3, [pc, #20]	@ (8004db8 <xTaskGetTickCount+0x1c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004da8:	687b      	ldr	r3, [r7, #4]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000cfc 	.word	0x20000cfc

08004dbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dc6:	4b4f      	ldr	r3, [pc, #316]	@ (8004f04 <xTaskIncrementTick+0x148>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f040 8090 	bne.w	8004ef0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004dd0:	4b4d      	ldr	r3, [pc, #308]	@ (8004f08 <xTaskIncrementTick+0x14c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8004f08 <xTaskIncrementTick+0x14c>)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d121      	bne.n	8004e28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004de4:	4b49      	ldr	r3, [pc, #292]	@ (8004f0c <xTaskIncrementTick+0x150>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	603b      	str	r3, [r7, #0]
}
 8004e00:	bf00      	nop
 8004e02:	bf00      	nop
 8004e04:	e7fd      	b.n	8004e02 <xTaskIncrementTick+0x46>
 8004e06:	4b41      	ldr	r3, [pc, #260]	@ (8004f0c <xTaskIncrementTick+0x150>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	4b40      	ldr	r3, [pc, #256]	@ (8004f10 <xTaskIncrementTick+0x154>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a3e      	ldr	r2, [pc, #248]	@ (8004f0c <xTaskIncrementTick+0x150>)
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	4a3e      	ldr	r2, [pc, #248]	@ (8004f10 <xTaskIncrementTick+0x154>)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f14 <xTaskIncrementTick+0x158>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	4a3c      	ldr	r2, [pc, #240]	@ (8004f14 <xTaskIncrementTick+0x158>)
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	f000 fad4 	bl	80053d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e28:	4b3b      	ldr	r3, [pc, #236]	@ (8004f18 <xTaskIncrementTick+0x15c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d349      	bcc.n	8004ec6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e32:	4b36      	ldr	r3, [pc, #216]	@ (8004f0c <xTaskIncrementTick+0x150>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d104      	bne.n	8004e46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e3c:	4b36      	ldr	r3, [pc, #216]	@ (8004f18 <xTaskIncrementTick+0x15c>)
 8004e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e42:	601a      	str	r2, [r3, #0]
					break;
 8004e44:	e03f      	b.n	8004ec6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e46:	4b31      	ldr	r3, [pc, #196]	@ (8004f0c <xTaskIncrementTick+0x150>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d203      	bcs.n	8004e66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e5e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f18 <xTaskIncrementTick+0x15c>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e64:	e02f      	b.n	8004ec6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe fec4 	bl	8003bf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	3318      	adds	r3, #24
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fe febb 	bl	8003bf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e86:	4b25      	ldr	r3, [pc, #148]	@ (8004f1c <xTaskIncrementTick+0x160>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d903      	bls.n	8004e96 <xTaskIncrementTick+0xda>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e92:	4a22      	ldr	r2, [pc, #136]	@ (8004f1c <xTaskIncrementTick+0x160>)
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f20 <xTaskIncrementTick+0x164>)
 8004ea4:	441a      	add	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4610      	mov	r0, r2
 8004eae:	f7fe fe46 	bl	8003b3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f24 <xTaskIncrementTick+0x168>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d3b8      	bcc.n	8004e32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ec4:	e7b5      	b.n	8004e32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ec6:	4b17      	ldr	r3, [pc, #92]	@ (8004f24 <xTaskIncrementTick+0x168>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ecc:	4914      	ldr	r1, [pc, #80]	@ (8004f20 <xTaskIncrementTick+0x164>)
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d901      	bls.n	8004ee2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ee2:	4b11      	ldr	r3, [pc, #68]	@ (8004f28 <xTaskIncrementTick+0x16c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004eea:	2301      	movs	r3, #1
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	e004      	b.n	8004efa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8004f2c <xTaskIncrementTick+0x170>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8004f2c <xTaskIncrementTick+0x170>)
 8004ef8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004efa:	697b      	ldr	r3, [r7, #20]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20000d20 	.word	0x20000d20
 8004f08:	20000cfc 	.word	0x20000cfc
 8004f0c:	20000cb0 	.word	0x20000cb0
 8004f10:	20000cb4 	.word	0x20000cb4
 8004f14:	20000d10 	.word	0x20000d10
 8004f18:	20000d18 	.word	0x20000d18
 8004f1c:	20000d00 	.word	0x20000d00
 8004f20:	20000828 	.word	0x20000828
 8004f24:	20000824 	.word	0x20000824
 8004f28:	20000d0c 	.word	0x20000d0c
 8004f2c:	20000d08 	.word	0x20000d08

08004f30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f36:	4b28      	ldr	r3, [pc, #160]	@ (8004fd8 <vTaskSwitchContext+0xa8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f3e:	4b27      	ldr	r3, [pc, #156]	@ (8004fdc <vTaskSwitchContext+0xac>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f44:	e042      	b.n	8004fcc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004f46:	4b25      	ldr	r3, [pc, #148]	@ (8004fdc <vTaskSwitchContext+0xac>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f4c:	4b24      	ldr	r3, [pc, #144]	@ (8004fe0 <vTaskSwitchContext+0xb0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e011      	b.n	8004f78 <vTaskSwitchContext+0x48>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10b      	bne.n	8004f72 <vTaskSwitchContext+0x42>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	607b      	str	r3, [r7, #4]
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	e7fd      	b.n	8004f6e <vTaskSwitchContext+0x3e>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	491a      	ldr	r1, [pc, #104]	@ (8004fe4 <vTaskSwitchContext+0xb4>)
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0e3      	beq.n	8004f54 <vTaskSwitchContext+0x24>
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4a13      	ldr	r2, [pc, #76]	@ (8004fe4 <vTaskSwitchContext+0xb4>)
 8004f98:	4413      	add	r3, r2
 8004f9a:	60bb      	str	r3, [r7, #8]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	605a      	str	r2, [r3, #4]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	3308      	adds	r3, #8
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d104      	bne.n	8004fbc <vTaskSwitchContext+0x8c>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	605a      	str	r2, [r3, #4]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	4a09      	ldr	r2, [pc, #36]	@ (8004fe8 <vTaskSwitchContext+0xb8>)
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	4a06      	ldr	r2, [pc, #24]	@ (8004fe0 <vTaskSwitchContext+0xb0>)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6013      	str	r3, [r2, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	20000d20 	.word	0x20000d20
 8004fdc:	20000d0c 	.word	0x20000d0c
 8004fe0:	20000d00 	.word	0x20000d00
 8004fe4:	20000828 	.word	0x20000828
 8004fe8:	20000824 	.word	0x20000824

08004fec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	60fb      	str	r3, [r7, #12]
}
 800500e:	bf00      	nop
 8005010:	bf00      	nop
 8005012:	e7fd      	b.n	8005010 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005014:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <vTaskPlaceOnEventList+0x48>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3318      	adds	r3, #24
 800501a:	4619      	mov	r1, r3
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7fe fdb2 	bl	8003b86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005022:	2101      	movs	r1, #1
 8005024:	6838      	ldr	r0, [r7, #0]
 8005026:	f000 fa81 	bl	800552c <prvAddCurrentTaskToDelayedList>
}
 800502a:	bf00      	nop
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20000824 	.word	0x20000824

08005038 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	617b      	str	r3, [r7, #20]
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	e7fd      	b.n	800505e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005062:	4b0a      	ldr	r3, [pc, #40]	@ (800508c <vTaskPlaceOnEventListRestricted+0x54>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3318      	adds	r3, #24
 8005068:	4619      	mov	r1, r3
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f7fe fd67 	bl	8003b3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005076:	f04f 33ff 	mov.w	r3, #4294967295
 800507a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	68b8      	ldr	r0, [r7, #8]
 8005080:	f000 fa54 	bl	800552c <prvAddCurrentTaskToDelayedList>
	}
 8005084:	bf00      	nop
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000824 	.word	0x20000824

08005090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10b      	bne.n	80050be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	60fb      	str	r3, [r7, #12]
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	e7fd      	b.n	80050ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	3318      	adds	r3, #24
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fe fd98 	bl	8003bf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005140 <xTaskRemoveFromEventList+0xb0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d11d      	bne.n	800510c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	3304      	adds	r3, #4
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fe fd8f 	bl	8003bf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050de:	4b19      	ldr	r3, [pc, #100]	@ (8005144 <xTaskRemoveFromEventList+0xb4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d903      	bls.n	80050ee <xTaskRemoveFromEventList+0x5e>
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ea:	4a16      	ldr	r2, [pc, #88]	@ (8005144 <xTaskRemoveFromEventList+0xb4>)
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4a13      	ldr	r2, [pc, #76]	@ (8005148 <xTaskRemoveFromEventList+0xb8>)
 80050fc:	441a      	add	r2, r3
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	3304      	adds	r3, #4
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f7fe fd1a 	bl	8003b3e <vListInsertEnd>
 800510a:	e005      	b.n	8005118 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	3318      	adds	r3, #24
 8005110:	4619      	mov	r1, r3
 8005112:	480e      	ldr	r0, [pc, #56]	@ (800514c <xTaskRemoveFromEventList+0xbc>)
 8005114:	f7fe fd13 	bl	8003b3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800511c:	4b0c      	ldr	r3, [pc, #48]	@ (8005150 <xTaskRemoveFromEventList+0xc0>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005122:	429a      	cmp	r2, r3
 8005124:	d905      	bls.n	8005132 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005126:	2301      	movs	r3, #1
 8005128:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800512a:	4b0a      	ldr	r3, [pc, #40]	@ (8005154 <xTaskRemoveFromEventList+0xc4>)
 800512c:	2201      	movs	r2, #1
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	e001      	b.n	8005136 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005136:	697b      	ldr	r3, [r7, #20]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20000d20 	.word	0x20000d20
 8005144:	20000d00 	.word	0x20000d00
 8005148:	20000828 	.word	0x20000828
 800514c:	20000cb8 	.word	0x20000cb8
 8005150:	20000824 	.word	0x20000824
 8005154:	20000d0c 	.word	0x20000d0c

08005158 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005160:	4b06      	ldr	r3, [pc, #24]	@ (800517c <vTaskInternalSetTimeOutState+0x24>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005168:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <vTaskInternalSetTimeOutState+0x28>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	605a      	str	r2, [r3, #4]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	20000d10 	.word	0x20000d10
 8005180:	20000cfc 	.word	0x20000cfc

08005184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10b      	bne.n	80051ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	613b      	str	r3, [r7, #16]
}
 80051a6:	bf00      	nop
 80051a8:	bf00      	nop
 80051aa:	e7fd      	b.n	80051a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10b      	bne.n	80051ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60fb      	str	r3, [r7, #12]
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	e7fd      	b.n	80051c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80051ca:	f000 fe8d 	bl	8005ee8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005244 <xTaskCheckForTimeOut+0xc0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d102      	bne.n	80051ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	e023      	b.n	8005236 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b15      	ldr	r3, [pc, #84]	@ (8005248 <xTaskCheckForTimeOut+0xc4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d007      	beq.n	800520a <xTaskCheckForTimeOut+0x86>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	429a      	cmp	r2, r3
 8005202:	d302      	bcc.n	800520a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005204:	2301      	movs	r3, #1
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	e015      	b.n	8005236 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	429a      	cmp	r2, r3
 8005212:	d20b      	bcs.n	800522c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	1ad2      	subs	r2, r2, r3
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff ff99 	bl	8005158 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	e004      	b.n	8005236 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005232:	2301      	movs	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005236:	f000 fe89 	bl	8005f4c <vPortExitCritical>

	return xReturn;
 800523a:	69fb      	ldr	r3, [r7, #28]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20000cfc 	.word	0x20000cfc
 8005248:	20000d10 	.word	0x20000d10

0800524c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005250:	4b03      	ldr	r3, [pc, #12]	@ (8005260 <vTaskMissedYield+0x14>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]
}
 8005256:	bf00      	nop
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	20000d0c 	.word	0x20000d0c

08005264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800526c:	f000 f852 	bl	8005314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005270:	4b06      	ldr	r3, [pc, #24]	@ (800528c <prvIdleTask+0x28>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d9f9      	bls.n	800526c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005278:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <prvIdleTask+0x2c>)
 800527a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005288:	e7f0      	b.n	800526c <prvIdleTask+0x8>
 800528a:	bf00      	nop
 800528c:	20000828 	.word	0x20000828
 8005290:	e000ed04 	.word	0xe000ed04

08005294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800529a:	2300      	movs	r3, #0
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	e00c      	b.n	80052ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4a12      	ldr	r2, [pc, #72]	@ (80052f4 <prvInitialiseTaskLists+0x60>)
 80052ac:	4413      	add	r3, r2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe fc18 	bl	8003ae4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3301      	adds	r3, #1
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b37      	cmp	r3, #55	@ 0x37
 80052be:	d9ef      	bls.n	80052a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052c0:	480d      	ldr	r0, [pc, #52]	@ (80052f8 <prvInitialiseTaskLists+0x64>)
 80052c2:	f7fe fc0f 	bl	8003ae4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052c6:	480d      	ldr	r0, [pc, #52]	@ (80052fc <prvInitialiseTaskLists+0x68>)
 80052c8:	f7fe fc0c 	bl	8003ae4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052cc:	480c      	ldr	r0, [pc, #48]	@ (8005300 <prvInitialiseTaskLists+0x6c>)
 80052ce:	f7fe fc09 	bl	8003ae4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052d2:	480c      	ldr	r0, [pc, #48]	@ (8005304 <prvInitialiseTaskLists+0x70>)
 80052d4:	f7fe fc06 	bl	8003ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052d8:	480b      	ldr	r0, [pc, #44]	@ (8005308 <prvInitialiseTaskLists+0x74>)
 80052da:	f7fe fc03 	bl	8003ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052de:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <prvInitialiseTaskLists+0x78>)
 80052e0:	4a05      	ldr	r2, [pc, #20]	@ (80052f8 <prvInitialiseTaskLists+0x64>)
 80052e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <prvInitialiseTaskLists+0x7c>)
 80052e6:	4a05      	ldr	r2, [pc, #20]	@ (80052fc <prvInitialiseTaskLists+0x68>)
 80052e8:	601a      	str	r2, [r3, #0]
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000828 	.word	0x20000828
 80052f8:	20000c88 	.word	0x20000c88
 80052fc:	20000c9c 	.word	0x20000c9c
 8005300:	20000cb8 	.word	0x20000cb8
 8005304:	20000ccc 	.word	0x20000ccc
 8005308:	20000ce4 	.word	0x20000ce4
 800530c:	20000cb0 	.word	0x20000cb0
 8005310:	20000cb4 	.word	0x20000cb4

08005314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800531a:	e019      	b.n	8005350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800531c:	f000 fde4 	bl	8005ee8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005320:	4b10      	ldr	r3, [pc, #64]	@ (8005364 <prvCheckTasksWaitingTermination+0x50>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3304      	adds	r3, #4
 800532c:	4618      	mov	r0, r3
 800532e:	f7fe fc63 	bl	8003bf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005332:	4b0d      	ldr	r3, [pc, #52]	@ (8005368 <prvCheckTasksWaitingTermination+0x54>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3b01      	subs	r3, #1
 8005338:	4a0b      	ldr	r2, [pc, #44]	@ (8005368 <prvCheckTasksWaitingTermination+0x54>)
 800533a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800533c:	4b0b      	ldr	r3, [pc, #44]	@ (800536c <prvCheckTasksWaitingTermination+0x58>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3b01      	subs	r3, #1
 8005342:	4a0a      	ldr	r2, [pc, #40]	@ (800536c <prvCheckTasksWaitingTermination+0x58>)
 8005344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005346:	f000 fe01 	bl	8005f4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f810 	bl	8005370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005350:	4b06      	ldr	r3, [pc, #24]	@ (800536c <prvCheckTasksWaitingTermination+0x58>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e1      	bne.n	800531c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000ccc 	.word	0x20000ccc
 8005368:	20000cf8 	.word	0x20000cf8
 800536c:	20000ce0 	.word	0x20000ce0

08005370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800537e:	2b00      	cmp	r3, #0
 8005380:	d108      	bne.n	8005394 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	4618      	mov	r0, r3
 8005388:	f000 ff9e 	bl	80062c8 <vPortFree>
				vPortFree( pxTCB );
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 ff9b 	bl	80062c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005392:	e019      	b.n	80053c8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800539a:	2b01      	cmp	r3, #1
 800539c:	d103      	bne.n	80053a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 ff92 	bl	80062c8 <vPortFree>
	}
 80053a4:	e010      	b.n	80053c8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d00b      	beq.n	80053c8 <prvDeleteTCB+0x58>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	60fb      	str	r3, [r7, #12]
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	e7fd      	b.n	80053c4 <prvDeleteTCB+0x54>
	}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005408 <prvResetNextTaskUnblockTime+0x38>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d104      	bne.n	80053ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053e0:	4b0a      	ldr	r3, [pc, #40]	@ (800540c <prvResetNextTaskUnblockTime+0x3c>)
 80053e2:	f04f 32ff 	mov.w	r2, #4294967295
 80053e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053e8:	e008      	b.n	80053fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ea:	4b07      	ldr	r3, [pc, #28]	@ (8005408 <prvResetNextTaskUnblockTime+0x38>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	4a04      	ldr	r2, [pc, #16]	@ (800540c <prvResetNextTaskUnblockTime+0x3c>)
 80053fa:	6013      	str	r3, [r2, #0]
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	20000cb0 	.word	0x20000cb0
 800540c:	20000d18 	.word	0x20000d18

08005410 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005416:	4b0b      	ldr	r3, [pc, #44]	@ (8005444 <xTaskGetSchedulerState+0x34>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d102      	bne.n	8005424 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800541e:	2301      	movs	r3, #1
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	e008      	b.n	8005436 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005424:	4b08      	ldr	r3, [pc, #32]	@ (8005448 <xTaskGetSchedulerState+0x38>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800542c:	2302      	movs	r3, #2
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	e001      	b.n	8005436 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005432:	2300      	movs	r3, #0
 8005434:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005436:	687b      	ldr	r3, [r7, #4]
	}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	20000d04 	.word	0x20000d04
 8005448:	20000d20 	.word	0x20000d20

0800544c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d058      	beq.n	8005514 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005462:	4b2f      	ldr	r3, [pc, #188]	@ (8005520 <xTaskPriorityDisinherit+0xd4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	429a      	cmp	r2, r3
 800546a:	d00b      	beq.n	8005484 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	60fb      	str	r3, [r7, #12]
}
 800547e:	bf00      	nop
 8005480:	bf00      	nop
 8005482:	e7fd      	b.n	8005480 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10b      	bne.n	80054a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	60bb      	str	r3, [r7, #8]
}
 800549e:	bf00      	nop
 80054a0:	bf00      	nop
 80054a2:	e7fd      	b.n	80054a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054a8:	1e5a      	subs	r2, r3, #1
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d02c      	beq.n	8005514 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d128      	bne.n	8005514 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	3304      	adds	r3, #4
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fe fb96 	bl	8003bf8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005524 <xTaskPriorityDisinherit+0xd8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d903      	bls.n	80054f4 <xTaskPriorityDisinherit+0xa8>
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005524 <xTaskPriorityDisinherit+0xd8>)
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4a09      	ldr	r2, [pc, #36]	@ (8005528 <xTaskPriorityDisinherit+0xdc>)
 8005502:	441a      	add	r2, r3
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	3304      	adds	r3, #4
 8005508:	4619      	mov	r1, r3
 800550a:	4610      	mov	r0, r2
 800550c:	f7fe fb17 	bl	8003b3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005510:	2301      	movs	r3, #1
 8005512:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005514:	697b      	ldr	r3, [r7, #20]
	}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20000824 	.word	0x20000824
 8005524:	20000d00 	.word	0x20000d00
 8005528:	20000828 	.word	0x20000828

0800552c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005536:	4b21      	ldr	r3, [pc, #132]	@ (80055bc <prvAddCurrentTaskToDelayedList+0x90>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800553c:	4b20      	ldr	r3, [pc, #128]	@ (80055c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3304      	adds	r3, #4
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe fb58 	bl	8003bf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554e:	d10a      	bne.n	8005566 <prvAddCurrentTaskToDelayedList+0x3a>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005556:	4b1a      	ldr	r3, [pc, #104]	@ (80055c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3304      	adds	r3, #4
 800555c:	4619      	mov	r1, r3
 800555e:	4819      	ldr	r0, [pc, #100]	@ (80055c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005560:	f7fe faed 	bl	8003b3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005564:	e026      	b.n	80055b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4413      	add	r3, r2
 800556c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800556e:	4b14      	ldr	r3, [pc, #80]	@ (80055c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	429a      	cmp	r2, r3
 800557c:	d209      	bcs.n	8005592 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800557e:	4b12      	ldr	r3, [pc, #72]	@ (80055c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b0f      	ldr	r3, [pc, #60]	@ (80055c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3304      	adds	r3, #4
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f7fe fafb 	bl	8003b86 <vListInsert>
}
 8005590:	e010      	b.n	80055b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005592:	4b0e      	ldr	r3, [pc, #56]	@ (80055cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b0a      	ldr	r3, [pc, #40]	@ (80055c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3304      	adds	r3, #4
 800559c:	4619      	mov	r1, r3
 800559e:	4610      	mov	r0, r2
 80055a0:	f7fe faf1 	bl	8003b86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055a4:	4b0a      	ldr	r3, [pc, #40]	@ (80055d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d202      	bcs.n	80055b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80055ae:	4a08      	ldr	r2, [pc, #32]	@ (80055d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	6013      	str	r3, [r2, #0]
}
 80055b4:	bf00      	nop
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20000cfc 	.word	0x20000cfc
 80055c0:	20000824 	.word	0x20000824
 80055c4:	20000ce4 	.word	0x20000ce4
 80055c8:	20000cb4 	.word	0x20000cb4
 80055cc:	20000cb0 	.word	0x20000cb0
 80055d0:	20000d18 	.word	0x20000d18

080055d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	@ 0x28
 80055d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80055de:	f000 fb13 	bl	8005c08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80055e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005658 <xTimerCreateTimerTask+0x84>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d021      	beq.n	800562e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80055f2:	1d3a      	adds	r2, r7, #4
 80055f4:	f107 0108 	add.w	r1, r7, #8
 80055f8:	f107 030c 	add.w	r3, r7, #12
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe fa57 	bl	8003ab0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	9202      	str	r2, [sp, #8]
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	2302      	movs	r3, #2
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	2300      	movs	r3, #0
 8005612:	460a      	mov	r2, r1
 8005614:	4911      	ldr	r1, [pc, #68]	@ (800565c <xTimerCreateTimerTask+0x88>)
 8005616:	4812      	ldr	r0, [pc, #72]	@ (8005660 <xTimerCreateTimerTask+0x8c>)
 8005618:	f7ff f8d0 	bl	80047bc <xTaskCreateStatic>
 800561c:	4603      	mov	r3, r0
 800561e:	4a11      	ldr	r2, [pc, #68]	@ (8005664 <xTimerCreateTimerTask+0x90>)
 8005620:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005622:	4b10      	ldr	r3, [pc, #64]	@ (8005664 <xTimerCreateTimerTask+0x90>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800562a:	2301      	movs	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10b      	bne.n	800564c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	613b      	str	r3, [r7, #16]
}
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	e7fd      	b.n	8005648 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800564c:	697b      	ldr	r3, [r7, #20]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000d54 	.word	0x20000d54
 800565c:	080080ec 	.word	0x080080ec
 8005660:	080057a1 	.word	0x080057a1
 8005664:	20000d58 	.word	0x20000d58

08005668 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	@ 0x28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005676:	2300      	movs	r3, #0
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10b      	bne.n	8005698 <xTimerGenericCommand+0x30>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	623b      	str	r3, [r7, #32]
}
 8005692:	bf00      	nop
 8005694:	bf00      	nop
 8005696:	e7fd      	b.n	8005694 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005698:	4b19      	ldr	r3, [pc, #100]	@ (8005700 <xTimerGenericCommand+0x98>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d02a      	beq.n	80056f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	dc18      	bgt.n	80056e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80056b2:	f7ff fead 	bl	8005410 <xTaskGetSchedulerState>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d109      	bne.n	80056d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80056bc:	4b10      	ldr	r3, [pc, #64]	@ (8005700 <xTimerGenericCommand+0x98>)
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	f107 0110 	add.w	r1, r7, #16
 80056c4:	2300      	movs	r3, #0
 80056c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c8:	f7fe fc06 	bl	8003ed8 <xQueueGenericSend>
 80056cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80056ce:	e012      	b.n	80056f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80056d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <xTimerGenericCommand+0x98>)
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	f107 0110 	add.w	r1, r7, #16
 80056d8:	2300      	movs	r3, #0
 80056da:	2200      	movs	r2, #0
 80056dc:	f7fe fbfc 	bl	8003ed8 <xQueueGenericSend>
 80056e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80056e2:	e008      	b.n	80056f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80056e4:	4b06      	ldr	r3, [pc, #24]	@ (8005700 <xTimerGenericCommand+0x98>)
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	f107 0110 	add.w	r1, r7, #16
 80056ec:	2300      	movs	r3, #0
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	f7fe fcf4 	bl	80040dc <xQueueGenericSendFromISR>
 80056f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3728      	adds	r7, #40	@ 0x28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20000d54 	.word	0x20000d54

08005704 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af02      	add	r7, sp, #8
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800570e:	4b23      	ldr	r3, [pc, #140]	@ (800579c <prvProcessExpiredTimer+0x98>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	3304      	adds	r3, #4
 800571c:	4618      	mov	r0, r3
 800571e:	f7fe fa6b 	bl	8003bf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d023      	beq.n	8005778 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	18d1      	adds	r1, r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	6978      	ldr	r0, [r7, #20]
 800573e:	f000 f8d5 	bl	80058ec <prvInsertTimerInActiveList>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d020      	beq.n	800578a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005748:	2300      	movs	r3, #0
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	2300      	movs	r3, #0
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	2100      	movs	r1, #0
 8005752:	6978      	ldr	r0, [r7, #20]
 8005754:	f7ff ff88 	bl	8005668 <xTimerGenericCommand>
 8005758:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d114      	bne.n	800578a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	60fb      	str	r3, [r7, #12]
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	e7fd      	b.n	8005774 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	6978      	ldr	r0, [r7, #20]
 8005790:	4798      	blx	r3
}
 8005792:	bf00      	nop
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000d4c 	.word	0x20000d4c

080057a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057a8:	f107 0308 	add.w	r3, r7, #8
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 f859 	bl	8005864 <prvGetNextExpireTime>
 80057b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4619      	mov	r1, r3
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f805 	bl	80057c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80057be:	f000 f8d7 	bl	8005970 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057c2:	bf00      	nop
 80057c4:	e7f0      	b.n	80057a8 <prvTimerTask+0x8>
	...

080057c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80057d2:	f7ff fa37 	bl	8004c44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057d6:	f107 0308 	add.w	r3, r7, #8
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 f866 	bl	80058ac <prvSampleTimeNow>
 80057e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d130      	bne.n	800584a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <prvProcessTimerOrBlockTask+0x3c>
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d806      	bhi.n	8005804 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80057f6:	f7ff fa33 	bl	8004c60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80057fa:	68f9      	ldr	r1, [r7, #12]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff ff81 	bl	8005704 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005802:	e024      	b.n	800584e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800580a:	4b13      	ldr	r3, [pc, #76]	@ (8005858 <prvProcessTimerOrBlockTask+0x90>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <prvProcessTimerOrBlockTask+0x50>
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <prvProcessTimerOrBlockTask+0x52>
 8005818:	2300      	movs	r3, #0
 800581a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800581c:	4b0f      	ldr	r3, [pc, #60]	@ (800585c <prvProcessTimerOrBlockTask+0x94>)
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	4619      	mov	r1, r3
 800582a:	f7fe ff93 	bl	8004754 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800582e:	f7ff fa17 	bl	8004c60 <xTaskResumeAll>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005838:	4b09      	ldr	r3, [pc, #36]	@ (8005860 <prvProcessTimerOrBlockTask+0x98>)
 800583a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	f3bf 8f6f 	isb	sy
}
 8005848:	e001      	b.n	800584e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800584a:	f7ff fa09 	bl	8004c60 <xTaskResumeAll>
}
 800584e:	bf00      	nop
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000d50 	.word	0x20000d50
 800585c:	20000d54 	.word	0x20000d54
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800586c:	4b0e      	ldr	r3, [pc, #56]	@ (80058a8 <prvGetNextExpireTime+0x44>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <prvGetNextExpireTime+0x16>
 8005876:	2201      	movs	r2, #1
 8005878:	e000      	b.n	800587c <prvGetNextExpireTime+0x18>
 800587a:	2200      	movs	r2, #0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d105      	bne.n	8005894 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005888:	4b07      	ldr	r3, [pc, #28]	@ (80058a8 <prvGetNextExpireTime+0x44>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	e001      	b.n	8005898 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005898:	68fb      	ldr	r3, [r7, #12]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	20000d4c 	.word	0x20000d4c

080058ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80058b4:	f7ff fa72 	bl	8004d9c <xTaskGetTickCount>
 80058b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80058ba:	4b0b      	ldr	r3, [pc, #44]	@ (80058e8 <prvSampleTimeNow+0x3c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d205      	bcs.n	80058d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80058c4:	f000 f93a 	bl	8005b3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	e002      	b.n	80058d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80058d6:	4a04      	ldr	r2, [pc, #16]	@ (80058e8 <prvSampleTimeNow+0x3c>)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80058dc:	68fb      	ldr	r3, [r7, #12]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000d5c 	.word	0x20000d5c

080058ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	429a      	cmp	r2, r3
 8005910:	d812      	bhi.n	8005938 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	1ad2      	subs	r2, r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	429a      	cmp	r2, r3
 800591e:	d302      	bcc.n	8005926 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	e01b      	b.n	800595e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005926:	4b10      	ldr	r3, [pc, #64]	@ (8005968 <prvInsertTimerInActiveList+0x7c>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3304      	adds	r3, #4
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f7fe f928 	bl	8003b86 <vListInsert>
 8005936:	e012      	b.n	800595e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d206      	bcs.n	800594e <prvInsertTimerInActiveList+0x62>
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d302      	bcc.n	800594e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005948:	2301      	movs	r3, #1
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	e007      	b.n	800595e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800594e:	4b07      	ldr	r3, [pc, #28]	@ (800596c <prvInsertTimerInActiveList+0x80>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3304      	adds	r3, #4
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f7fe f914 	bl	8003b86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800595e:	697b      	ldr	r3, [r7, #20]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000d50 	.word	0x20000d50
 800596c:	20000d4c 	.word	0x20000d4c

08005970 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08e      	sub	sp, #56	@ 0x38
 8005974:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005976:	e0ce      	b.n	8005b16 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	da19      	bge.n	80059b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800597e:	1d3b      	adds	r3, r7, #4
 8005980:	3304      	adds	r3, #4
 8005982:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10b      	bne.n	80059a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	61fb      	str	r3, [r7, #28]
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	e7fd      	b.n	800599e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80059a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059a8:	6850      	ldr	r0, [r2, #4]
 80059aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059ac:	6892      	ldr	r2, [r2, #8]
 80059ae:	4611      	mov	r1, r2
 80059b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f2c0 80ae 	blt.w	8005b16 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80059be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d004      	beq.n	80059d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c8:	3304      	adds	r3, #4
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe f914 	bl	8003bf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059d0:	463b      	mov	r3, r7
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff ff6a 	bl	80058ac <prvSampleTimeNow>
 80059d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b09      	cmp	r3, #9
 80059de:	f200 8097 	bhi.w	8005b10 <prvProcessReceivedCommands+0x1a0>
 80059e2:	a201      	add	r2, pc, #4	@ (adr r2, 80059e8 <prvProcessReceivedCommands+0x78>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a11 	.word	0x08005a11
 80059ec:	08005a11 	.word	0x08005a11
 80059f0:	08005a11 	.word	0x08005a11
 80059f4:	08005a87 	.word	0x08005a87
 80059f8:	08005a9b 	.word	0x08005a9b
 80059fc:	08005ae7 	.word	0x08005ae7
 8005a00:	08005a11 	.word	0x08005a11
 8005a04:	08005a11 	.word	0x08005a11
 8005a08:	08005a87 	.word	0x08005a87
 8005a0c:	08005a9b 	.word	0x08005a9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a16:	f043 0301 	orr.w	r3, r3, #1
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	18d1      	adds	r1, r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a30:	f7ff ff5c 	bl	80058ec <prvInsertTimerInActiveList>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d06c      	beq.n	8005b14 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d061      	beq.n	8005b14 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	441a      	add	r2, r3
 8005a58:	2300      	movs	r3, #0
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	2100      	movs	r1, #0
 8005a60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a62:	f7ff fe01 	bl	8005668 <xTimerGenericCommand>
 8005a66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d152      	bne.n	8005b14 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	61bb      	str	r3, [r7, #24]
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	e7fd      	b.n	8005a82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a98:	e03d      	b.n	8005b16 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005aa0:	f043 0301 	orr.w	r3, r3, #1
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10b      	bne.n	8005ad2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	617b      	str	r3, [r7, #20]
}
 8005acc:	bf00      	nop
 8005ace:	bf00      	nop
 8005ad0:	e7fd      	b.n	8005ace <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	18d1      	adds	r1, r2, r3
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ae0:	f7ff ff04 	bl	80058ec <prvInsertTimerInActiveList>
					break;
 8005ae4:	e017      	b.n	8005b16 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d103      	bne.n	8005afc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005af4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005af6:	f000 fbe7 	bl	80062c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005afa:	e00c      	b.n	8005b16 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b02:	f023 0301 	bic.w	r3, r3, #1
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b0e:	e002      	b.n	8005b16 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005b10:	bf00      	nop
 8005b12:	e000      	b.n	8005b16 <prvProcessReceivedCommands+0x1a6>
					break;
 8005b14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b16:	4b08      	ldr	r3, [pc, #32]	@ (8005b38 <prvProcessReceivedCommands+0x1c8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	1d39      	adds	r1, r7, #4
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe fb7a 	bl	8004218 <xQueueReceive>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f47f af26 	bne.w	8005978 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	3730      	adds	r7, #48	@ 0x30
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000d54 	.word	0x20000d54

08005b3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b42:	e049      	b.n	8005bd8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b44:	4b2e      	ldr	r3, [pc, #184]	@ (8005c00 <prvSwitchTimerLists+0xc4>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8005c00 <prvSwitchTimerLists+0xc4>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe f84b 	bl	8003bf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d02f      	beq.n	8005bd8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4413      	add	r3, r2
 8005b80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d90e      	bls.n	8005ba8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b96:	4b1a      	ldr	r3, [pc, #104]	@ (8005c00 <prvSwitchTimerLists+0xc4>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	f7fd fff0 	bl	8003b86 <vListInsert>
 8005ba6:	e017      	b.n	8005bd8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	2300      	movs	r3, #0
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7ff fd58 	bl	8005668 <xTimerGenericCommand>
 8005bb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10b      	bne.n	8005bd8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	603b      	str	r3, [r7, #0]
}
 8005bd2:	bf00      	nop
 8005bd4:	bf00      	nop
 8005bd6:	e7fd      	b.n	8005bd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bd8:	4b09      	ldr	r3, [pc, #36]	@ (8005c00 <prvSwitchTimerLists+0xc4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1b0      	bne.n	8005b44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005be2:	4b07      	ldr	r3, [pc, #28]	@ (8005c00 <prvSwitchTimerLists+0xc4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005be8:	4b06      	ldr	r3, [pc, #24]	@ (8005c04 <prvSwitchTimerLists+0xc8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a04      	ldr	r2, [pc, #16]	@ (8005c00 <prvSwitchTimerLists+0xc4>)
 8005bee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005bf0:	4a04      	ldr	r2, [pc, #16]	@ (8005c04 <prvSwitchTimerLists+0xc8>)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	6013      	str	r3, [r2, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000d4c 	.word	0x20000d4c
 8005c04:	20000d50 	.word	0x20000d50

08005c08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c0e:	f000 f96b 	bl	8005ee8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c12:	4b15      	ldr	r3, [pc, #84]	@ (8005c68 <prvCheckForValidListAndQueue+0x60>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d120      	bne.n	8005c5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c1a:	4814      	ldr	r0, [pc, #80]	@ (8005c6c <prvCheckForValidListAndQueue+0x64>)
 8005c1c:	f7fd ff62 	bl	8003ae4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c20:	4813      	ldr	r0, [pc, #76]	@ (8005c70 <prvCheckForValidListAndQueue+0x68>)
 8005c22:	f7fd ff5f 	bl	8003ae4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c26:	4b13      	ldr	r3, [pc, #76]	@ (8005c74 <prvCheckForValidListAndQueue+0x6c>)
 8005c28:	4a10      	ldr	r2, [pc, #64]	@ (8005c6c <prvCheckForValidListAndQueue+0x64>)
 8005c2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c2c:	4b12      	ldr	r3, [pc, #72]	@ (8005c78 <prvCheckForValidListAndQueue+0x70>)
 8005c2e:	4a10      	ldr	r2, [pc, #64]	@ (8005c70 <prvCheckForValidListAndQueue+0x68>)
 8005c30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c32:	2300      	movs	r3, #0
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	4b11      	ldr	r3, [pc, #68]	@ (8005c7c <prvCheckForValidListAndQueue+0x74>)
 8005c38:	4a11      	ldr	r2, [pc, #68]	@ (8005c80 <prvCheckForValidListAndQueue+0x78>)
 8005c3a:	2110      	movs	r1, #16
 8005c3c:	200a      	movs	r0, #10
 8005c3e:	f7fe f86f 	bl	8003d20 <xQueueGenericCreateStatic>
 8005c42:	4603      	mov	r3, r0
 8005c44:	4a08      	ldr	r2, [pc, #32]	@ (8005c68 <prvCheckForValidListAndQueue+0x60>)
 8005c46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c48:	4b07      	ldr	r3, [pc, #28]	@ (8005c68 <prvCheckForValidListAndQueue+0x60>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c50:	4b05      	ldr	r3, [pc, #20]	@ (8005c68 <prvCheckForValidListAndQueue+0x60>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	490b      	ldr	r1, [pc, #44]	@ (8005c84 <prvCheckForValidListAndQueue+0x7c>)
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe fd52 	bl	8004700 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c5c:	f000 f976 	bl	8005f4c <vPortExitCritical>
}
 8005c60:	bf00      	nop
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20000d54 	.word	0x20000d54
 8005c6c:	20000d24 	.word	0x20000d24
 8005c70:	20000d38 	.word	0x20000d38
 8005c74:	20000d4c 	.word	0x20000d4c
 8005c78:	20000d50 	.word	0x20000d50
 8005c7c:	20000e00 	.word	0x20000e00
 8005c80:	20000d60 	.word	0x20000d60
 8005c84:	080080f4 	.word	0x080080f4

08005c88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3b04      	subs	r3, #4
 8005c98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f023 0201 	bic.w	r2, r3, #1
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3b04      	subs	r3, #4
 8005cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8005cec <pxPortInitialiseStack+0x64>)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3b14      	subs	r3, #20
 8005cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3b04      	subs	r3, #4
 8005cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f06f 0202 	mvn.w	r2, #2
 8005cd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3b20      	subs	r3, #32
 8005cdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cde:	68fb      	ldr	r3, [r7, #12]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	08005cf1 	.word	0x08005cf1

08005cf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cfa:	4b13      	ldr	r3, [pc, #76]	@ (8005d48 <prvTaskExitError+0x58>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d00b      	beq.n	8005d1c <prvTaskExitError+0x2c>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	60fb      	str	r3, [r7, #12]
}
 8005d16:	bf00      	nop
 8005d18:	bf00      	nop
 8005d1a:	e7fd      	b.n	8005d18 <prvTaskExitError+0x28>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	60bb      	str	r3, [r7, #8]
}
 8005d2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d30:	bf00      	nop
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0fc      	beq.n	8005d32 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	2000000c 	.word	0x2000000c
 8005d4c:	00000000 	.word	0x00000000

08005d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d50:	4b07      	ldr	r3, [pc, #28]	@ (8005d70 <pxCurrentTCBConst2>)
 8005d52:	6819      	ldr	r1, [r3, #0]
 8005d54:	6808      	ldr	r0, [r1, #0]
 8005d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	f380 8809 	msr	PSP, r0
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f04f 0000 	mov.w	r0, #0
 8005d66:	f380 8811 	msr	BASEPRI, r0
 8005d6a:	4770      	bx	lr
 8005d6c:	f3af 8000 	nop.w

08005d70 <pxCurrentTCBConst2>:
 8005d70:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop

08005d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d78:	4808      	ldr	r0, [pc, #32]	@ (8005d9c <prvPortStartFirstTask+0x24>)
 8005d7a:	6800      	ldr	r0, [r0, #0]
 8005d7c:	6800      	ldr	r0, [r0, #0]
 8005d7e:	f380 8808 	msr	MSP, r0
 8005d82:	f04f 0000 	mov.w	r0, #0
 8005d86:	f380 8814 	msr	CONTROL, r0
 8005d8a:	b662      	cpsie	i
 8005d8c:	b661      	cpsie	f
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	df00      	svc	0
 8005d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d9a:	bf00      	nop
 8005d9c:	e000ed08 	.word	0xe000ed08

08005da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005da6:	4b47      	ldr	r3, [pc, #284]	@ (8005ec4 <xPortStartScheduler+0x124>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a47      	ldr	r2, [pc, #284]	@ (8005ec8 <xPortStartScheduler+0x128>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10b      	bne.n	8005dc8 <xPortStartScheduler+0x28>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	613b      	str	r3, [r7, #16]
}
 8005dc2:	bf00      	nop
 8005dc4:	bf00      	nop
 8005dc6:	e7fd      	b.n	8005dc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ec4 <xPortStartScheduler+0x124>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a3f      	ldr	r2, [pc, #252]	@ (8005ecc <xPortStartScheduler+0x12c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d10b      	bne.n	8005dea <xPortStartScheduler+0x4a>
	__asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	60fb      	str	r3, [r7, #12]
}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop
 8005de8:	e7fd      	b.n	8005de6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005dea:	4b39      	ldr	r3, [pc, #228]	@ (8005ed0 <xPortStartScheduler+0x130>)
 8005dec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	22ff      	movs	r2, #255	@ 0xff
 8005dfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	4b31      	ldr	r3, [pc, #196]	@ (8005ed4 <xPortStartScheduler+0x134>)
 8005e10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e12:	4b31      	ldr	r3, [pc, #196]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e14:	2207      	movs	r2, #7
 8005e16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e18:	e009      	b.n	8005e2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e36:	2b80      	cmp	r3, #128	@ 0x80
 8005e38:	d0ef      	beq.n	8005e1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e3a:	4b27      	ldr	r3, [pc, #156]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f1c3 0307 	rsb	r3, r3, #7
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d00b      	beq.n	8005e5e <xPortStartScheduler+0xbe>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	60bb      	str	r3, [r7, #8]
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	e7fd      	b.n	8005e5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e68:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e70:	4a19      	ldr	r2, [pc, #100]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e7c:	4b17      	ldr	r3, [pc, #92]	@ (8005edc <xPortStartScheduler+0x13c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a16      	ldr	r2, [pc, #88]	@ (8005edc <xPortStartScheduler+0x13c>)
 8005e82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e88:	4b14      	ldr	r3, [pc, #80]	@ (8005edc <xPortStartScheduler+0x13c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a13      	ldr	r2, [pc, #76]	@ (8005edc <xPortStartScheduler+0x13c>)
 8005e8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005e92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e94:	f000 f8da 	bl	800604c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e98:	4b11      	ldr	r3, [pc, #68]	@ (8005ee0 <xPortStartScheduler+0x140>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e9e:	f000 f8f9 	bl	8006094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ea2:	4b10      	ldr	r3, [pc, #64]	@ (8005ee4 <xPortStartScheduler+0x144>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8005ee4 <xPortStartScheduler+0x144>)
 8005ea8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005eac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005eae:	f7ff ff63 	bl	8005d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005eb2:	f7ff f83d 	bl	8004f30 <vTaskSwitchContext>
	prvTaskExitError();
 8005eb6:	f7ff ff1b 	bl	8005cf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	e000ed00 	.word	0xe000ed00
 8005ec8:	410fc271 	.word	0x410fc271
 8005ecc:	410fc270 	.word	0x410fc270
 8005ed0:	e000e400 	.word	0xe000e400
 8005ed4:	20000e50 	.word	0x20000e50
 8005ed8:	20000e54 	.word	0x20000e54
 8005edc:	e000ed20 	.word	0xe000ed20
 8005ee0:	2000000c 	.word	0x2000000c
 8005ee4:	e000ef34 	.word	0xe000ef34

08005ee8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	607b      	str	r3, [r7, #4]
}
 8005f00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f02:	4b10      	ldr	r3, [pc, #64]	@ (8005f44 <vPortEnterCritical+0x5c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	4a0e      	ldr	r2, [pc, #56]	@ (8005f44 <vPortEnterCritical+0x5c>)
 8005f0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f44 <vPortEnterCritical+0x5c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d110      	bne.n	8005f36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f14:	4b0c      	ldr	r3, [pc, #48]	@ (8005f48 <vPortEnterCritical+0x60>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00b      	beq.n	8005f36 <vPortEnterCritical+0x4e>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	603b      	str	r3, [r7, #0]
}
 8005f30:	bf00      	nop
 8005f32:	bf00      	nop
 8005f34:	e7fd      	b.n	8005f32 <vPortEnterCritical+0x4a>
	}
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	2000000c 	.word	0x2000000c
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f52:	4b12      	ldr	r3, [pc, #72]	@ (8005f9c <vPortExitCritical+0x50>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10b      	bne.n	8005f72 <vPortExitCritical+0x26>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	607b      	str	r3, [r7, #4]
}
 8005f6c:	bf00      	nop
 8005f6e:	bf00      	nop
 8005f70:	e7fd      	b.n	8005f6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f72:	4b0a      	ldr	r3, [pc, #40]	@ (8005f9c <vPortExitCritical+0x50>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	4a08      	ldr	r2, [pc, #32]	@ (8005f9c <vPortExitCritical+0x50>)
 8005f7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f7c:	4b07      	ldr	r3, [pc, #28]	@ (8005f9c <vPortExitCritical+0x50>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d105      	bne.n	8005f90 <vPortExitCritical+0x44>
 8005f84:	2300      	movs	r3, #0
 8005f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f383 8811 	msr	BASEPRI, r3
}
 8005f8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	2000000c 	.word	0x2000000c

08005fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fa0:	f3ef 8009 	mrs	r0, PSP
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	4b15      	ldr	r3, [pc, #84]	@ (8006000 <pxCurrentTCBConst>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	f01e 0f10 	tst.w	lr, #16
 8005fb0:	bf08      	it	eq
 8005fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fba:	6010      	str	r0, [r2, #0]
 8005fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005fc4:	f380 8811 	msr	BASEPRI, r0
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f7fe ffae 	bl	8004f30 <vTaskSwitchContext>
 8005fd4:	f04f 0000 	mov.w	r0, #0
 8005fd8:	f380 8811 	msr	BASEPRI, r0
 8005fdc:	bc09      	pop	{r0, r3}
 8005fde:	6819      	ldr	r1, [r3, #0]
 8005fe0:	6808      	ldr	r0, [r1, #0]
 8005fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe6:	f01e 0f10 	tst.w	lr, #16
 8005fea:	bf08      	it	eq
 8005fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ff0:	f380 8809 	msr	PSP, r0
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	f3af 8000 	nop.w

08006000 <pxCurrentTCBConst>:
 8006000:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop

08006008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	607b      	str	r3, [r7, #4]
}
 8006020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006022:	f7fe fecb 	bl	8004dbc <xTaskIncrementTick>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800602c:	4b06      	ldr	r3, [pc, #24]	@ (8006048 <xPortSysTickHandler+0x40>)
 800602e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	2300      	movs	r3, #0
 8006036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	f383 8811 	msr	BASEPRI, r3
}
 800603e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006050:	4b0b      	ldr	r3, [pc, #44]	@ (8006080 <vPortSetupTimerInterrupt+0x34>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006056:	4b0b      	ldr	r3, [pc, #44]	@ (8006084 <vPortSetupTimerInterrupt+0x38>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800605c:	4b0a      	ldr	r3, [pc, #40]	@ (8006088 <vPortSetupTimerInterrupt+0x3c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a0a      	ldr	r2, [pc, #40]	@ (800608c <vPortSetupTimerInterrupt+0x40>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	099b      	lsrs	r3, r3, #6
 8006068:	4a09      	ldr	r2, [pc, #36]	@ (8006090 <vPortSetupTimerInterrupt+0x44>)
 800606a:	3b01      	subs	r3, #1
 800606c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800606e:	4b04      	ldr	r3, [pc, #16]	@ (8006080 <vPortSetupTimerInterrupt+0x34>)
 8006070:	2207      	movs	r2, #7
 8006072:	601a      	str	r2, [r3, #0]
}
 8006074:	bf00      	nop
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	e000e010 	.word	0xe000e010
 8006084:	e000e018 	.word	0xe000e018
 8006088:	20000000 	.word	0x20000000
 800608c:	10624dd3 	.word	0x10624dd3
 8006090:	e000e014 	.word	0xe000e014

08006094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006094:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80060a4 <vPortEnableVFP+0x10>
 8006098:	6801      	ldr	r1, [r0, #0]
 800609a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800609e:	6001      	str	r1, [r0, #0]
 80060a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060a2:	bf00      	nop
 80060a4:	e000ed88 	.word	0xe000ed88

080060a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ae:	f3ef 8305 	mrs	r3, IPSR
 80060b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b0f      	cmp	r3, #15
 80060b8:	d915      	bls.n	80060e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060ba:	4a18      	ldr	r2, [pc, #96]	@ (800611c <vPortValidateInterruptPriority+0x74>)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060c4:	4b16      	ldr	r3, [pc, #88]	@ (8006120 <vPortValidateInterruptPriority+0x78>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	7afa      	ldrb	r2, [r7, #11]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d20b      	bcs.n	80060e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	607b      	str	r3, [r7, #4]
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	e7fd      	b.n	80060e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80060e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006124 <vPortValidateInterruptPriority+0x7c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80060ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006128 <vPortValidateInterruptPriority+0x80>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d90b      	bls.n	800610e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	603b      	str	r3, [r7, #0]
}
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	e7fd      	b.n	800610a <vPortValidateInterruptPriority+0x62>
	}
 800610e:	bf00      	nop
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	e000e3f0 	.word	0xe000e3f0
 8006120:	20000e50 	.word	0x20000e50
 8006124:	e000ed0c 	.word	0xe000ed0c
 8006128:	20000e54 	.word	0x20000e54

0800612c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	@ 0x28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006138:	f7fe fd84 	bl	8004c44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800613c:	4b5c      	ldr	r3, [pc, #368]	@ (80062b0 <pvPortMalloc+0x184>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006144:	f000 f924 	bl	8006390 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006148:	4b5a      	ldr	r3, [pc, #360]	@ (80062b4 <pvPortMalloc+0x188>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	f040 8095 	bne.w	8006280 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01e      	beq.n	800619a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800615c:	2208      	movs	r2, #8
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	2b00      	cmp	r3, #0
 800616c:	d015      	beq.n	800619a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f023 0307 	bic.w	r3, r3, #7
 8006174:	3308      	adds	r3, #8
 8006176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <pvPortMalloc+0x6e>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	617b      	str	r3, [r7, #20]
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	e7fd      	b.n	8006196 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d06f      	beq.n	8006280 <pvPortMalloc+0x154>
 80061a0:	4b45      	ldr	r3, [pc, #276]	@ (80062b8 <pvPortMalloc+0x18c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d86a      	bhi.n	8006280 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061aa:	4b44      	ldr	r3, [pc, #272]	@ (80062bc <pvPortMalloc+0x190>)
 80061ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061ae:	4b43      	ldr	r3, [pc, #268]	@ (80062bc <pvPortMalloc+0x190>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061b4:	e004      	b.n	80061c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d903      	bls.n	80061d2 <pvPortMalloc+0xa6>
 80061ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f1      	bne.n	80061b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061d2:	4b37      	ldr	r3, [pc, #220]	@ (80062b0 <pvPortMalloc+0x184>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d8:	429a      	cmp	r2, r3
 80061da:	d051      	beq.n	8006280 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2208      	movs	r2, #8
 80061e2:	4413      	add	r3, r2
 80061e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	1ad2      	subs	r2, r2, r3
 80061f6:	2308      	movs	r3, #8
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d920      	bls.n	8006240 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4413      	add	r3, r2
 8006204:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00b      	beq.n	8006228 <pvPortMalloc+0xfc>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	613b      	str	r3, [r7, #16]
}
 8006222:	bf00      	nop
 8006224:	bf00      	nop
 8006226:	e7fd      	b.n	8006224 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800623a:	69b8      	ldr	r0, [r7, #24]
 800623c:	f000 f90a 	bl	8006454 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006240:	4b1d      	ldr	r3, [pc, #116]	@ (80062b8 <pvPortMalloc+0x18c>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	4a1b      	ldr	r2, [pc, #108]	@ (80062b8 <pvPortMalloc+0x18c>)
 800624c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800624e:	4b1a      	ldr	r3, [pc, #104]	@ (80062b8 <pvPortMalloc+0x18c>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b1b      	ldr	r3, [pc, #108]	@ (80062c0 <pvPortMalloc+0x194>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d203      	bcs.n	8006262 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800625a:	4b17      	ldr	r3, [pc, #92]	@ (80062b8 <pvPortMalloc+0x18c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a18      	ldr	r2, [pc, #96]	@ (80062c0 <pvPortMalloc+0x194>)
 8006260:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	4b13      	ldr	r3, [pc, #76]	@ (80062b4 <pvPortMalloc+0x188>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	431a      	orrs	r2, r3
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006276:	4b13      	ldr	r3, [pc, #76]	@ (80062c4 <pvPortMalloc+0x198>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3301      	adds	r3, #1
 800627c:	4a11      	ldr	r2, [pc, #68]	@ (80062c4 <pvPortMalloc+0x198>)
 800627e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006280:	f7fe fcee 	bl	8004c60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <pvPortMalloc+0x17a>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	60fb      	str	r3, [r7, #12]
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	e7fd      	b.n	80062a2 <pvPortMalloc+0x176>
	return pvReturn;
 80062a6:	69fb      	ldr	r3, [r7, #28]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3728      	adds	r7, #40	@ 0x28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	20001a18 	.word	0x20001a18
 80062b4:	20001a2c 	.word	0x20001a2c
 80062b8:	20001a1c 	.word	0x20001a1c
 80062bc:	20001a10 	.word	0x20001a10
 80062c0:	20001a20 	.word	0x20001a20
 80062c4:	20001a24 	.word	0x20001a24

080062c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d04f      	beq.n	800637a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062da:	2308      	movs	r3, #8
 80062dc:	425b      	negs	r3, r3
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4413      	add	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	4b25      	ldr	r3, [pc, #148]	@ (8006384 <vPortFree+0xbc>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4013      	ands	r3, r2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10b      	bne.n	800630e <vPortFree+0x46>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	60fb      	str	r3, [r7, #12]
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	e7fd      	b.n	800630a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00b      	beq.n	800632e <vPortFree+0x66>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	60bb      	str	r3, [r7, #8]
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	e7fd      	b.n	800632a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	4b14      	ldr	r3, [pc, #80]	@ (8006384 <vPortFree+0xbc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4013      	ands	r3, r2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01e      	beq.n	800637a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d11a      	bne.n	800637a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	4b0e      	ldr	r3, [pc, #56]	@ (8006384 <vPortFree+0xbc>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	43db      	mvns	r3, r3
 800634e:	401a      	ands	r2, r3
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006354:	f7fe fc76 	bl	8004c44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	4b0a      	ldr	r3, [pc, #40]	@ (8006388 <vPortFree+0xc0>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4413      	add	r3, r2
 8006362:	4a09      	ldr	r2, [pc, #36]	@ (8006388 <vPortFree+0xc0>)
 8006364:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006366:	6938      	ldr	r0, [r7, #16]
 8006368:	f000 f874 	bl	8006454 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800636c:	4b07      	ldr	r3, [pc, #28]	@ (800638c <vPortFree+0xc4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	4a06      	ldr	r2, [pc, #24]	@ (800638c <vPortFree+0xc4>)
 8006374:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006376:	f7fe fc73 	bl	8004c60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800637a:	bf00      	nop
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20001a2c 	.word	0x20001a2c
 8006388:	20001a1c 	.word	0x20001a1c
 800638c:	20001a28 	.word	0x20001a28

08006390 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006396:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800639a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800639c:	4b27      	ldr	r3, [pc, #156]	@ (800643c <prvHeapInit+0xac>)
 800639e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00c      	beq.n	80063c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3307      	adds	r3, #7
 80063ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0307 	bic.w	r3, r3, #7
 80063b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	4a1f      	ldr	r2, [pc, #124]	@ (800643c <prvHeapInit+0xac>)
 80063c0:	4413      	add	r3, r2
 80063c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006440 <prvHeapInit+0xb0>)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006440 <prvHeapInit+0xb0>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	4413      	add	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063dc:	2208      	movs	r2, #8
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	1a9b      	subs	r3, r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0307 	bic.w	r3, r3, #7
 80063ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4a15      	ldr	r2, [pc, #84]	@ (8006444 <prvHeapInit+0xb4>)
 80063f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063f2:	4b14      	ldr	r3, [pc, #80]	@ (8006444 <prvHeapInit+0xb4>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2200      	movs	r2, #0
 80063f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063fa:	4b12      	ldr	r3, [pc, #72]	@ (8006444 <prvHeapInit+0xb4>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	1ad2      	subs	r2, r2, r3
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006410:	4b0c      	ldr	r3, [pc, #48]	@ (8006444 <prvHeapInit+0xb4>)
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	4a0a      	ldr	r2, [pc, #40]	@ (8006448 <prvHeapInit+0xb8>)
 800641e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	4a09      	ldr	r2, [pc, #36]	@ (800644c <prvHeapInit+0xbc>)
 8006426:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006428:	4b09      	ldr	r3, [pc, #36]	@ (8006450 <prvHeapInit+0xc0>)
 800642a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800642e:	601a      	str	r2, [r3, #0]
}
 8006430:	bf00      	nop
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	20000e58 	.word	0x20000e58
 8006440:	20001a10 	.word	0x20001a10
 8006444:	20001a18 	.word	0x20001a18
 8006448:	20001a20 	.word	0x20001a20
 800644c:	20001a1c 	.word	0x20001a1c
 8006450:	20001a2c 	.word	0x20001a2c

08006454 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800645c:	4b28      	ldr	r3, [pc, #160]	@ (8006500 <prvInsertBlockIntoFreeList+0xac>)
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	e002      	b.n	8006468 <prvInsertBlockIntoFreeList+0x14>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	429a      	cmp	r2, r3
 8006470:	d8f7      	bhi.n	8006462 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	4413      	add	r3, r2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d108      	bne.n	8006496 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	441a      	add	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	441a      	add	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d118      	bne.n	80064dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	4b15      	ldr	r3, [pc, #84]	@ (8006504 <prvInsertBlockIntoFreeList+0xb0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d00d      	beq.n	80064d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	441a      	add	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	e008      	b.n	80064e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006504 <prvInsertBlockIntoFreeList+0xb0>)
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	e003      	b.n	80064e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d002      	beq.n	80064f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20001a10 	.word	0x20001a10
 8006504:	20001a18 	.word	0x20001a18

08006508 <__sflush_r>:
 8006508:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800650c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006510:	0716      	lsls	r6, r2, #28
 8006512:	4605      	mov	r5, r0
 8006514:	460c      	mov	r4, r1
 8006516:	d454      	bmi.n	80065c2 <__sflush_r+0xba>
 8006518:	684b      	ldr	r3, [r1, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	dc02      	bgt.n	8006524 <__sflush_r+0x1c>
 800651e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	dd48      	ble.n	80065b6 <__sflush_r+0xae>
 8006524:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006526:	2e00      	cmp	r6, #0
 8006528:	d045      	beq.n	80065b6 <__sflush_r+0xae>
 800652a:	2300      	movs	r3, #0
 800652c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006530:	682f      	ldr	r7, [r5, #0]
 8006532:	6a21      	ldr	r1, [r4, #32]
 8006534:	602b      	str	r3, [r5, #0]
 8006536:	d030      	beq.n	800659a <__sflush_r+0x92>
 8006538:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	0759      	lsls	r1, r3, #29
 800653e:	d505      	bpl.n	800654c <__sflush_r+0x44>
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	1ad2      	subs	r2, r2, r3
 8006544:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006546:	b10b      	cbz	r3, 800654c <__sflush_r+0x44>
 8006548:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800654a:	1ad2      	subs	r2, r2, r3
 800654c:	2300      	movs	r3, #0
 800654e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006550:	6a21      	ldr	r1, [r4, #32]
 8006552:	4628      	mov	r0, r5
 8006554:	47b0      	blx	r6
 8006556:	1c43      	adds	r3, r0, #1
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	d106      	bne.n	800656a <__sflush_r+0x62>
 800655c:	6829      	ldr	r1, [r5, #0]
 800655e:	291d      	cmp	r1, #29
 8006560:	d82b      	bhi.n	80065ba <__sflush_r+0xb2>
 8006562:	4a2a      	ldr	r2, [pc, #168]	@ (800660c <__sflush_r+0x104>)
 8006564:	410a      	asrs	r2, r1
 8006566:	07d6      	lsls	r6, r2, #31
 8006568:	d427      	bmi.n	80065ba <__sflush_r+0xb2>
 800656a:	2200      	movs	r2, #0
 800656c:	6062      	str	r2, [r4, #4]
 800656e:	04d9      	lsls	r1, r3, #19
 8006570:	6922      	ldr	r2, [r4, #16]
 8006572:	6022      	str	r2, [r4, #0]
 8006574:	d504      	bpl.n	8006580 <__sflush_r+0x78>
 8006576:	1c42      	adds	r2, r0, #1
 8006578:	d101      	bne.n	800657e <__sflush_r+0x76>
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	b903      	cbnz	r3, 8006580 <__sflush_r+0x78>
 800657e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006582:	602f      	str	r7, [r5, #0]
 8006584:	b1b9      	cbz	r1, 80065b6 <__sflush_r+0xae>
 8006586:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800658a:	4299      	cmp	r1, r3
 800658c:	d002      	beq.n	8006594 <__sflush_r+0x8c>
 800658e:	4628      	mov	r0, r5
 8006590:	f000 fae2 	bl	8006b58 <_free_r>
 8006594:	2300      	movs	r3, #0
 8006596:	6363      	str	r3, [r4, #52]	@ 0x34
 8006598:	e00d      	b.n	80065b6 <__sflush_r+0xae>
 800659a:	2301      	movs	r3, #1
 800659c:	4628      	mov	r0, r5
 800659e:	47b0      	blx	r6
 80065a0:	4602      	mov	r2, r0
 80065a2:	1c50      	adds	r0, r2, #1
 80065a4:	d1c9      	bne.n	800653a <__sflush_r+0x32>
 80065a6:	682b      	ldr	r3, [r5, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0c6      	beq.n	800653a <__sflush_r+0x32>
 80065ac:	2b1d      	cmp	r3, #29
 80065ae:	d001      	beq.n	80065b4 <__sflush_r+0xac>
 80065b0:	2b16      	cmp	r3, #22
 80065b2:	d11e      	bne.n	80065f2 <__sflush_r+0xea>
 80065b4:	602f      	str	r7, [r5, #0]
 80065b6:	2000      	movs	r0, #0
 80065b8:	e022      	b.n	8006600 <__sflush_r+0xf8>
 80065ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065be:	b21b      	sxth	r3, r3
 80065c0:	e01b      	b.n	80065fa <__sflush_r+0xf2>
 80065c2:	690f      	ldr	r7, [r1, #16]
 80065c4:	2f00      	cmp	r7, #0
 80065c6:	d0f6      	beq.n	80065b6 <__sflush_r+0xae>
 80065c8:	0793      	lsls	r3, r2, #30
 80065ca:	680e      	ldr	r6, [r1, #0]
 80065cc:	bf08      	it	eq
 80065ce:	694b      	ldreq	r3, [r1, #20]
 80065d0:	600f      	str	r7, [r1, #0]
 80065d2:	bf18      	it	ne
 80065d4:	2300      	movne	r3, #0
 80065d6:	eba6 0807 	sub.w	r8, r6, r7
 80065da:	608b      	str	r3, [r1, #8]
 80065dc:	f1b8 0f00 	cmp.w	r8, #0
 80065e0:	dde9      	ble.n	80065b6 <__sflush_r+0xae>
 80065e2:	6a21      	ldr	r1, [r4, #32]
 80065e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065e6:	4643      	mov	r3, r8
 80065e8:	463a      	mov	r2, r7
 80065ea:	4628      	mov	r0, r5
 80065ec:	47b0      	blx	r6
 80065ee:	2800      	cmp	r0, #0
 80065f0:	dc08      	bgt.n	8006604 <__sflush_r+0xfc>
 80065f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006604:	4407      	add	r7, r0
 8006606:	eba8 0800 	sub.w	r8, r8, r0
 800660a:	e7e7      	b.n	80065dc <__sflush_r+0xd4>
 800660c:	dfbffffe 	.word	0xdfbffffe

08006610 <_fflush_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	690b      	ldr	r3, [r1, #16]
 8006614:	4605      	mov	r5, r0
 8006616:	460c      	mov	r4, r1
 8006618:	b913      	cbnz	r3, 8006620 <_fflush_r+0x10>
 800661a:	2500      	movs	r5, #0
 800661c:	4628      	mov	r0, r5
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	b118      	cbz	r0, 800662a <_fflush_r+0x1a>
 8006622:	6a03      	ldr	r3, [r0, #32]
 8006624:	b90b      	cbnz	r3, 800662a <_fflush_r+0x1a>
 8006626:	f000 f8bb 	bl	80067a0 <__sinit>
 800662a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0f3      	beq.n	800661a <_fflush_r+0xa>
 8006632:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006634:	07d0      	lsls	r0, r2, #31
 8006636:	d404      	bmi.n	8006642 <_fflush_r+0x32>
 8006638:	0599      	lsls	r1, r3, #22
 800663a:	d402      	bmi.n	8006642 <_fflush_r+0x32>
 800663c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800663e:	f000 fa7a 	bl	8006b36 <__retarget_lock_acquire_recursive>
 8006642:	4628      	mov	r0, r5
 8006644:	4621      	mov	r1, r4
 8006646:	f7ff ff5f 	bl	8006508 <__sflush_r>
 800664a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800664c:	07da      	lsls	r2, r3, #31
 800664e:	4605      	mov	r5, r0
 8006650:	d4e4      	bmi.n	800661c <_fflush_r+0xc>
 8006652:	89a3      	ldrh	r3, [r4, #12]
 8006654:	059b      	lsls	r3, r3, #22
 8006656:	d4e1      	bmi.n	800661c <_fflush_r+0xc>
 8006658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800665a:	f000 fa6d 	bl	8006b38 <__retarget_lock_release_recursive>
 800665e:	e7dd      	b.n	800661c <_fflush_r+0xc>

08006660 <fflush>:
 8006660:	4601      	mov	r1, r0
 8006662:	b920      	cbnz	r0, 800666e <fflush+0xe>
 8006664:	4a04      	ldr	r2, [pc, #16]	@ (8006678 <fflush+0x18>)
 8006666:	4905      	ldr	r1, [pc, #20]	@ (800667c <fflush+0x1c>)
 8006668:	4805      	ldr	r0, [pc, #20]	@ (8006680 <fflush+0x20>)
 800666a:	f000 b8b1 	b.w	80067d0 <_fwalk_sglue>
 800666e:	4b05      	ldr	r3, [pc, #20]	@ (8006684 <fflush+0x24>)
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	f7ff bfcd 	b.w	8006610 <_fflush_r>
 8006676:	bf00      	nop
 8006678:	20000010 	.word	0x20000010
 800667c:	08006611 	.word	0x08006611
 8006680:	20000020 	.word	0x20000020
 8006684:	2000001c 	.word	0x2000001c

08006688 <std>:
 8006688:	2300      	movs	r3, #0
 800668a:	b510      	push	{r4, lr}
 800668c:	4604      	mov	r4, r0
 800668e:	e9c0 3300 	strd	r3, r3, [r0]
 8006692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006696:	6083      	str	r3, [r0, #8]
 8006698:	8181      	strh	r1, [r0, #12]
 800669a:	6643      	str	r3, [r0, #100]	@ 0x64
 800669c:	81c2      	strh	r2, [r0, #14]
 800669e:	6183      	str	r3, [r0, #24]
 80066a0:	4619      	mov	r1, r3
 80066a2:	2208      	movs	r2, #8
 80066a4:	305c      	adds	r0, #92	@ 0x5c
 80066a6:	f000 f9cc 	bl	8006a42 <memset>
 80066aa:	4b0d      	ldr	r3, [pc, #52]	@ (80066e0 <std+0x58>)
 80066ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80066ae:	4b0d      	ldr	r3, [pc, #52]	@ (80066e4 <std+0x5c>)
 80066b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066b2:	4b0d      	ldr	r3, [pc, #52]	@ (80066e8 <std+0x60>)
 80066b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066b6:	4b0d      	ldr	r3, [pc, #52]	@ (80066ec <std+0x64>)
 80066b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80066ba:	4b0d      	ldr	r3, [pc, #52]	@ (80066f0 <std+0x68>)
 80066bc:	6224      	str	r4, [r4, #32]
 80066be:	429c      	cmp	r4, r3
 80066c0:	d006      	beq.n	80066d0 <std+0x48>
 80066c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066c6:	4294      	cmp	r4, r2
 80066c8:	d002      	beq.n	80066d0 <std+0x48>
 80066ca:	33d0      	adds	r3, #208	@ 0xd0
 80066cc:	429c      	cmp	r4, r3
 80066ce:	d105      	bne.n	80066dc <std+0x54>
 80066d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d8:	f000 ba2c 	b.w	8006b34 <__retarget_lock_init_recursive>
 80066dc:	bd10      	pop	{r4, pc}
 80066de:	bf00      	nop
 80066e0:	080069bd 	.word	0x080069bd
 80066e4:	080069df 	.word	0x080069df
 80066e8:	08006a17 	.word	0x08006a17
 80066ec:	08006a3b 	.word	0x08006a3b
 80066f0:	20001a30 	.word	0x20001a30

080066f4 <stdio_exit_handler>:
 80066f4:	4a02      	ldr	r2, [pc, #8]	@ (8006700 <stdio_exit_handler+0xc>)
 80066f6:	4903      	ldr	r1, [pc, #12]	@ (8006704 <stdio_exit_handler+0x10>)
 80066f8:	4803      	ldr	r0, [pc, #12]	@ (8006708 <stdio_exit_handler+0x14>)
 80066fa:	f000 b869 	b.w	80067d0 <_fwalk_sglue>
 80066fe:	bf00      	nop
 8006700:	20000010 	.word	0x20000010
 8006704:	08006611 	.word	0x08006611
 8006708:	20000020 	.word	0x20000020

0800670c <cleanup_stdio>:
 800670c:	6841      	ldr	r1, [r0, #4]
 800670e:	4b0c      	ldr	r3, [pc, #48]	@ (8006740 <cleanup_stdio+0x34>)
 8006710:	4299      	cmp	r1, r3
 8006712:	b510      	push	{r4, lr}
 8006714:	4604      	mov	r4, r0
 8006716:	d001      	beq.n	800671c <cleanup_stdio+0x10>
 8006718:	f7ff ff7a 	bl	8006610 <_fflush_r>
 800671c:	68a1      	ldr	r1, [r4, #8]
 800671e:	4b09      	ldr	r3, [pc, #36]	@ (8006744 <cleanup_stdio+0x38>)
 8006720:	4299      	cmp	r1, r3
 8006722:	d002      	beq.n	800672a <cleanup_stdio+0x1e>
 8006724:	4620      	mov	r0, r4
 8006726:	f7ff ff73 	bl	8006610 <_fflush_r>
 800672a:	68e1      	ldr	r1, [r4, #12]
 800672c:	4b06      	ldr	r3, [pc, #24]	@ (8006748 <cleanup_stdio+0x3c>)
 800672e:	4299      	cmp	r1, r3
 8006730:	d004      	beq.n	800673c <cleanup_stdio+0x30>
 8006732:	4620      	mov	r0, r4
 8006734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006738:	f7ff bf6a 	b.w	8006610 <_fflush_r>
 800673c:	bd10      	pop	{r4, pc}
 800673e:	bf00      	nop
 8006740:	20001a30 	.word	0x20001a30
 8006744:	20001a98 	.word	0x20001a98
 8006748:	20001b00 	.word	0x20001b00

0800674c <global_stdio_init.part.0>:
 800674c:	b510      	push	{r4, lr}
 800674e:	4b0b      	ldr	r3, [pc, #44]	@ (800677c <global_stdio_init.part.0+0x30>)
 8006750:	4c0b      	ldr	r4, [pc, #44]	@ (8006780 <global_stdio_init.part.0+0x34>)
 8006752:	4a0c      	ldr	r2, [pc, #48]	@ (8006784 <global_stdio_init.part.0+0x38>)
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	4620      	mov	r0, r4
 8006758:	2200      	movs	r2, #0
 800675a:	2104      	movs	r1, #4
 800675c:	f7ff ff94 	bl	8006688 <std>
 8006760:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006764:	2201      	movs	r2, #1
 8006766:	2109      	movs	r1, #9
 8006768:	f7ff ff8e 	bl	8006688 <std>
 800676c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006770:	2202      	movs	r2, #2
 8006772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006776:	2112      	movs	r1, #18
 8006778:	f7ff bf86 	b.w	8006688 <std>
 800677c:	20001b68 	.word	0x20001b68
 8006780:	20001a30 	.word	0x20001a30
 8006784:	080066f5 	.word	0x080066f5

08006788 <__sfp_lock_acquire>:
 8006788:	4801      	ldr	r0, [pc, #4]	@ (8006790 <__sfp_lock_acquire+0x8>)
 800678a:	f000 b9d4 	b.w	8006b36 <__retarget_lock_acquire_recursive>
 800678e:	bf00      	nop
 8006790:	20001b71 	.word	0x20001b71

08006794 <__sfp_lock_release>:
 8006794:	4801      	ldr	r0, [pc, #4]	@ (800679c <__sfp_lock_release+0x8>)
 8006796:	f000 b9cf 	b.w	8006b38 <__retarget_lock_release_recursive>
 800679a:	bf00      	nop
 800679c:	20001b71 	.word	0x20001b71

080067a0 <__sinit>:
 80067a0:	b510      	push	{r4, lr}
 80067a2:	4604      	mov	r4, r0
 80067a4:	f7ff fff0 	bl	8006788 <__sfp_lock_acquire>
 80067a8:	6a23      	ldr	r3, [r4, #32]
 80067aa:	b11b      	cbz	r3, 80067b4 <__sinit+0x14>
 80067ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b0:	f7ff bff0 	b.w	8006794 <__sfp_lock_release>
 80067b4:	4b04      	ldr	r3, [pc, #16]	@ (80067c8 <__sinit+0x28>)
 80067b6:	6223      	str	r3, [r4, #32]
 80067b8:	4b04      	ldr	r3, [pc, #16]	@ (80067cc <__sinit+0x2c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f5      	bne.n	80067ac <__sinit+0xc>
 80067c0:	f7ff ffc4 	bl	800674c <global_stdio_init.part.0>
 80067c4:	e7f2      	b.n	80067ac <__sinit+0xc>
 80067c6:	bf00      	nop
 80067c8:	0800670d 	.word	0x0800670d
 80067cc:	20001b68 	.word	0x20001b68

080067d0 <_fwalk_sglue>:
 80067d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d4:	4607      	mov	r7, r0
 80067d6:	4688      	mov	r8, r1
 80067d8:	4614      	mov	r4, r2
 80067da:	2600      	movs	r6, #0
 80067dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067e0:	f1b9 0901 	subs.w	r9, r9, #1
 80067e4:	d505      	bpl.n	80067f2 <_fwalk_sglue+0x22>
 80067e6:	6824      	ldr	r4, [r4, #0]
 80067e8:	2c00      	cmp	r4, #0
 80067ea:	d1f7      	bne.n	80067dc <_fwalk_sglue+0xc>
 80067ec:	4630      	mov	r0, r6
 80067ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067f2:	89ab      	ldrh	r3, [r5, #12]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d907      	bls.n	8006808 <_fwalk_sglue+0x38>
 80067f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067fc:	3301      	adds	r3, #1
 80067fe:	d003      	beq.n	8006808 <_fwalk_sglue+0x38>
 8006800:	4629      	mov	r1, r5
 8006802:	4638      	mov	r0, r7
 8006804:	47c0      	blx	r8
 8006806:	4306      	orrs	r6, r0
 8006808:	3568      	adds	r5, #104	@ 0x68
 800680a:	e7e9      	b.n	80067e0 <_fwalk_sglue+0x10>

0800680c <iprintf>:
 800680c:	b40f      	push	{r0, r1, r2, r3}
 800680e:	b507      	push	{r0, r1, r2, lr}
 8006810:	4906      	ldr	r1, [pc, #24]	@ (800682c <iprintf+0x20>)
 8006812:	ab04      	add	r3, sp, #16
 8006814:	6808      	ldr	r0, [r1, #0]
 8006816:	f853 2b04 	ldr.w	r2, [r3], #4
 800681a:	6881      	ldr	r1, [r0, #8]
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	f000 fac5 	bl	8006dac <_vfiprintf_r>
 8006822:	b003      	add	sp, #12
 8006824:	f85d eb04 	ldr.w	lr, [sp], #4
 8006828:	b004      	add	sp, #16
 800682a:	4770      	bx	lr
 800682c:	2000001c 	.word	0x2000001c

08006830 <iscanf>:
 8006830:	b40f      	push	{r0, r1, r2, r3}
 8006832:	b507      	push	{r0, r1, r2, lr}
 8006834:	4906      	ldr	r1, [pc, #24]	@ (8006850 <iscanf+0x20>)
 8006836:	ab04      	add	r3, sp, #16
 8006838:	6808      	ldr	r0, [r1, #0]
 800683a:	f853 2b04 	ldr.w	r2, [r3], #4
 800683e:	6841      	ldr	r1, [r0, #4]
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	f000 fef5 	bl	8007630 <_vfiscanf_r>
 8006846:	b003      	add	sp, #12
 8006848:	f85d eb04 	ldr.w	lr, [sp], #4
 800684c:	b004      	add	sp, #16
 800684e:	4770      	bx	lr
 8006850:	2000001c 	.word	0x2000001c

08006854 <setvbuf>:
 8006854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006858:	461d      	mov	r5, r3
 800685a:	4b57      	ldr	r3, [pc, #348]	@ (80069b8 <setvbuf+0x164>)
 800685c:	681f      	ldr	r7, [r3, #0]
 800685e:	4604      	mov	r4, r0
 8006860:	460e      	mov	r6, r1
 8006862:	4690      	mov	r8, r2
 8006864:	b127      	cbz	r7, 8006870 <setvbuf+0x1c>
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	b913      	cbnz	r3, 8006870 <setvbuf+0x1c>
 800686a:	4638      	mov	r0, r7
 800686c:	f7ff ff98 	bl	80067a0 <__sinit>
 8006870:	f1b8 0f02 	cmp.w	r8, #2
 8006874:	d006      	beq.n	8006884 <setvbuf+0x30>
 8006876:	f1b8 0f01 	cmp.w	r8, #1
 800687a:	f200 809a 	bhi.w	80069b2 <setvbuf+0x15e>
 800687e:	2d00      	cmp	r5, #0
 8006880:	f2c0 8097 	blt.w	80069b2 <setvbuf+0x15e>
 8006884:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006886:	07d9      	lsls	r1, r3, #31
 8006888:	d405      	bmi.n	8006896 <setvbuf+0x42>
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	059a      	lsls	r2, r3, #22
 800688e:	d402      	bmi.n	8006896 <setvbuf+0x42>
 8006890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006892:	f000 f950 	bl	8006b36 <__retarget_lock_acquire_recursive>
 8006896:	4621      	mov	r1, r4
 8006898:	4638      	mov	r0, r7
 800689a:	f7ff feb9 	bl	8006610 <_fflush_r>
 800689e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068a0:	b141      	cbz	r1, 80068b4 <setvbuf+0x60>
 80068a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068a6:	4299      	cmp	r1, r3
 80068a8:	d002      	beq.n	80068b0 <setvbuf+0x5c>
 80068aa:	4638      	mov	r0, r7
 80068ac:	f000 f954 	bl	8006b58 <_free_r>
 80068b0:	2300      	movs	r3, #0
 80068b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80068b4:	2300      	movs	r3, #0
 80068b6:	61a3      	str	r3, [r4, #24]
 80068b8:	6063      	str	r3, [r4, #4]
 80068ba:	89a3      	ldrh	r3, [r4, #12]
 80068bc:	061b      	lsls	r3, r3, #24
 80068be:	d503      	bpl.n	80068c8 <setvbuf+0x74>
 80068c0:	6921      	ldr	r1, [r4, #16]
 80068c2:	4638      	mov	r0, r7
 80068c4:	f000 f948 	bl	8006b58 <_free_r>
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80068ce:	f023 0303 	bic.w	r3, r3, #3
 80068d2:	f1b8 0f02 	cmp.w	r8, #2
 80068d6:	81a3      	strh	r3, [r4, #12]
 80068d8:	d061      	beq.n	800699e <setvbuf+0x14a>
 80068da:	ab01      	add	r3, sp, #4
 80068dc:	466a      	mov	r2, sp
 80068de:	4621      	mov	r1, r4
 80068e0:	4638      	mov	r0, r7
 80068e2:	f001 f807 	bl	80078f4 <__swhatbuf_r>
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	4318      	orrs	r0, r3
 80068ea:	81a0      	strh	r0, [r4, #12]
 80068ec:	bb2d      	cbnz	r5, 800693a <setvbuf+0xe6>
 80068ee:	9d00      	ldr	r5, [sp, #0]
 80068f0:	4628      	mov	r0, r5
 80068f2:	f000 f97b 	bl	8006bec <malloc>
 80068f6:	4606      	mov	r6, r0
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d152      	bne.n	80069a2 <setvbuf+0x14e>
 80068fc:	f8dd 9000 	ldr.w	r9, [sp]
 8006900:	45a9      	cmp	r9, r5
 8006902:	d140      	bne.n	8006986 <setvbuf+0x132>
 8006904:	f04f 35ff 	mov.w	r5, #4294967295
 8006908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800690c:	f043 0202 	orr.w	r2, r3, #2
 8006910:	81a2      	strh	r2, [r4, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	60a2      	str	r2, [r4, #8]
 8006916:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800691a:	6022      	str	r2, [r4, #0]
 800691c:	6122      	str	r2, [r4, #16]
 800691e:	2201      	movs	r2, #1
 8006920:	6162      	str	r2, [r4, #20]
 8006922:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006924:	07d6      	lsls	r6, r2, #31
 8006926:	d404      	bmi.n	8006932 <setvbuf+0xde>
 8006928:	0598      	lsls	r0, r3, #22
 800692a:	d402      	bmi.n	8006932 <setvbuf+0xde>
 800692c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800692e:	f000 f903 	bl	8006b38 <__retarget_lock_release_recursive>
 8006932:	4628      	mov	r0, r5
 8006934:	b003      	add	sp, #12
 8006936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800693a:	2e00      	cmp	r6, #0
 800693c:	d0d8      	beq.n	80068f0 <setvbuf+0x9c>
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	b913      	cbnz	r3, 8006948 <setvbuf+0xf4>
 8006942:	4638      	mov	r0, r7
 8006944:	f7ff ff2c 	bl	80067a0 <__sinit>
 8006948:	f1b8 0f01 	cmp.w	r8, #1
 800694c:	bf08      	it	eq
 800694e:	89a3      	ldrheq	r3, [r4, #12]
 8006950:	6026      	str	r6, [r4, #0]
 8006952:	bf04      	itt	eq
 8006954:	f043 0301 	orreq.w	r3, r3, #1
 8006958:	81a3      	strheq	r3, [r4, #12]
 800695a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800695e:	f013 0208 	ands.w	r2, r3, #8
 8006962:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006966:	d01e      	beq.n	80069a6 <setvbuf+0x152>
 8006968:	07d9      	lsls	r1, r3, #31
 800696a:	bf41      	itttt	mi
 800696c:	2200      	movmi	r2, #0
 800696e:	426d      	negmi	r5, r5
 8006970:	60a2      	strmi	r2, [r4, #8]
 8006972:	61a5      	strmi	r5, [r4, #24]
 8006974:	bf58      	it	pl
 8006976:	60a5      	strpl	r5, [r4, #8]
 8006978:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800697a:	07d2      	lsls	r2, r2, #31
 800697c:	d401      	bmi.n	8006982 <setvbuf+0x12e>
 800697e:	059b      	lsls	r3, r3, #22
 8006980:	d513      	bpl.n	80069aa <setvbuf+0x156>
 8006982:	2500      	movs	r5, #0
 8006984:	e7d5      	b.n	8006932 <setvbuf+0xde>
 8006986:	4648      	mov	r0, r9
 8006988:	f000 f930 	bl	8006bec <malloc>
 800698c:	4606      	mov	r6, r0
 800698e:	2800      	cmp	r0, #0
 8006990:	d0b8      	beq.n	8006904 <setvbuf+0xb0>
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006998:	81a3      	strh	r3, [r4, #12]
 800699a:	464d      	mov	r5, r9
 800699c:	e7cf      	b.n	800693e <setvbuf+0xea>
 800699e:	2500      	movs	r5, #0
 80069a0:	e7b2      	b.n	8006908 <setvbuf+0xb4>
 80069a2:	46a9      	mov	r9, r5
 80069a4:	e7f5      	b.n	8006992 <setvbuf+0x13e>
 80069a6:	60a2      	str	r2, [r4, #8]
 80069a8:	e7e6      	b.n	8006978 <setvbuf+0x124>
 80069aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ac:	f000 f8c4 	bl	8006b38 <__retarget_lock_release_recursive>
 80069b0:	e7e7      	b.n	8006982 <setvbuf+0x12e>
 80069b2:	f04f 35ff 	mov.w	r5, #4294967295
 80069b6:	e7bc      	b.n	8006932 <setvbuf+0xde>
 80069b8:	2000001c 	.word	0x2000001c

080069bc <__sread>:
 80069bc:	b510      	push	{r4, lr}
 80069be:	460c      	mov	r4, r1
 80069c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c4:	f000 f868 	bl	8006a98 <_read_r>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	bfab      	itete	ge
 80069cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069ce:	89a3      	ldrhlt	r3, [r4, #12]
 80069d0:	181b      	addge	r3, r3, r0
 80069d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069d6:	bfac      	ite	ge
 80069d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069da:	81a3      	strhlt	r3, [r4, #12]
 80069dc:	bd10      	pop	{r4, pc}

080069de <__swrite>:
 80069de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e2:	461f      	mov	r7, r3
 80069e4:	898b      	ldrh	r3, [r1, #12]
 80069e6:	05db      	lsls	r3, r3, #23
 80069e8:	4605      	mov	r5, r0
 80069ea:	460c      	mov	r4, r1
 80069ec:	4616      	mov	r6, r2
 80069ee:	d505      	bpl.n	80069fc <__swrite+0x1e>
 80069f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f4:	2302      	movs	r3, #2
 80069f6:	2200      	movs	r2, #0
 80069f8:	f000 f83c 	bl	8006a74 <_lseek_r>
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a06:	81a3      	strh	r3, [r4, #12]
 8006a08:	4632      	mov	r2, r6
 8006a0a:	463b      	mov	r3, r7
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a12:	f000 b853 	b.w	8006abc <_write_r>

08006a16 <__sseek>:
 8006a16:	b510      	push	{r4, lr}
 8006a18:	460c      	mov	r4, r1
 8006a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a1e:	f000 f829 	bl	8006a74 <_lseek_r>
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	bf15      	itete	ne
 8006a28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a32:	81a3      	strheq	r3, [r4, #12]
 8006a34:	bf18      	it	ne
 8006a36:	81a3      	strhne	r3, [r4, #12]
 8006a38:	bd10      	pop	{r4, pc}

08006a3a <__sclose>:
 8006a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a3e:	f000 b809 	b.w	8006a54 <_close_r>

08006a42 <memset>:
 8006a42:	4402      	add	r2, r0
 8006a44:	4603      	mov	r3, r0
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d100      	bne.n	8006a4c <memset+0xa>
 8006a4a:	4770      	bx	lr
 8006a4c:	f803 1b01 	strb.w	r1, [r3], #1
 8006a50:	e7f9      	b.n	8006a46 <memset+0x4>
	...

08006a54 <_close_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4d06      	ldr	r5, [pc, #24]	@ (8006a70 <_close_r+0x1c>)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	602b      	str	r3, [r5, #0]
 8006a60:	f7f9 ff56 	bl	8000910 <_close>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_close_r+0x1a>
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_close_r+0x1a>
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	20001b6c 	.word	0x20001b6c

08006a74 <_lseek_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4d07      	ldr	r5, [pc, #28]	@ (8006a94 <_lseek_r+0x20>)
 8006a78:	4604      	mov	r4, r0
 8006a7a:	4608      	mov	r0, r1
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	2200      	movs	r2, #0
 8006a80:	602a      	str	r2, [r5, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f7fa f84c 	bl	8000b20 <_lseek>
 8006a88:	1c43      	adds	r3, r0, #1
 8006a8a:	d102      	bne.n	8006a92 <_lseek_r+0x1e>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	b103      	cbz	r3, 8006a92 <_lseek_r+0x1e>
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	bd38      	pop	{r3, r4, r5, pc}
 8006a94:	20001b6c 	.word	0x20001b6c

08006a98 <_read_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4d07      	ldr	r5, [pc, #28]	@ (8006ab8 <_read_r+0x20>)
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	4608      	mov	r0, r1
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	602a      	str	r2, [r5, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f7f9 ff4a 	bl	8000940 <_read>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_read_r+0x1e>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_read_r+0x1e>
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	20001b6c 	.word	0x20001b6c

08006abc <_write_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4d07      	ldr	r5, [pc, #28]	@ (8006adc <_write_r+0x20>)
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	602a      	str	r2, [r5, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f7f9 fef4 	bl	80008b8 <_write>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_write_r+0x1e>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_write_r+0x1e>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	20001b6c 	.word	0x20001b6c

08006ae0 <__errno>:
 8006ae0:	4b01      	ldr	r3, [pc, #4]	@ (8006ae8 <__errno+0x8>)
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	2000001c 	.word	0x2000001c

08006aec <__libc_init_array>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	4d0d      	ldr	r5, [pc, #52]	@ (8006b24 <__libc_init_array+0x38>)
 8006af0:	4c0d      	ldr	r4, [pc, #52]	@ (8006b28 <__libc_init_array+0x3c>)
 8006af2:	1b64      	subs	r4, r4, r5
 8006af4:	10a4      	asrs	r4, r4, #2
 8006af6:	2600      	movs	r6, #0
 8006af8:	42a6      	cmp	r6, r4
 8006afa:	d109      	bne.n	8006b10 <__libc_init_array+0x24>
 8006afc:	4d0b      	ldr	r5, [pc, #44]	@ (8006b2c <__libc_init_array+0x40>)
 8006afe:	4c0c      	ldr	r4, [pc, #48]	@ (8006b30 <__libc_init_array+0x44>)
 8006b00:	f001 fab6 	bl	8008070 <_init>
 8006b04:	1b64      	subs	r4, r4, r5
 8006b06:	10a4      	asrs	r4, r4, #2
 8006b08:	2600      	movs	r6, #0
 8006b0a:	42a6      	cmp	r6, r4
 8006b0c:	d105      	bne.n	8006b1a <__libc_init_array+0x2e>
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b14:	4798      	blx	r3
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7ee      	b.n	8006af8 <__libc_init_array+0xc>
 8006b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b1e:	4798      	blx	r3
 8006b20:	3601      	adds	r6, #1
 8006b22:	e7f2      	b.n	8006b0a <__libc_init_array+0x1e>
 8006b24:	080082f0 	.word	0x080082f0
 8006b28:	080082f0 	.word	0x080082f0
 8006b2c:	080082f0 	.word	0x080082f0
 8006b30:	080082f4 	.word	0x080082f4

08006b34 <__retarget_lock_init_recursive>:
 8006b34:	4770      	bx	lr

08006b36 <__retarget_lock_acquire_recursive>:
 8006b36:	4770      	bx	lr

08006b38 <__retarget_lock_release_recursive>:
 8006b38:	4770      	bx	lr

08006b3a <memcpy>:
 8006b3a:	440a      	add	r2, r1
 8006b3c:	4291      	cmp	r1, r2
 8006b3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b42:	d100      	bne.n	8006b46 <memcpy+0xc>
 8006b44:	4770      	bx	lr
 8006b46:	b510      	push	{r4, lr}
 8006b48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b50:	4291      	cmp	r1, r2
 8006b52:	d1f9      	bne.n	8006b48 <memcpy+0xe>
 8006b54:	bd10      	pop	{r4, pc}
	...

08006b58 <_free_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	2900      	cmp	r1, #0
 8006b5e:	d041      	beq.n	8006be4 <_free_r+0x8c>
 8006b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b64:	1f0c      	subs	r4, r1, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	bfb8      	it	lt
 8006b6a:	18e4      	addlt	r4, r4, r3
 8006b6c:	f000 f8e8 	bl	8006d40 <__malloc_lock>
 8006b70:	4a1d      	ldr	r2, [pc, #116]	@ (8006be8 <_free_r+0x90>)
 8006b72:	6813      	ldr	r3, [r2, #0]
 8006b74:	b933      	cbnz	r3, 8006b84 <_free_r+0x2c>
 8006b76:	6063      	str	r3, [r4, #4]
 8006b78:	6014      	str	r4, [r2, #0]
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b80:	f000 b8e4 	b.w	8006d4c <__malloc_unlock>
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	d908      	bls.n	8006b9a <_free_r+0x42>
 8006b88:	6820      	ldr	r0, [r4, #0]
 8006b8a:	1821      	adds	r1, r4, r0
 8006b8c:	428b      	cmp	r3, r1
 8006b8e:	bf01      	itttt	eq
 8006b90:	6819      	ldreq	r1, [r3, #0]
 8006b92:	685b      	ldreq	r3, [r3, #4]
 8006b94:	1809      	addeq	r1, r1, r0
 8006b96:	6021      	streq	r1, [r4, #0]
 8006b98:	e7ed      	b.n	8006b76 <_free_r+0x1e>
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	b10b      	cbz	r3, 8006ba4 <_free_r+0x4c>
 8006ba0:	42a3      	cmp	r3, r4
 8006ba2:	d9fa      	bls.n	8006b9a <_free_r+0x42>
 8006ba4:	6811      	ldr	r1, [r2, #0]
 8006ba6:	1850      	adds	r0, r2, r1
 8006ba8:	42a0      	cmp	r0, r4
 8006baa:	d10b      	bne.n	8006bc4 <_free_r+0x6c>
 8006bac:	6820      	ldr	r0, [r4, #0]
 8006bae:	4401      	add	r1, r0
 8006bb0:	1850      	adds	r0, r2, r1
 8006bb2:	4283      	cmp	r3, r0
 8006bb4:	6011      	str	r1, [r2, #0]
 8006bb6:	d1e0      	bne.n	8006b7a <_free_r+0x22>
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	6053      	str	r3, [r2, #4]
 8006bbe:	4408      	add	r0, r1
 8006bc0:	6010      	str	r0, [r2, #0]
 8006bc2:	e7da      	b.n	8006b7a <_free_r+0x22>
 8006bc4:	d902      	bls.n	8006bcc <_free_r+0x74>
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	602b      	str	r3, [r5, #0]
 8006bca:	e7d6      	b.n	8006b7a <_free_r+0x22>
 8006bcc:	6820      	ldr	r0, [r4, #0]
 8006bce:	1821      	adds	r1, r4, r0
 8006bd0:	428b      	cmp	r3, r1
 8006bd2:	bf04      	itt	eq
 8006bd4:	6819      	ldreq	r1, [r3, #0]
 8006bd6:	685b      	ldreq	r3, [r3, #4]
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	bf04      	itt	eq
 8006bdc:	1809      	addeq	r1, r1, r0
 8006bde:	6021      	streq	r1, [r4, #0]
 8006be0:	6054      	str	r4, [r2, #4]
 8006be2:	e7ca      	b.n	8006b7a <_free_r+0x22>
 8006be4:	bd38      	pop	{r3, r4, r5, pc}
 8006be6:	bf00      	nop
 8006be8:	20001b78 	.word	0x20001b78

08006bec <malloc>:
 8006bec:	4b02      	ldr	r3, [pc, #8]	@ (8006bf8 <malloc+0xc>)
 8006bee:	4601      	mov	r1, r0
 8006bf0:	6818      	ldr	r0, [r3, #0]
 8006bf2:	f000 b825 	b.w	8006c40 <_malloc_r>
 8006bf6:	bf00      	nop
 8006bf8:	2000001c 	.word	0x2000001c

08006bfc <sbrk_aligned>:
 8006bfc:	b570      	push	{r4, r5, r6, lr}
 8006bfe:	4e0f      	ldr	r6, [pc, #60]	@ (8006c3c <sbrk_aligned+0x40>)
 8006c00:	460c      	mov	r4, r1
 8006c02:	6831      	ldr	r1, [r6, #0]
 8006c04:	4605      	mov	r5, r0
 8006c06:	b911      	cbnz	r1, 8006c0e <sbrk_aligned+0x12>
 8006c08:	f001 f900 	bl	8007e0c <_sbrk_r>
 8006c0c:	6030      	str	r0, [r6, #0]
 8006c0e:	4621      	mov	r1, r4
 8006c10:	4628      	mov	r0, r5
 8006c12:	f001 f8fb 	bl	8007e0c <_sbrk_r>
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	d103      	bne.n	8006c22 <sbrk_aligned+0x26>
 8006c1a:	f04f 34ff 	mov.w	r4, #4294967295
 8006c1e:	4620      	mov	r0, r4
 8006c20:	bd70      	pop	{r4, r5, r6, pc}
 8006c22:	1cc4      	adds	r4, r0, #3
 8006c24:	f024 0403 	bic.w	r4, r4, #3
 8006c28:	42a0      	cmp	r0, r4
 8006c2a:	d0f8      	beq.n	8006c1e <sbrk_aligned+0x22>
 8006c2c:	1a21      	subs	r1, r4, r0
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f001 f8ec 	bl	8007e0c <_sbrk_r>
 8006c34:	3001      	adds	r0, #1
 8006c36:	d1f2      	bne.n	8006c1e <sbrk_aligned+0x22>
 8006c38:	e7ef      	b.n	8006c1a <sbrk_aligned+0x1e>
 8006c3a:	bf00      	nop
 8006c3c:	20001b74 	.word	0x20001b74

08006c40 <_malloc_r>:
 8006c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c44:	1ccd      	adds	r5, r1, #3
 8006c46:	f025 0503 	bic.w	r5, r5, #3
 8006c4a:	3508      	adds	r5, #8
 8006c4c:	2d0c      	cmp	r5, #12
 8006c4e:	bf38      	it	cc
 8006c50:	250c      	movcc	r5, #12
 8006c52:	2d00      	cmp	r5, #0
 8006c54:	4606      	mov	r6, r0
 8006c56:	db01      	blt.n	8006c5c <_malloc_r+0x1c>
 8006c58:	42a9      	cmp	r1, r5
 8006c5a:	d904      	bls.n	8006c66 <_malloc_r+0x26>
 8006c5c:	230c      	movs	r3, #12
 8006c5e:	6033      	str	r3, [r6, #0]
 8006c60:	2000      	movs	r0, #0
 8006c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d3c <_malloc_r+0xfc>
 8006c6a:	f000 f869 	bl	8006d40 <__malloc_lock>
 8006c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c72:	461c      	mov	r4, r3
 8006c74:	bb44      	cbnz	r4, 8006cc8 <_malloc_r+0x88>
 8006c76:	4629      	mov	r1, r5
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f7ff ffbf 	bl	8006bfc <sbrk_aligned>
 8006c7e:	1c43      	adds	r3, r0, #1
 8006c80:	4604      	mov	r4, r0
 8006c82:	d158      	bne.n	8006d36 <_malloc_r+0xf6>
 8006c84:	f8d8 4000 	ldr.w	r4, [r8]
 8006c88:	4627      	mov	r7, r4
 8006c8a:	2f00      	cmp	r7, #0
 8006c8c:	d143      	bne.n	8006d16 <_malloc_r+0xd6>
 8006c8e:	2c00      	cmp	r4, #0
 8006c90:	d04b      	beq.n	8006d2a <_malloc_r+0xea>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	4639      	mov	r1, r7
 8006c96:	4630      	mov	r0, r6
 8006c98:	eb04 0903 	add.w	r9, r4, r3
 8006c9c:	f001 f8b6 	bl	8007e0c <_sbrk_r>
 8006ca0:	4581      	cmp	r9, r0
 8006ca2:	d142      	bne.n	8006d2a <_malloc_r+0xea>
 8006ca4:	6821      	ldr	r1, [r4, #0]
 8006ca6:	1a6d      	subs	r5, r5, r1
 8006ca8:	4629      	mov	r1, r5
 8006caa:	4630      	mov	r0, r6
 8006cac:	f7ff ffa6 	bl	8006bfc <sbrk_aligned>
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d03a      	beq.n	8006d2a <_malloc_r+0xea>
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	442b      	add	r3, r5
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	f8d8 3000 	ldr.w	r3, [r8]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	bb62      	cbnz	r2, 8006d1c <_malloc_r+0xdc>
 8006cc2:	f8c8 7000 	str.w	r7, [r8]
 8006cc6:	e00f      	b.n	8006ce8 <_malloc_r+0xa8>
 8006cc8:	6822      	ldr	r2, [r4, #0]
 8006cca:	1b52      	subs	r2, r2, r5
 8006ccc:	d420      	bmi.n	8006d10 <_malloc_r+0xd0>
 8006cce:	2a0b      	cmp	r2, #11
 8006cd0:	d917      	bls.n	8006d02 <_malloc_r+0xc2>
 8006cd2:	1961      	adds	r1, r4, r5
 8006cd4:	42a3      	cmp	r3, r4
 8006cd6:	6025      	str	r5, [r4, #0]
 8006cd8:	bf18      	it	ne
 8006cda:	6059      	strne	r1, [r3, #4]
 8006cdc:	6863      	ldr	r3, [r4, #4]
 8006cde:	bf08      	it	eq
 8006ce0:	f8c8 1000 	streq.w	r1, [r8]
 8006ce4:	5162      	str	r2, [r4, r5]
 8006ce6:	604b      	str	r3, [r1, #4]
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f000 f82f 	bl	8006d4c <__malloc_unlock>
 8006cee:	f104 000b 	add.w	r0, r4, #11
 8006cf2:	1d23      	adds	r3, r4, #4
 8006cf4:	f020 0007 	bic.w	r0, r0, #7
 8006cf8:	1ac2      	subs	r2, r0, r3
 8006cfa:	bf1c      	itt	ne
 8006cfc:	1a1b      	subne	r3, r3, r0
 8006cfe:	50a3      	strne	r3, [r4, r2]
 8006d00:	e7af      	b.n	8006c62 <_malloc_r+0x22>
 8006d02:	6862      	ldr	r2, [r4, #4]
 8006d04:	42a3      	cmp	r3, r4
 8006d06:	bf0c      	ite	eq
 8006d08:	f8c8 2000 	streq.w	r2, [r8]
 8006d0c:	605a      	strne	r2, [r3, #4]
 8006d0e:	e7eb      	b.n	8006ce8 <_malloc_r+0xa8>
 8006d10:	4623      	mov	r3, r4
 8006d12:	6864      	ldr	r4, [r4, #4]
 8006d14:	e7ae      	b.n	8006c74 <_malloc_r+0x34>
 8006d16:	463c      	mov	r4, r7
 8006d18:	687f      	ldr	r7, [r7, #4]
 8006d1a:	e7b6      	b.n	8006c8a <_malloc_r+0x4a>
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	d1fb      	bne.n	8006d1c <_malloc_r+0xdc>
 8006d24:	2300      	movs	r3, #0
 8006d26:	6053      	str	r3, [r2, #4]
 8006d28:	e7de      	b.n	8006ce8 <_malloc_r+0xa8>
 8006d2a:	230c      	movs	r3, #12
 8006d2c:	6033      	str	r3, [r6, #0]
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f000 f80c 	bl	8006d4c <__malloc_unlock>
 8006d34:	e794      	b.n	8006c60 <_malloc_r+0x20>
 8006d36:	6005      	str	r5, [r0, #0]
 8006d38:	e7d6      	b.n	8006ce8 <_malloc_r+0xa8>
 8006d3a:	bf00      	nop
 8006d3c:	20001b78 	.word	0x20001b78

08006d40 <__malloc_lock>:
 8006d40:	4801      	ldr	r0, [pc, #4]	@ (8006d48 <__malloc_lock+0x8>)
 8006d42:	f7ff bef8 	b.w	8006b36 <__retarget_lock_acquire_recursive>
 8006d46:	bf00      	nop
 8006d48:	20001b70 	.word	0x20001b70

08006d4c <__malloc_unlock>:
 8006d4c:	4801      	ldr	r0, [pc, #4]	@ (8006d54 <__malloc_unlock+0x8>)
 8006d4e:	f7ff bef3 	b.w	8006b38 <__retarget_lock_release_recursive>
 8006d52:	bf00      	nop
 8006d54:	20001b70 	.word	0x20001b70

08006d58 <__sfputc_r>:
 8006d58:	6893      	ldr	r3, [r2, #8]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	b410      	push	{r4}
 8006d60:	6093      	str	r3, [r2, #8]
 8006d62:	da08      	bge.n	8006d76 <__sfputc_r+0x1e>
 8006d64:	6994      	ldr	r4, [r2, #24]
 8006d66:	42a3      	cmp	r3, r4
 8006d68:	db01      	blt.n	8006d6e <__sfputc_r+0x16>
 8006d6a:	290a      	cmp	r1, #10
 8006d6c:	d103      	bne.n	8006d76 <__sfputc_r+0x1e>
 8006d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d72:	f000 bf95 	b.w	8007ca0 <__swbuf_r>
 8006d76:	6813      	ldr	r3, [r2, #0]
 8006d78:	1c58      	adds	r0, r3, #1
 8006d7a:	6010      	str	r0, [r2, #0]
 8006d7c:	7019      	strb	r1, [r3, #0]
 8006d7e:	4608      	mov	r0, r1
 8006d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <__sfputs_r>:
 8006d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d88:	4606      	mov	r6, r0
 8006d8a:	460f      	mov	r7, r1
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	18d5      	adds	r5, r2, r3
 8006d90:	42ac      	cmp	r4, r5
 8006d92:	d101      	bne.n	8006d98 <__sfputs_r+0x12>
 8006d94:	2000      	movs	r0, #0
 8006d96:	e007      	b.n	8006da8 <__sfputs_r+0x22>
 8006d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9c:	463a      	mov	r2, r7
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f7ff ffda 	bl	8006d58 <__sfputc_r>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d1f3      	bne.n	8006d90 <__sfputs_r+0xa>
 8006da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006dac <_vfiprintf_r>:
 8006dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db0:	460d      	mov	r5, r1
 8006db2:	b09d      	sub	sp, #116	@ 0x74
 8006db4:	4614      	mov	r4, r2
 8006db6:	4698      	mov	r8, r3
 8006db8:	4606      	mov	r6, r0
 8006dba:	b118      	cbz	r0, 8006dc4 <_vfiprintf_r+0x18>
 8006dbc:	6a03      	ldr	r3, [r0, #32]
 8006dbe:	b90b      	cbnz	r3, 8006dc4 <_vfiprintf_r+0x18>
 8006dc0:	f7ff fcee 	bl	80067a0 <__sinit>
 8006dc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dc6:	07d9      	lsls	r1, r3, #31
 8006dc8:	d405      	bmi.n	8006dd6 <_vfiprintf_r+0x2a>
 8006dca:	89ab      	ldrh	r3, [r5, #12]
 8006dcc:	059a      	lsls	r2, r3, #22
 8006dce:	d402      	bmi.n	8006dd6 <_vfiprintf_r+0x2a>
 8006dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dd2:	f7ff feb0 	bl	8006b36 <__retarget_lock_acquire_recursive>
 8006dd6:	89ab      	ldrh	r3, [r5, #12]
 8006dd8:	071b      	lsls	r3, r3, #28
 8006dda:	d501      	bpl.n	8006de0 <_vfiprintf_r+0x34>
 8006ddc:	692b      	ldr	r3, [r5, #16]
 8006dde:	b99b      	cbnz	r3, 8006e08 <_vfiprintf_r+0x5c>
 8006de0:	4629      	mov	r1, r5
 8006de2:	4630      	mov	r0, r6
 8006de4:	f000 ff9a 	bl	8007d1c <__swsetup_r>
 8006de8:	b170      	cbz	r0, 8006e08 <_vfiprintf_r+0x5c>
 8006dea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dec:	07dc      	lsls	r4, r3, #31
 8006dee:	d504      	bpl.n	8006dfa <_vfiprintf_r+0x4e>
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	b01d      	add	sp, #116	@ 0x74
 8006df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfa:	89ab      	ldrh	r3, [r5, #12]
 8006dfc:	0598      	lsls	r0, r3, #22
 8006dfe:	d4f7      	bmi.n	8006df0 <_vfiprintf_r+0x44>
 8006e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e02:	f7ff fe99 	bl	8006b38 <__retarget_lock_release_recursive>
 8006e06:	e7f3      	b.n	8006df0 <_vfiprintf_r+0x44>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e0c:	2320      	movs	r3, #32
 8006e0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e16:	2330      	movs	r3, #48	@ 0x30
 8006e18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006fc8 <_vfiprintf_r+0x21c>
 8006e1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e20:	f04f 0901 	mov.w	r9, #1
 8006e24:	4623      	mov	r3, r4
 8006e26:	469a      	mov	sl, r3
 8006e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e2c:	b10a      	cbz	r2, 8006e32 <_vfiprintf_r+0x86>
 8006e2e:	2a25      	cmp	r2, #37	@ 0x25
 8006e30:	d1f9      	bne.n	8006e26 <_vfiprintf_r+0x7a>
 8006e32:	ebba 0b04 	subs.w	fp, sl, r4
 8006e36:	d00b      	beq.n	8006e50 <_vfiprintf_r+0xa4>
 8006e38:	465b      	mov	r3, fp
 8006e3a:	4622      	mov	r2, r4
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f7ff ffa1 	bl	8006d86 <__sfputs_r>
 8006e44:	3001      	adds	r0, #1
 8006e46:	f000 80a7 	beq.w	8006f98 <_vfiprintf_r+0x1ec>
 8006e4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e4c:	445a      	add	r2, fp
 8006e4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e50:	f89a 3000 	ldrb.w	r3, [sl]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 809f 	beq.w	8006f98 <_vfiprintf_r+0x1ec>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e64:	f10a 0a01 	add.w	sl, sl, #1
 8006e68:	9304      	str	r3, [sp, #16]
 8006e6a:	9307      	str	r3, [sp, #28]
 8006e6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e70:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e72:	4654      	mov	r4, sl
 8006e74:	2205      	movs	r2, #5
 8006e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e7a:	4853      	ldr	r0, [pc, #332]	@ (8006fc8 <_vfiprintf_r+0x21c>)
 8006e7c:	f7f9 f9a8 	bl	80001d0 <memchr>
 8006e80:	9a04      	ldr	r2, [sp, #16]
 8006e82:	b9d8      	cbnz	r0, 8006ebc <_vfiprintf_r+0x110>
 8006e84:	06d1      	lsls	r1, r2, #27
 8006e86:	bf44      	itt	mi
 8006e88:	2320      	movmi	r3, #32
 8006e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e8e:	0713      	lsls	r3, r2, #28
 8006e90:	bf44      	itt	mi
 8006e92:	232b      	movmi	r3, #43	@ 0x2b
 8006e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e98:	f89a 3000 	ldrb.w	r3, [sl]
 8006e9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e9e:	d015      	beq.n	8006ecc <_vfiprintf_r+0x120>
 8006ea0:	9a07      	ldr	r2, [sp, #28]
 8006ea2:	4654      	mov	r4, sl
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	f04f 0c0a 	mov.w	ip, #10
 8006eaa:	4621      	mov	r1, r4
 8006eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eb0:	3b30      	subs	r3, #48	@ 0x30
 8006eb2:	2b09      	cmp	r3, #9
 8006eb4:	d94b      	bls.n	8006f4e <_vfiprintf_r+0x1a2>
 8006eb6:	b1b0      	cbz	r0, 8006ee6 <_vfiprintf_r+0x13a>
 8006eb8:	9207      	str	r2, [sp, #28]
 8006eba:	e014      	b.n	8006ee6 <_vfiprintf_r+0x13a>
 8006ebc:	eba0 0308 	sub.w	r3, r0, r8
 8006ec0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	9304      	str	r3, [sp, #16]
 8006ec8:	46a2      	mov	sl, r4
 8006eca:	e7d2      	b.n	8006e72 <_vfiprintf_r+0xc6>
 8006ecc:	9b03      	ldr	r3, [sp, #12]
 8006ece:	1d19      	adds	r1, r3, #4
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	9103      	str	r1, [sp, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bfbb      	ittet	lt
 8006ed8:	425b      	neglt	r3, r3
 8006eda:	f042 0202 	orrlt.w	r2, r2, #2
 8006ede:	9307      	strge	r3, [sp, #28]
 8006ee0:	9307      	strlt	r3, [sp, #28]
 8006ee2:	bfb8      	it	lt
 8006ee4:	9204      	strlt	r2, [sp, #16]
 8006ee6:	7823      	ldrb	r3, [r4, #0]
 8006ee8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006eea:	d10a      	bne.n	8006f02 <_vfiprintf_r+0x156>
 8006eec:	7863      	ldrb	r3, [r4, #1]
 8006eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ef0:	d132      	bne.n	8006f58 <_vfiprintf_r+0x1ac>
 8006ef2:	9b03      	ldr	r3, [sp, #12]
 8006ef4:	1d1a      	adds	r2, r3, #4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	9203      	str	r2, [sp, #12]
 8006efa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006efe:	3402      	adds	r4, #2
 8006f00:	9305      	str	r3, [sp, #20]
 8006f02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006fd8 <_vfiprintf_r+0x22c>
 8006f06:	7821      	ldrb	r1, [r4, #0]
 8006f08:	2203      	movs	r2, #3
 8006f0a:	4650      	mov	r0, sl
 8006f0c:	f7f9 f960 	bl	80001d0 <memchr>
 8006f10:	b138      	cbz	r0, 8006f22 <_vfiprintf_r+0x176>
 8006f12:	9b04      	ldr	r3, [sp, #16]
 8006f14:	eba0 000a 	sub.w	r0, r0, sl
 8006f18:	2240      	movs	r2, #64	@ 0x40
 8006f1a:	4082      	lsls	r2, r0
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	3401      	adds	r4, #1
 8006f20:	9304      	str	r3, [sp, #16]
 8006f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f26:	4829      	ldr	r0, [pc, #164]	@ (8006fcc <_vfiprintf_r+0x220>)
 8006f28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f2c:	2206      	movs	r2, #6
 8006f2e:	f7f9 f94f 	bl	80001d0 <memchr>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d03f      	beq.n	8006fb6 <_vfiprintf_r+0x20a>
 8006f36:	4b26      	ldr	r3, [pc, #152]	@ (8006fd0 <_vfiprintf_r+0x224>)
 8006f38:	bb1b      	cbnz	r3, 8006f82 <_vfiprintf_r+0x1d6>
 8006f3a:	9b03      	ldr	r3, [sp, #12]
 8006f3c:	3307      	adds	r3, #7
 8006f3e:	f023 0307 	bic.w	r3, r3, #7
 8006f42:	3308      	adds	r3, #8
 8006f44:	9303      	str	r3, [sp, #12]
 8006f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f48:	443b      	add	r3, r7
 8006f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f4c:	e76a      	b.n	8006e24 <_vfiprintf_r+0x78>
 8006f4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f52:	460c      	mov	r4, r1
 8006f54:	2001      	movs	r0, #1
 8006f56:	e7a8      	b.n	8006eaa <_vfiprintf_r+0xfe>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	3401      	adds	r4, #1
 8006f5c:	9305      	str	r3, [sp, #20]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	f04f 0c0a 	mov.w	ip, #10
 8006f64:	4620      	mov	r0, r4
 8006f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f6a:	3a30      	subs	r2, #48	@ 0x30
 8006f6c:	2a09      	cmp	r2, #9
 8006f6e:	d903      	bls.n	8006f78 <_vfiprintf_r+0x1cc>
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0c6      	beq.n	8006f02 <_vfiprintf_r+0x156>
 8006f74:	9105      	str	r1, [sp, #20]
 8006f76:	e7c4      	b.n	8006f02 <_vfiprintf_r+0x156>
 8006f78:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e7f0      	b.n	8006f64 <_vfiprintf_r+0x1b8>
 8006f82:	ab03      	add	r3, sp, #12
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	462a      	mov	r2, r5
 8006f88:	4b12      	ldr	r3, [pc, #72]	@ (8006fd4 <_vfiprintf_r+0x228>)
 8006f8a:	a904      	add	r1, sp, #16
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f3af 8000 	nop.w
 8006f92:	4607      	mov	r7, r0
 8006f94:	1c78      	adds	r0, r7, #1
 8006f96:	d1d6      	bne.n	8006f46 <_vfiprintf_r+0x19a>
 8006f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f9a:	07d9      	lsls	r1, r3, #31
 8006f9c:	d405      	bmi.n	8006faa <_vfiprintf_r+0x1fe>
 8006f9e:	89ab      	ldrh	r3, [r5, #12]
 8006fa0:	059a      	lsls	r2, r3, #22
 8006fa2:	d402      	bmi.n	8006faa <_vfiprintf_r+0x1fe>
 8006fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fa6:	f7ff fdc7 	bl	8006b38 <__retarget_lock_release_recursive>
 8006faa:	89ab      	ldrh	r3, [r5, #12]
 8006fac:	065b      	lsls	r3, r3, #25
 8006fae:	f53f af1f 	bmi.w	8006df0 <_vfiprintf_r+0x44>
 8006fb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fb4:	e71e      	b.n	8006df4 <_vfiprintf_r+0x48>
 8006fb6:	ab03      	add	r3, sp, #12
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	462a      	mov	r2, r5
 8006fbc:	4b05      	ldr	r3, [pc, #20]	@ (8006fd4 <_vfiprintf_r+0x228>)
 8006fbe:	a904      	add	r1, sp, #16
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	f000 f879 	bl	80070b8 <_printf_i>
 8006fc6:	e7e4      	b.n	8006f92 <_vfiprintf_r+0x1e6>
 8006fc8:	08008198 	.word	0x08008198
 8006fcc:	080081a2 	.word	0x080081a2
 8006fd0:	00000000 	.word	0x00000000
 8006fd4:	08006d87 	.word	0x08006d87
 8006fd8:	0800819e 	.word	0x0800819e

08006fdc <_printf_common>:
 8006fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe0:	4616      	mov	r6, r2
 8006fe2:	4698      	mov	r8, r3
 8006fe4:	688a      	ldr	r2, [r1, #8]
 8006fe6:	690b      	ldr	r3, [r1, #16]
 8006fe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fec:	4293      	cmp	r3, r2
 8006fee:	bfb8      	it	lt
 8006ff0:	4613      	movlt	r3, r2
 8006ff2:	6033      	str	r3, [r6, #0]
 8006ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ff8:	4607      	mov	r7, r0
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	b10a      	cbz	r2, 8007002 <_printf_common+0x26>
 8006ffe:	3301      	adds	r3, #1
 8007000:	6033      	str	r3, [r6, #0]
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	0699      	lsls	r1, r3, #26
 8007006:	bf42      	ittt	mi
 8007008:	6833      	ldrmi	r3, [r6, #0]
 800700a:	3302      	addmi	r3, #2
 800700c:	6033      	strmi	r3, [r6, #0]
 800700e:	6825      	ldr	r5, [r4, #0]
 8007010:	f015 0506 	ands.w	r5, r5, #6
 8007014:	d106      	bne.n	8007024 <_printf_common+0x48>
 8007016:	f104 0a19 	add.w	sl, r4, #25
 800701a:	68e3      	ldr	r3, [r4, #12]
 800701c:	6832      	ldr	r2, [r6, #0]
 800701e:	1a9b      	subs	r3, r3, r2
 8007020:	42ab      	cmp	r3, r5
 8007022:	dc26      	bgt.n	8007072 <_printf_common+0x96>
 8007024:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007028:	6822      	ldr	r2, [r4, #0]
 800702a:	3b00      	subs	r3, #0
 800702c:	bf18      	it	ne
 800702e:	2301      	movne	r3, #1
 8007030:	0692      	lsls	r2, r2, #26
 8007032:	d42b      	bmi.n	800708c <_printf_common+0xb0>
 8007034:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007038:	4641      	mov	r1, r8
 800703a:	4638      	mov	r0, r7
 800703c:	47c8      	blx	r9
 800703e:	3001      	adds	r0, #1
 8007040:	d01e      	beq.n	8007080 <_printf_common+0xa4>
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	6922      	ldr	r2, [r4, #16]
 8007046:	f003 0306 	and.w	r3, r3, #6
 800704a:	2b04      	cmp	r3, #4
 800704c:	bf02      	ittt	eq
 800704e:	68e5      	ldreq	r5, [r4, #12]
 8007050:	6833      	ldreq	r3, [r6, #0]
 8007052:	1aed      	subeq	r5, r5, r3
 8007054:	68a3      	ldr	r3, [r4, #8]
 8007056:	bf0c      	ite	eq
 8007058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800705c:	2500      	movne	r5, #0
 800705e:	4293      	cmp	r3, r2
 8007060:	bfc4      	itt	gt
 8007062:	1a9b      	subgt	r3, r3, r2
 8007064:	18ed      	addgt	r5, r5, r3
 8007066:	2600      	movs	r6, #0
 8007068:	341a      	adds	r4, #26
 800706a:	42b5      	cmp	r5, r6
 800706c:	d11a      	bne.n	80070a4 <_printf_common+0xc8>
 800706e:	2000      	movs	r0, #0
 8007070:	e008      	b.n	8007084 <_printf_common+0xa8>
 8007072:	2301      	movs	r3, #1
 8007074:	4652      	mov	r2, sl
 8007076:	4641      	mov	r1, r8
 8007078:	4638      	mov	r0, r7
 800707a:	47c8      	blx	r9
 800707c:	3001      	adds	r0, #1
 800707e:	d103      	bne.n	8007088 <_printf_common+0xac>
 8007080:	f04f 30ff 	mov.w	r0, #4294967295
 8007084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007088:	3501      	adds	r5, #1
 800708a:	e7c6      	b.n	800701a <_printf_common+0x3e>
 800708c:	18e1      	adds	r1, r4, r3
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	2030      	movs	r0, #48	@ 0x30
 8007092:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007096:	4422      	add	r2, r4
 8007098:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800709c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070a0:	3302      	adds	r3, #2
 80070a2:	e7c7      	b.n	8007034 <_printf_common+0x58>
 80070a4:	2301      	movs	r3, #1
 80070a6:	4622      	mov	r2, r4
 80070a8:	4641      	mov	r1, r8
 80070aa:	4638      	mov	r0, r7
 80070ac:	47c8      	blx	r9
 80070ae:	3001      	adds	r0, #1
 80070b0:	d0e6      	beq.n	8007080 <_printf_common+0xa4>
 80070b2:	3601      	adds	r6, #1
 80070b4:	e7d9      	b.n	800706a <_printf_common+0x8e>
	...

080070b8 <_printf_i>:
 80070b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070bc:	7e0f      	ldrb	r7, [r1, #24]
 80070be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070c0:	2f78      	cmp	r7, #120	@ 0x78
 80070c2:	4691      	mov	r9, r2
 80070c4:	4680      	mov	r8, r0
 80070c6:	460c      	mov	r4, r1
 80070c8:	469a      	mov	sl, r3
 80070ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070ce:	d807      	bhi.n	80070e0 <_printf_i+0x28>
 80070d0:	2f62      	cmp	r7, #98	@ 0x62
 80070d2:	d80a      	bhi.n	80070ea <_printf_i+0x32>
 80070d4:	2f00      	cmp	r7, #0
 80070d6:	f000 80d2 	beq.w	800727e <_printf_i+0x1c6>
 80070da:	2f58      	cmp	r7, #88	@ 0x58
 80070dc:	f000 80b9 	beq.w	8007252 <_printf_i+0x19a>
 80070e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070e8:	e03a      	b.n	8007160 <_printf_i+0xa8>
 80070ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070ee:	2b15      	cmp	r3, #21
 80070f0:	d8f6      	bhi.n	80070e0 <_printf_i+0x28>
 80070f2:	a101      	add	r1, pc, #4	@ (adr r1, 80070f8 <_printf_i+0x40>)
 80070f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070f8:	08007151 	.word	0x08007151
 80070fc:	08007165 	.word	0x08007165
 8007100:	080070e1 	.word	0x080070e1
 8007104:	080070e1 	.word	0x080070e1
 8007108:	080070e1 	.word	0x080070e1
 800710c:	080070e1 	.word	0x080070e1
 8007110:	08007165 	.word	0x08007165
 8007114:	080070e1 	.word	0x080070e1
 8007118:	080070e1 	.word	0x080070e1
 800711c:	080070e1 	.word	0x080070e1
 8007120:	080070e1 	.word	0x080070e1
 8007124:	08007265 	.word	0x08007265
 8007128:	0800718f 	.word	0x0800718f
 800712c:	0800721f 	.word	0x0800721f
 8007130:	080070e1 	.word	0x080070e1
 8007134:	080070e1 	.word	0x080070e1
 8007138:	08007287 	.word	0x08007287
 800713c:	080070e1 	.word	0x080070e1
 8007140:	0800718f 	.word	0x0800718f
 8007144:	080070e1 	.word	0x080070e1
 8007148:	080070e1 	.word	0x080070e1
 800714c:	08007227 	.word	0x08007227
 8007150:	6833      	ldr	r3, [r6, #0]
 8007152:	1d1a      	adds	r2, r3, #4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6032      	str	r2, [r6, #0]
 8007158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800715c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007160:	2301      	movs	r3, #1
 8007162:	e09d      	b.n	80072a0 <_printf_i+0x1e8>
 8007164:	6833      	ldr	r3, [r6, #0]
 8007166:	6820      	ldr	r0, [r4, #0]
 8007168:	1d19      	adds	r1, r3, #4
 800716a:	6031      	str	r1, [r6, #0]
 800716c:	0606      	lsls	r6, r0, #24
 800716e:	d501      	bpl.n	8007174 <_printf_i+0xbc>
 8007170:	681d      	ldr	r5, [r3, #0]
 8007172:	e003      	b.n	800717c <_printf_i+0xc4>
 8007174:	0645      	lsls	r5, r0, #25
 8007176:	d5fb      	bpl.n	8007170 <_printf_i+0xb8>
 8007178:	f9b3 5000 	ldrsh.w	r5, [r3]
 800717c:	2d00      	cmp	r5, #0
 800717e:	da03      	bge.n	8007188 <_printf_i+0xd0>
 8007180:	232d      	movs	r3, #45	@ 0x2d
 8007182:	426d      	negs	r5, r5
 8007184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007188:	4859      	ldr	r0, [pc, #356]	@ (80072f0 <_printf_i+0x238>)
 800718a:	230a      	movs	r3, #10
 800718c:	e011      	b.n	80071b2 <_printf_i+0xfa>
 800718e:	6821      	ldr	r1, [r4, #0]
 8007190:	6833      	ldr	r3, [r6, #0]
 8007192:	0608      	lsls	r0, r1, #24
 8007194:	f853 5b04 	ldr.w	r5, [r3], #4
 8007198:	d402      	bmi.n	80071a0 <_printf_i+0xe8>
 800719a:	0649      	lsls	r1, r1, #25
 800719c:	bf48      	it	mi
 800719e:	b2ad      	uxthmi	r5, r5
 80071a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80071a2:	4853      	ldr	r0, [pc, #332]	@ (80072f0 <_printf_i+0x238>)
 80071a4:	6033      	str	r3, [r6, #0]
 80071a6:	bf14      	ite	ne
 80071a8:	230a      	movne	r3, #10
 80071aa:	2308      	moveq	r3, #8
 80071ac:	2100      	movs	r1, #0
 80071ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071b2:	6866      	ldr	r6, [r4, #4]
 80071b4:	60a6      	str	r6, [r4, #8]
 80071b6:	2e00      	cmp	r6, #0
 80071b8:	bfa2      	ittt	ge
 80071ba:	6821      	ldrge	r1, [r4, #0]
 80071bc:	f021 0104 	bicge.w	r1, r1, #4
 80071c0:	6021      	strge	r1, [r4, #0]
 80071c2:	b90d      	cbnz	r5, 80071c8 <_printf_i+0x110>
 80071c4:	2e00      	cmp	r6, #0
 80071c6:	d04b      	beq.n	8007260 <_printf_i+0x1a8>
 80071c8:	4616      	mov	r6, r2
 80071ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80071ce:	fb03 5711 	mls	r7, r3, r1, r5
 80071d2:	5dc7      	ldrb	r7, [r0, r7]
 80071d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071d8:	462f      	mov	r7, r5
 80071da:	42bb      	cmp	r3, r7
 80071dc:	460d      	mov	r5, r1
 80071de:	d9f4      	bls.n	80071ca <_printf_i+0x112>
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d10b      	bne.n	80071fc <_printf_i+0x144>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	07df      	lsls	r7, r3, #31
 80071e8:	d508      	bpl.n	80071fc <_printf_i+0x144>
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	6861      	ldr	r1, [r4, #4]
 80071ee:	4299      	cmp	r1, r3
 80071f0:	bfde      	ittt	le
 80071f2:	2330      	movle	r3, #48	@ 0x30
 80071f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071fc:	1b92      	subs	r2, r2, r6
 80071fe:	6122      	str	r2, [r4, #16]
 8007200:	f8cd a000 	str.w	sl, [sp]
 8007204:	464b      	mov	r3, r9
 8007206:	aa03      	add	r2, sp, #12
 8007208:	4621      	mov	r1, r4
 800720a:	4640      	mov	r0, r8
 800720c:	f7ff fee6 	bl	8006fdc <_printf_common>
 8007210:	3001      	adds	r0, #1
 8007212:	d14a      	bne.n	80072aa <_printf_i+0x1f2>
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	b004      	add	sp, #16
 800721a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	f043 0320 	orr.w	r3, r3, #32
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	4833      	ldr	r0, [pc, #204]	@ (80072f4 <_printf_i+0x23c>)
 8007228:	2778      	movs	r7, #120	@ 0x78
 800722a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	6831      	ldr	r1, [r6, #0]
 8007232:	061f      	lsls	r7, r3, #24
 8007234:	f851 5b04 	ldr.w	r5, [r1], #4
 8007238:	d402      	bmi.n	8007240 <_printf_i+0x188>
 800723a:	065f      	lsls	r7, r3, #25
 800723c:	bf48      	it	mi
 800723e:	b2ad      	uxthmi	r5, r5
 8007240:	6031      	str	r1, [r6, #0]
 8007242:	07d9      	lsls	r1, r3, #31
 8007244:	bf44      	itt	mi
 8007246:	f043 0320 	orrmi.w	r3, r3, #32
 800724a:	6023      	strmi	r3, [r4, #0]
 800724c:	b11d      	cbz	r5, 8007256 <_printf_i+0x19e>
 800724e:	2310      	movs	r3, #16
 8007250:	e7ac      	b.n	80071ac <_printf_i+0xf4>
 8007252:	4827      	ldr	r0, [pc, #156]	@ (80072f0 <_printf_i+0x238>)
 8007254:	e7e9      	b.n	800722a <_printf_i+0x172>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	f023 0320 	bic.w	r3, r3, #32
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	e7f6      	b.n	800724e <_printf_i+0x196>
 8007260:	4616      	mov	r6, r2
 8007262:	e7bd      	b.n	80071e0 <_printf_i+0x128>
 8007264:	6833      	ldr	r3, [r6, #0]
 8007266:	6825      	ldr	r5, [r4, #0]
 8007268:	6961      	ldr	r1, [r4, #20]
 800726a:	1d18      	adds	r0, r3, #4
 800726c:	6030      	str	r0, [r6, #0]
 800726e:	062e      	lsls	r6, r5, #24
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	d501      	bpl.n	8007278 <_printf_i+0x1c0>
 8007274:	6019      	str	r1, [r3, #0]
 8007276:	e002      	b.n	800727e <_printf_i+0x1c6>
 8007278:	0668      	lsls	r0, r5, #25
 800727a:	d5fb      	bpl.n	8007274 <_printf_i+0x1bc>
 800727c:	8019      	strh	r1, [r3, #0]
 800727e:	2300      	movs	r3, #0
 8007280:	6123      	str	r3, [r4, #16]
 8007282:	4616      	mov	r6, r2
 8007284:	e7bc      	b.n	8007200 <_printf_i+0x148>
 8007286:	6833      	ldr	r3, [r6, #0]
 8007288:	1d1a      	adds	r2, r3, #4
 800728a:	6032      	str	r2, [r6, #0]
 800728c:	681e      	ldr	r6, [r3, #0]
 800728e:	6862      	ldr	r2, [r4, #4]
 8007290:	2100      	movs	r1, #0
 8007292:	4630      	mov	r0, r6
 8007294:	f7f8 ff9c 	bl	80001d0 <memchr>
 8007298:	b108      	cbz	r0, 800729e <_printf_i+0x1e6>
 800729a:	1b80      	subs	r0, r0, r6
 800729c:	6060      	str	r0, [r4, #4]
 800729e:	6863      	ldr	r3, [r4, #4]
 80072a0:	6123      	str	r3, [r4, #16]
 80072a2:	2300      	movs	r3, #0
 80072a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072a8:	e7aa      	b.n	8007200 <_printf_i+0x148>
 80072aa:	6923      	ldr	r3, [r4, #16]
 80072ac:	4632      	mov	r2, r6
 80072ae:	4649      	mov	r1, r9
 80072b0:	4640      	mov	r0, r8
 80072b2:	47d0      	blx	sl
 80072b4:	3001      	adds	r0, #1
 80072b6:	d0ad      	beq.n	8007214 <_printf_i+0x15c>
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	079b      	lsls	r3, r3, #30
 80072bc:	d413      	bmi.n	80072e6 <_printf_i+0x22e>
 80072be:	68e0      	ldr	r0, [r4, #12]
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	4298      	cmp	r0, r3
 80072c4:	bfb8      	it	lt
 80072c6:	4618      	movlt	r0, r3
 80072c8:	e7a6      	b.n	8007218 <_printf_i+0x160>
 80072ca:	2301      	movs	r3, #1
 80072cc:	4632      	mov	r2, r6
 80072ce:	4649      	mov	r1, r9
 80072d0:	4640      	mov	r0, r8
 80072d2:	47d0      	blx	sl
 80072d4:	3001      	adds	r0, #1
 80072d6:	d09d      	beq.n	8007214 <_printf_i+0x15c>
 80072d8:	3501      	adds	r5, #1
 80072da:	68e3      	ldr	r3, [r4, #12]
 80072dc:	9903      	ldr	r1, [sp, #12]
 80072de:	1a5b      	subs	r3, r3, r1
 80072e0:	42ab      	cmp	r3, r5
 80072e2:	dcf2      	bgt.n	80072ca <_printf_i+0x212>
 80072e4:	e7eb      	b.n	80072be <_printf_i+0x206>
 80072e6:	2500      	movs	r5, #0
 80072e8:	f104 0619 	add.w	r6, r4, #25
 80072ec:	e7f5      	b.n	80072da <_printf_i+0x222>
 80072ee:	bf00      	nop
 80072f0:	080081a9 	.word	0x080081a9
 80072f4:	080081ba 	.word	0x080081ba

080072f8 <__svfiscanf_r>:
 80072f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072fc:	461d      	mov	r5, r3
 80072fe:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8007300:	07df      	lsls	r7, r3, #31
 8007302:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8007306:	4606      	mov	r6, r0
 8007308:	460c      	mov	r4, r1
 800730a:	4691      	mov	r9, r2
 800730c:	d405      	bmi.n	800731a <__svfiscanf_r+0x22>
 800730e:	898b      	ldrh	r3, [r1, #12]
 8007310:	0598      	lsls	r0, r3, #22
 8007312:	d402      	bmi.n	800731a <__svfiscanf_r+0x22>
 8007314:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8007316:	f7ff fc0e 	bl	8006b36 <__retarget_lock_acquire_recursive>
 800731a:	2300      	movs	r3, #0
 800731c:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8007320:	4ba7      	ldr	r3, [pc, #668]	@ (80075c0 <__svfiscanf_r+0x2c8>)
 8007322:	93a0      	str	r3, [sp, #640]	@ 0x280
 8007324:	f10d 0804 	add.w	r8, sp, #4
 8007328:	4ba6      	ldr	r3, [pc, #664]	@ (80075c4 <__svfiscanf_r+0x2cc>)
 800732a:	4fa7      	ldr	r7, [pc, #668]	@ (80075c8 <__svfiscanf_r+0x2d0>)
 800732c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8007330:	93a1      	str	r3, [sp, #644]	@ 0x284
 8007332:	9500      	str	r5, [sp, #0]
 8007334:	f899 3000 	ldrb.w	r3, [r9]
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 816c 	beq.w	8007616 <__svfiscanf_r+0x31e>
 800733e:	5cf9      	ldrb	r1, [r7, r3]
 8007340:	f011 0108 	ands.w	r1, r1, #8
 8007344:	f109 0501 	add.w	r5, r9, #1
 8007348:	d019      	beq.n	800737e <__svfiscanf_r+0x86>
 800734a:	6863      	ldr	r3, [r4, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	dd0f      	ble.n	8007370 <__svfiscanf_r+0x78>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	781a      	ldrb	r2, [r3, #0]
 8007354:	5cba      	ldrb	r2, [r7, r2]
 8007356:	0711      	lsls	r1, r2, #28
 8007358:	d401      	bmi.n	800735e <__svfiscanf_r+0x66>
 800735a:	46a9      	mov	r9, r5
 800735c:	e7ea      	b.n	8007334 <__svfiscanf_r+0x3c>
 800735e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007360:	3201      	adds	r2, #1
 8007362:	9245      	str	r2, [sp, #276]	@ 0x114
 8007364:	6862      	ldr	r2, [r4, #4]
 8007366:	3301      	adds	r3, #1
 8007368:	3a01      	subs	r2, #1
 800736a:	6062      	str	r2, [r4, #4]
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	e7ec      	b.n	800734a <__svfiscanf_r+0x52>
 8007370:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007372:	4621      	mov	r1, r4
 8007374:	4630      	mov	r0, r6
 8007376:	4798      	blx	r3
 8007378:	2800      	cmp	r0, #0
 800737a:	d0e9      	beq.n	8007350 <__svfiscanf_r+0x58>
 800737c:	e7ed      	b.n	800735a <__svfiscanf_r+0x62>
 800737e:	2b25      	cmp	r3, #37	@ 0x25
 8007380:	d012      	beq.n	80073a8 <__svfiscanf_r+0xb0>
 8007382:	4699      	mov	r9, r3
 8007384:	6863      	ldr	r3, [r4, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	f340 8095 	ble.w	80074b6 <__svfiscanf_r+0x1be>
 800738c:	6822      	ldr	r2, [r4, #0]
 800738e:	7813      	ldrb	r3, [r2, #0]
 8007390:	454b      	cmp	r3, r9
 8007392:	f040 8140 	bne.w	8007616 <__svfiscanf_r+0x31e>
 8007396:	6863      	ldr	r3, [r4, #4]
 8007398:	3b01      	subs	r3, #1
 800739a:	6063      	str	r3, [r4, #4]
 800739c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800739e:	3201      	adds	r2, #1
 80073a0:	3301      	adds	r3, #1
 80073a2:	6022      	str	r2, [r4, #0]
 80073a4:	9345      	str	r3, [sp, #276]	@ 0x114
 80073a6:	e7d8      	b.n	800735a <__svfiscanf_r+0x62>
 80073a8:	9141      	str	r1, [sp, #260]	@ 0x104
 80073aa:	9143      	str	r1, [sp, #268]	@ 0x10c
 80073ac:	f899 3001 	ldrb.w	r3, [r9, #1]
 80073b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80073b2:	bf02      	ittt	eq
 80073b4:	2310      	moveq	r3, #16
 80073b6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80073b8:	f109 0502 	addeq.w	r5, r9, #2
 80073bc:	220a      	movs	r2, #10
 80073be:	46a9      	mov	r9, r5
 80073c0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80073c4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80073c8:	2b09      	cmp	r3, #9
 80073ca:	d91f      	bls.n	800740c <__svfiscanf_r+0x114>
 80073cc:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 80075cc <__svfiscanf_r+0x2d4>
 80073d0:	2203      	movs	r2, #3
 80073d2:	4650      	mov	r0, sl
 80073d4:	f7f8 fefc 	bl	80001d0 <memchr>
 80073d8:	b138      	cbz	r0, 80073ea <__svfiscanf_r+0xf2>
 80073da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80073dc:	eba0 000a 	sub.w	r0, r0, sl
 80073e0:	2301      	movs	r3, #1
 80073e2:	4083      	lsls	r3, r0
 80073e4:	4313      	orrs	r3, r2
 80073e6:	9341      	str	r3, [sp, #260]	@ 0x104
 80073e8:	464d      	mov	r5, r9
 80073ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80073ee:	2b78      	cmp	r3, #120	@ 0x78
 80073f0:	d807      	bhi.n	8007402 <__svfiscanf_r+0x10a>
 80073f2:	2b57      	cmp	r3, #87	@ 0x57
 80073f4:	d811      	bhi.n	800741a <__svfiscanf_r+0x122>
 80073f6:	2b25      	cmp	r3, #37	@ 0x25
 80073f8:	d0c3      	beq.n	8007382 <__svfiscanf_r+0x8a>
 80073fa:	d857      	bhi.n	80074ac <__svfiscanf_r+0x1b4>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 80c1 	beq.w	8007584 <__svfiscanf_r+0x28c>
 8007402:	2303      	movs	r3, #3
 8007404:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007406:	230a      	movs	r3, #10
 8007408:	9342      	str	r3, [sp, #264]	@ 0x108
 800740a:	e07e      	b.n	800750a <__svfiscanf_r+0x212>
 800740c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800740e:	fb02 1103 	mla	r1, r2, r3, r1
 8007412:	3930      	subs	r1, #48	@ 0x30
 8007414:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007416:	464d      	mov	r5, r9
 8007418:	e7d1      	b.n	80073be <__svfiscanf_r+0xc6>
 800741a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800741e:	2a20      	cmp	r2, #32
 8007420:	d8ef      	bhi.n	8007402 <__svfiscanf_r+0x10a>
 8007422:	a101      	add	r1, pc, #4	@ (adr r1, 8007428 <__svfiscanf_r+0x130>)
 8007424:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007428:	080074e9 	.word	0x080074e9
 800742c:	08007403 	.word	0x08007403
 8007430:	08007403 	.word	0x08007403
 8007434:	08007543 	.word	0x08007543
 8007438:	08007403 	.word	0x08007403
 800743c:	08007403 	.word	0x08007403
 8007440:	08007403 	.word	0x08007403
 8007444:	08007403 	.word	0x08007403
 8007448:	08007403 	.word	0x08007403
 800744c:	08007403 	.word	0x08007403
 8007450:	08007403 	.word	0x08007403
 8007454:	08007559 	.word	0x08007559
 8007458:	0800753f 	.word	0x0800753f
 800745c:	080074b3 	.word	0x080074b3
 8007460:	080074b3 	.word	0x080074b3
 8007464:	080074b3 	.word	0x080074b3
 8007468:	08007403 	.word	0x08007403
 800746c:	080074fb 	.word	0x080074fb
 8007470:	08007403 	.word	0x08007403
 8007474:	08007403 	.word	0x08007403
 8007478:	08007403 	.word	0x08007403
 800747c:	08007403 	.word	0x08007403
 8007480:	08007569 	.word	0x08007569
 8007484:	08007503 	.word	0x08007503
 8007488:	080074e1 	.word	0x080074e1
 800748c:	08007403 	.word	0x08007403
 8007490:	08007403 	.word	0x08007403
 8007494:	08007565 	.word	0x08007565
 8007498:	08007403 	.word	0x08007403
 800749c:	0800753f 	.word	0x0800753f
 80074a0:	08007403 	.word	0x08007403
 80074a4:	08007403 	.word	0x08007403
 80074a8:	080074e9 	.word	0x080074e9
 80074ac:	3b45      	subs	r3, #69	@ 0x45
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d8a7      	bhi.n	8007402 <__svfiscanf_r+0x10a>
 80074b2:	2305      	movs	r3, #5
 80074b4:	e028      	b.n	8007508 <__svfiscanf_r+0x210>
 80074b6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80074b8:	4621      	mov	r1, r4
 80074ba:	4630      	mov	r0, r6
 80074bc:	4798      	blx	r3
 80074be:	2800      	cmp	r0, #0
 80074c0:	f43f af64 	beq.w	800738c <__svfiscanf_r+0x94>
 80074c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074c6:	07da      	lsls	r2, r3, #31
 80074c8:	f140 809d 	bpl.w	8007606 <__svfiscanf_r+0x30e>
 80074cc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d061      	beq.n	8007596 <__svfiscanf_r+0x29e>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	0659      	lsls	r1, r3, #25
 80074d6:	d45e      	bmi.n	8007596 <__svfiscanf_r+0x29e>
 80074d8:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80074dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80074e2:	f042 0220 	orr.w	r2, r2, #32
 80074e6:	9241      	str	r2, [sp, #260]	@ 0x104
 80074e8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80074ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074ee:	9241      	str	r2, [sp, #260]	@ 0x104
 80074f0:	2210      	movs	r2, #16
 80074f2:	2b6e      	cmp	r3, #110	@ 0x6e
 80074f4:	9242      	str	r2, [sp, #264]	@ 0x108
 80074f6:	d902      	bls.n	80074fe <__svfiscanf_r+0x206>
 80074f8:	e005      	b.n	8007506 <__svfiscanf_r+0x20e>
 80074fa:	2300      	movs	r3, #0
 80074fc:	9342      	str	r3, [sp, #264]	@ 0x108
 80074fe:	2303      	movs	r3, #3
 8007500:	e002      	b.n	8007508 <__svfiscanf_r+0x210>
 8007502:	2308      	movs	r3, #8
 8007504:	9342      	str	r3, [sp, #264]	@ 0x108
 8007506:	2304      	movs	r3, #4
 8007508:	9347      	str	r3, [sp, #284]	@ 0x11c
 800750a:	6863      	ldr	r3, [r4, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	dd45      	ble.n	800759c <__svfiscanf_r+0x2a4>
 8007510:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007512:	0659      	lsls	r1, r3, #25
 8007514:	d404      	bmi.n	8007520 <__svfiscanf_r+0x228>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	781a      	ldrb	r2, [r3, #0]
 800751a:	5cba      	ldrb	r2, [r7, r2]
 800751c:	0712      	lsls	r2, r2, #28
 800751e:	d444      	bmi.n	80075aa <__svfiscanf_r+0x2b2>
 8007520:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8007522:	2b02      	cmp	r3, #2
 8007524:	dc5b      	bgt.n	80075de <__svfiscanf_r+0x2e6>
 8007526:	466b      	mov	r3, sp
 8007528:	4622      	mov	r2, r4
 800752a:	a941      	add	r1, sp, #260	@ 0x104
 800752c:	4630      	mov	r0, r6
 800752e:	f000 f893 	bl	8007658 <_scanf_chars>
 8007532:	2801      	cmp	r0, #1
 8007534:	d06f      	beq.n	8007616 <__svfiscanf_r+0x31e>
 8007536:	2802      	cmp	r0, #2
 8007538:	f47f af0f 	bne.w	800735a <__svfiscanf_r+0x62>
 800753c:	e7c2      	b.n	80074c4 <__svfiscanf_r+0x1cc>
 800753e:	220a      	movs	r2, #10
 8007540:	e7d7      	b.n	80074f2 <__svfiscanf_r+0x1fa>
 8007542:	4629      	mov	r1, r5
 8007544:	4640      	mov	r0, r8
 8007546:	f000 fab9 	bl	8007abc <__sccl>
 800754a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800754c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007550:	9341      	str	r3, [sp, #260]	@ 0x104
 8007552:	4605      	mov	r5, r0
 8007554:	2301      	movs	r3, #1
 8007556:	e7d7      	b.n	8007508 <__svfiscanf_r+0x210>
 8007558:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800755a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800755e:	9341      	str	r3, [sp, #260]	@ 0x104
 8007560:	2300      	movs	r3, #0
 8007562:	e7d1      	b.n	8007508 <__svfiscanf_r+0x210>
 8007564:	2302      	movs	r3, #2
 8007566:	e7cf      	b.n	8007508 <__svfiscanf_r+0x210>
 8007568:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800756a:	06c3      	lsls	r3, r0, #27
 800756c:	f53f aef5 	bmi.w	800735a <__svfiscanf_r+0x62>
 8007570:	9b00      	ldr	r3, [sp, #0]
 8007572:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007574:	1d19      	adds	r1, r3, #4
 8007576:	9100      	str	r1, [sp, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	07c0      	lsls	r0, r0, #31
 800757c:	bf4c      	ite	mi
 800757e:	801a      	strhmi	r2, [r3, #0]
 8007580:	601a      	strpl	r2, [r3, #0]
 8007582:	e6ea      	b.n	800735a <__svfiscanf_r+0x62>
 8007584:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007586:	07de      	lsls	r6, r3, #31
 8007588:	d405      	bmi.n	8007596 <__svfiscanf_r+0x29e>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	059d      	lsls	r5, r3, #22
 800758e:	d402      	bmi.n	8007596 <__svfiscanf_r+0x29e>
 8007590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007592:	f7ff fad1 	bl	8006b38 <__retarget_lock_release_recursive>
 8007596:	f04f 30ff 	mov.w	r0, #4294967295
 800759a:	e79d      	b.n	80074d8 <__svfiscanf_r+0x1e0>
 800759c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800759e:	4621      	mov	r1, r4
 80075a0:	4630      	mov	r0, r6
 80075a2:	4798      	blx	r3
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d0b3      	beq.n	8007510 <__svfiscanf_r+0x218>
 80075a8:	e78c      	b.n	80074c4 <__svfiscanf_r+0x1cc>
 80075aa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80075ac:	3201      	adds	r2, #1
 80075ae:	9245      	str	r2, [sp, #276]	@ 0x114
 80075b0:	6862      	ldr	r2, [r4, #4]
 80075b2:	3a01      	subs	r2, #1
 80075b4:	2a00      	cmp	r2, #0
 80075b6:	6062      	str	r2, [r4, #4]
 80075b8:	dd0a      	ble.n	80075d0 <__svfiscanf_r+0x2d8>
 80075ba:	3301      	adds	r3, #1
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	e7aa      	b.n	8007516 <__svfiscanf_r+0x21e>
 80075c0:	08007ba3 	.word	0x08007ba3
 80075c4:	080079d5 	.word	0x080079d5
 80075c8:	080081e7 	.word	0x080081e7
 80075cc:	0800819e 	.word	0x0800819e
 80075d0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80075d2:	4621      	mov	r1, r4
 80075d4:	4630      	mov	r0, r6
 80075d6:	4798      	blx	r3
 80075d8:	2800      	cmp	r0, #0
 80075da:	d09c      	beq.n	8007516 <__svfiscanf_r+0x21e>
 80075dc:	e772      	b.n	80074c4 <__svfiscanf_r+0x1cc>
 80075de:	2b04      	cmp	r3, #4
 80075e0:	dc06      	bgt.n	80075f0 <__svfiscanf_r+0x2f8>
 80075e2:	466b      	mov	r3, sp
 80075e4:	4622      	mov	r2, r4
 80075e6:	a941      	add	r1, sp, #260	@ 0x104
 80075e8:	4630      	mov	r0, r6
 80075ea:	f000 f88f 	bl	800770c <_scanf_i>
 80075ee:	e7a0      	b.n	8007532 <__svfiscanf_r+0x23a>
 80075f0:	4b0e      	ldr	r3, [pc, #56]	@ (800762c <__svfiscanf_r+0x334>)
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f43f aeb1 	beq.w	800735a <__svfiscanf_r+0x62>
 80075f8:	466b      	mov	r3, sp
 80075fa:	4622      	mov	r2, r4
 80075fc:	a941      	add	r1, sp, #260	@ 0x104
 80075fe:	4630      	mov	r0, r6
 8007600:	f3af 8000 	nop.w
 8007604:	e795      	b.n	8007532 <__svfiscanf_r+0x23a>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	0598      	lsls	r0, r3, #22
 800760a:	f53f af5f 	bmi.w	80074cc <__svfiscanf_r+0x1d4>
 800760e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007610:	f7ff fa92 	bl	8006b38 <__retarget_lock_release_recursive>
 8007614:	e75a      	b.n	80074cc <__svfiscanf_r+0x1d4>
 8007616:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007618:	07da      	lsls	r2, r3, #31
 800761a:	d405      	bmi.n	8007628 <__svfiscanf_r+0x330>
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	059b      	lsls	r3, r3, #22
 8007620:	d402      	bmi.n	8007628 <__svfiscanf_r+0x330>
 8007622:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007624:	f7ff fa88 	bl	8006b38 <__retarget_lock_release_recursive>
 8007628:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800762a:	e755      	b.n	80074d8 <__svfiscanf_r+0x1e0>
 800762c:	00000000 	.word	0x00000000

08007630 <_vfiscanf_r>:
 8007630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007634:	460d      	mov	r5, r1
 8007636:	4616      	mov	r6, r2
 8007638:	461f      	mov	r7, r3
 800763a:	4604      	mov	r4, r0
 800763c:	b118      	cbz	r0, 8007646 <_vfiscanf_r+0x16>
 800763e:	6a03      	ldr	r3, [r0, #32]
 8007640:	b90b      	cbnz	r3, 8007646 <_vfiscanf_r+0x16>
 8007642:	f7ff f8ad 	bl	80067a0 <__sinit>
 8007646:	463b      	mov	r3, r7
 8007648:	4632      	mov	r2, r6
 800764a:	4629      	mov	r1, r5
 800764c:	4620      	mov	r0, r4
 800764e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007652:	f7ff be51 	b.w	80072f8 <__svfiscanf_r>
	...

08007658 <_scanf_chars>:
 8007658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800765c:	4615      	mov	r5, r2
 800765e:	688a      	ldr	r2, [r1, #8]
 8007660:	4680      	mov	r8, r0
 8007662:	460c      	mov	r4, r1
 8007664:	b932      	cbnz	r2, 8007674 <_scanf_chars+0x1c>
 8007666:	698a      	ldr	r2, [r1, #24]
 8007668:	2a00      	cmp	r2, #0
 800766a:	bf14      	ite	ne
 800766c:	f04f 32ff 	movne.w	r2, #4294967295
 8007670:	2201      	moveq	r2, #1
 8007672:	608a      	str	r2, [r1, #8]
 8007674:	6822      	ldr	r2, [r4, #0]
 8007676:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8007708 <_scanf_chars+0xb0>
 800767a:	06d1      	lsls	r1, r2, #27
 800767c:	bf5f      	itttt	pl
 800767e:	681a      	ldrpl	r2, [r3, #0]
 8007680:	1d11      	addpl	r1, r2, #4
 8007682:	6019      	strpl	r1, [r3, #0]
 8007684:	6816      	ldrpl	r6, [r2, #0]
 8007686:	2700      	movs	r7, #0
 8007688:	69a0      	ldr	r0, [r4, #24]
 800768a:	b188      	cbz	r0, 80076b0 <_scanf_chars+0x58>
 800768c:	2801      	cmp	r0, #1
 800768e:	d107      	bne.n	80076a0 <_scanf_chars+0x48>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	781a      	ldrb	r2, [r3, #0]
 8007694:	6963      	ldr	r3, [r4, #20]
 8007696:	5c9b      	ldrb	r3, [r3, r2]
 8007698:	b953      	cbnz	r3, 80076b0 <_scanf_chars+0x58>
 800769a:	2f00      	cmp	r7, #0
 800769c:	d031      	beq.n	8007702 <_scanf_chars+0xaa>
 800769e:	e022      	b.n	80076e6 <_scanf_chars+0x8e>
 80076a0:	2802      	cmp	r0, #2
 80076a2:	d120      	bne.n	80076e6 <_scanf_chars+0x8e>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80076ac:	071b      	lsls	r3, r3, #28
 80076ae:	d41a      	bmi.n	80076e6 <_scanf_chars+0x8e>
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	06da      	lsls	r2, r3, #27
 80076b4:	bf5e      	ittt	pl
 80076b6:	682b      	ldrpl	r3, [r5, #0]
 80076b8:	781b      	ldrbpl	r3, [r3, #0]
 80076ba:	f806 3b01 	strbpl.w	r3, [r6], #1
 80076be:	682a      	ldr	r2, [r5, #0]
 80076c0:	686b      	ldr	r3, [r5, #4]
 80076c2:	3201      	adds	r2, #1
 80076c4:	602a      	str	r2, [r5, #0]
 80076c6:	68a2      	ldr	r2, [r4, #8]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	3a01      	subs	r2, #1
 80076cc:	606b      	str	r3, [r5, #4]
 80076ce:	3701      	adds	r7, #1
 80076d0:	60a2      	str	r2, [r4, #8]
 80076d2:	b142      	cbz	r2, 80076e6 <_scanf_chars+0x8e>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	dcd7      	bgt.n	8007688 <_scanf_chars+0x30>
 80076d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80076dc:	4629      	mov	r1, r5
 80076de:	4640      	mov	r0, r8
 80076e0:	4798      	blx	r3
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d0d0      	beq.n	8007688 <_scanf_chars+0x30>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	f013 0310 	ands.w	r3, r3, #16
 80076ec:	d105      	bne.n	80076fa <_scanf_chars+0xa2>
 80076ee:	68e2      	ldr	r2, [r4, #12]
 80076f0:	3201      	adds	r2, #1
 80076f2:	60e2      	str	r2, [r4, #12]
 80076f4:	69a2      	ldr	r2, [r4, #24]
 80076f6:	b102      	cbz	r2, 80076fa <_scanf_chars+0xa2>
 80076f8:	7033      	strb	r3, [r6, #0]
 80076fa:	6923      	ldr	r3, [r4, #16]
 80076fc:	443b      	add	r3, r7
 80076fe:	6123      	str	r3, [r4, #16]
 8007700:	2000      	movs	r0, #0
 8007702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007706:	bf00      	nop
 8007708:	080081e7 	.word	0x080081e7

0800770c <_scanf_i>:
 800770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	4698      	mov	r8, r3
 8007712:	4b74      	ldr	r3, [pc, #464]	@ (80078e4 <_scanf_i+0x1d8>)
 8007714:	460c      	mov	r4, r1
 8007716:	4682      	mov	sl, r0
 8007718:	4616      	mov	r6, r2
 800771a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800771e:	b087      	sub	sp, #28
 8007720:	ab03      	add	r3, sp, #12
 8007722:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007726:	4b70      	ldr	r3, [pc, #448]	@ (80078e8 <_scanf_i+0x1dc>)
 8007728:	69a1      	ldr	r1, [r4, #24]
 800772a:	4a70      	ldr	r2, [pc, #448]	@ (80078ec <_scanf_i+0x1e0>)
 800772c:	2903      	cmp	r1, #3
 800772e:	bf08      	it	eq
 8007730:	461a      	moveq	r2, r3
 8007732:	68a3      	ldr	r3, [r4, #8]
 8007734:	9201      	str	r2, [sp, #4]
 8007736:	1e5a      	subs	r2, r3, #1
 8007738:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800773c:	bf88      	it	hi
 800773e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007742:	4627      	mov	r7, r4
 8007744:	bf82      	ittt	hi
 8007746:	eb03 0905 	addhi.w	r9, r3, r5
 800774a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800774e:	60a3      	strhi	r3, [r4, #8]
 8007750:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007754:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007758:	bf98      	it	ls
 800775a:	f04f 0900 	movls.w	r9, #0
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	463d      	mov	r5, r7
 8007762:	f04f 0b00 	mov.w	fp, #0
 8007766:	6831      	ldr	r1, [r6, #0]
 8007768:	ab03      	add	r3, sp, #12
 800776a:	7809      	ldrb	r1, [r1, #0]
 800776c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007770:	2202      	movs	r2, #2
 8007772:	f7f8 fd2d 	bl	80001d0 <memchr>
 8007776:	b328      	cbz	r0, 80077c4 <_scanf_i+0xb8>
 8007778:	f1bb 0f01 	cmp.w	fp, #1
 800777c:	d159      	bne.n	8007832 <_scanf_i+0x126>
 800777e:	6862      	ldr	r2, [r4, #4]
 8007780:	b92a      	cbnz	r2, 800778e <_scanf_i+0x82>
 8007782:	6822      	ldr	r2, [r4, #0]
 8007784:	2108      	movs	r1, #8
 8007786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800778a:	6061      	str	r1, [r4, #4]
 800778c:	6022      	str	r2, [r4, #0]
 800778e:	6822      	ldr	r2, [r4, #0]
 8007790:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007794:	6022      	str	r2, [r4, #0]
 8007796:	68a2      	ldr	r2, [r4, #8]
 8007798:	1e51      	subs	r1, r2, #1
 800779a:	60a1      	str	r1, [r4, #8]
 800779c:	b192      	cbz	r2, 80077c4 <_scanf_i+0xb8>
 800779e:	6832      	ldr	r2, [r6, #0]
 80077a0:	1c51      	adds	r1, r2, #1
 80077a2:	6031      	str	r1, [r6, #0]
 80077a4:	7812      	ldrb	r2, [r2, #0]
 80077a6:	f805 2b01 	strb.w	r2, [r5], #1
 80077aa:	6872      	ldr	r2, [r6, #4]
 80077ac:	3a01      	subs	r2, #1
 80077ae:	2a00      	cmp	r2, #0
 80077b0:	6072      	str	r2, [r6, #4]
 80077b2:	dc07      	bgt.n	80077c4 <_scanf_i+0xb8>
 80077b4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80077b8:	4631      	mov	r1, r6
 80077ba:	4650      	mov	r0, sl
 80077bc:	4790      	blx	r2
 80077be:	2800      	cmp	r0, #0
 80077c0:	f040 8085 	bne.w	80078ce <_scanf_i+0x1c2>
 80077c4:	f10b 0b01 	add.w	fp, fp, #1
 80077c8:	f1bb 0f03 	cmp.w	fp, #3
 80077cc:	d1cb      	bne.n	8007766 <_scanf_i+0x5a>
 80077ce:	6863      	ldr	r3, [r4, #4]
 80077d0:	b90b      	cbnz	r3, 80077d6 <_scanf_i+0xca>
 80077d2:	230a      	movs	r3, #10
 80077d4:	6063      	str	r3, [r4, #4]
 80077d6:	6863      	ldr	r3, [r4, #4]
 80077d8:	4945      	ldr	r1, [pc, #276]	@ (80078f0 <_scanf_i+0x1e4>)
 80077da:	6960      	ldr	r0, [r4, #20]
 80077dc:	1ac9      	subs	r1, r1, r3
 80077de:	f000 f96d 	bl	8007abc <__sccl>
 80077e2:	f04f 0b00 	mov.w	fp, #0
 80077e6:	68a3      	ldr	r3, [r4, #8]
 80077e8:	6822      	ldr	r2, [r4, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d03d      	beq.n	800786a <_scanf_i+0x15e>
 80077ee:	6831      	ldr	r1, [r6, #0]
 80077f0:	6960      	ldr	r0, [r4, #20]
 80077f2:	f891 c000 	ldrb.w	ip, [r1]
 80077f6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d035      	beq.n	800786a <_scanf_i+0x15e>
 80077fe:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007802:	d124      	bne.n	800784e <_scanf_i+0x142>
 8007804:	0510      	lsls	r0, r2, #20
 8007806:	d522      	bpl.n	800784e <_scanf_i+0x142>
 8007808:	f10b 0b01 	add.w	fp, fp, #1
 800780c:	f1b9 0f00 	cmp.w	r9, #0
 8007810:	d003      	beq.n	800781a <_scanf_i+0x10e>
 8007812:	3301      	adds	r3, #1
 8007814:	f109 39ff 	add.w	r9, r9, #4294967295
 8007818:	60a3      	str	r3, [r4, #8]
 800781a:	6873      	ldr	r3, [r6, #4]
 800781c:	3b01      	subs	r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	6073      	str	r3, [r6, #4]
 8007822:	dd1b      	ble.n	800785c <_scanf_i+0x150>
 8007824:	6833      	ldr	r3, [r6, #0]
 8007826:	3301      	adds	r3, #1
 8007828:	6033      	str	r3, [r6, #0]
 800782a:	68a3      	ldr	r3, [r4, #8]
 800782c:	3b01      	subs	r3, #1
 800782e:	60a3      	str	r3, [r4, #8]
 8007830:	e7d9      	b.n	80077e6 <_scanf_i+0xda>
 8007832:	f1bb 0f02 	cmp.w	fp, #2
 8007836:	d1ae      	bne.n	8007796 <_scanf_i+0x8a>
 8007838:	6822      	ldr	r2, [r4, #0]
 800783a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800783e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007842:	d1bf      	bne.n	80077c4 <_scanf_i+0xb8>
 8007844:	2110      	movs	r1, #16
 8007846:	6061      	str	r1, [r4, #4]
 8007848:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800784c:	e7a2      	b.n	8007794 <_scanf_i+0x88>
 800784e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007852:	6022      	str	r2, [r4, #0]
 8007854:	780b      	ldrb	r3, [r1, #0]
 8007856:	f805 3b01 	strb.w	r3, [r5], #1
 800785a:	e7de      	b.n	800781a <_scanf_i+0x10e>
 800785c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007860:	4631      	mov	r1, r6
 8007862:	4650      	mov	r0, sl
 8007864:	4798      	blx	r3
 8007866:	2800      	cmp	r0, #0
 8007868:	d0df      	beq.n	800782a <_scanf_i+0x11e>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	05d9      	lsls	r1, r3, #23
 800786e:	d50d      	bpl.n	800788c <_scanf_i+0x180>
 8007870:	42bd      	cmp	r5, r7
 8007872:	d909      	bls.n	8007888 <_scanf_i+0x17c>
 8007874:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007878:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800787c:	4632      	mov	r2, r6
 800787e:	4650      	mov	r0, sl
 8007880:	4798      	blx	r3
 8007882:	f105 39ff 	add.w	r9, r5, #4294967295
 8007886:	464d      	mov	r5, r9
 8007888:	42bd      	cmp	r5, r7
 800788a:	d028      	beq.n	80078de <_scanf_i+0x1d2>
 800788c:	6822      	ldr	r2, [r4, #0]
 800788e:	f012 0210 	ands.w	r2, r2, #16
 8007892:	d113      	bne.n	80078bc <_scanf_i+0x1b0>
 8007894:	702a      	strb	r2, [r5, #0]
 8007896:	6863      	ldr	r3, [r4, #4]
 8007898:	9e01      	ldr	r6, [sp, #4]
 800789a:	4639      	mov	r1, r7
 800789c:	4650      	mov	r0, sl
 800789e:	47b0      	blx	r6
 80078a0:	f8d8 3000 	ldr.w	r3, [r8]
 80078a4:	6821      	ldr	r1, [r4, #0]
 80078a6:	1d1a      	adds	r2, r3, #4
 80078a8:	f8c8 2000 	str.w	r2, [r8]
 80078ac:	f011 0f20 	tst.w	r1, #32
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	d00f      	beq.n	80078d4 <_scanf_i+0x1c8>
 80078b4:	6018      	str	r0, [r3, #0]
 80078b6:	68e3      	ldr	r3, [r4, #12]
 80078b8:	3301      	adds	r3, #1
 80078ba:	60e3      	str	r3, [r4, #12]
 80078bc:	6923      	ldr	r3, [r4, #16]
 80078be:	1bed      	subs	r5, r5, r7
 80078c0:	445d      	add	r5, fp
 80078c2:	442b      	add	r3, r5
 80078c4:	6123      	str	r3, [r4, #16]
 80078c6:	2000      	movs	r0, #0
 80078c8:	b007      	add	sp, #28
 80078ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ce:	f04f 0b00 	mov.w	fp, #0
 80078d2:	e7ca      	b.n	800786a <_scanf_i+0x15e>
 80078d4:	07ca      	lsls	r2, r1, #31
 80078d6:	bf4c      	ite	mi
 80078d8:	8018      	strhmi	r0, [r3, #0]
 80078da:	6018      	strpl	r0, [r3, #0]
 80078dc:	e7eb      	b.n	80078b6 <_scanf_i+0x1aa>
 80078de:	2001      	movs	r0, #1
 80078e0:	e7f2      	b.n	80078c8 <_scanf_i+0x1bc>
 80078e2:	bf00      	nop
 80078e4:	080080fc 	.word	0x080080fc
 80078e8:	08007f7d 	.word	0x08007f7d
 80078ec:	0800805d 	.word	0x0800805d
 80078f0:	080081db 	.word	0x080081db

080078f4 <__swhatbuf_r>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	460c      	mov	r4, r1
 80078f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fc:	2900      	cmp	r1, #0
 80078fe:	b096      	sub	sp, #88	@ 0x58
 8007900:	4615      	mov	r5, r2
 8007902:	461e      	mov	r6, r3
 8007904:	da0d      	bge.n	8007922 <__swhatbuf_r+0x2e>
 8007906:	89a3      	ldrh	r3, [r4, #12]
 8007908:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800790c:	f04f 0100 	mov.w	r1, #0
 8007910:	bf14      	ite	ne
 8007912:	2340      	movne	r3, #64	@ 0x40
 8007914:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007918:	2000      	movs	r0, #0
 800791a:	6031      	str	r1, [r6, #0]
 800791c:	602b      	str	r3, [r5, #0]
 800791e:	b016      	add	sp, #88	@ 0x58
 8007920:	bd70      	pop	{r4, r5, r6, pc}
 8007922:	466a      	mov	r2, sp
 8007924:	f000 fa50 	bl	8007dc8 <_fstat_r>
 8007928:	2800      	cmp	r0, #0
 800792a:	dbec      	blt.n	8007906 <__swhatbuf_r+0x12>
 800792c:	9901      	ldr	r1, [sp, #4]
 800792e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007932:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007936:	4259      	negs	r1, r3
 8007938:	4159      	adcs	r1, r3
 800793a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800793e:	e7eb      	b.n	8007918 <__swhatbuf_r+0x24>

08007940 <__smakebuf_r>:
 8007940:	898b      	ldrh	r3, [r1, #12]
 8007942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007944:	079d      	lsls	r5, r3, #30
 8007946:	4606      	mov	r6, r0
 8007948:	460c      	mov	r4, r1
 800794a:	d507      	bpl.n	800795c <__smakebuf_r+0x1c>
 800794c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	6123      	str	r3, [r4, #16]
 8007954:	2301      	movs	r3, #1
 8007956:	6163      	str	r3, [r4, #20]
 8007958:	b003      	add	sp, #12
 800795a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800795c:	ab01      	add	r3, sp, #4
 800795e:	466a      	mov	r2, sp
 8007960:	f7ff ffc8 	bl	80078f4 <__swhatbuf_r>
 8007964:	9f00      	ldr	r7, [sp, #0]
 8007966:	4605      	mov	r5, r0
 8007968:	4639      	mov	r1, r7
 800796a:	4630      	mov	r0, r6
 800796c:	f7ff f968 	bl	8006c40 <_malloc_r>
 8007970:	b948      	cbnz	r0, 8007986 <__smakebuf_r+0x46>
 8007972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007976:	059a      	lsls	r2, r3, #22
 8007978:	d4ee      	bmi.n	8007958 <__smakebuf_r+0x18>
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	f043 0302 	orr.w	r3, r3, #2
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	e7e2      	b.n	800794c <__smakebuf_r+0xc>
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	6020      	str	r0, [r4, #0]
 800798a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	9b01      	ldr	r3, [sp, #4]
 8007992:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007996:	b15b      	cbz	r3, 80079b0 <__smakebuf_r+0x70>
 8007998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800799c:	4630      	mov	r0, r6
 800799e:	f000 fa25 	bl	8007dec <_isatty_r>
 80079a2:	b128      	cbz	r0, 80079b0 <__smakebuf_r+0x70>
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	f023 0303 	bic.w	r3, r3, #3
 80079aa:	f043 0301 	orr.w	r3, r3, #1
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	431d      	orrs	r5, r3
 80079b4:	81a5      	strh	r5, [r4, #12]
 80079b6:	e7cf      	b.n	8007958 <__smakebuf_r+0x18>

080079b8 <lflush>:
 80079b8:	898b      	ldrh	r3, [r1, #12]
 80079ba:	f003 0309 	and.w	r3, r3, #9
 80079be:	2b09      	cmp	r3, #9
 80079c0:	d103      	bne.n	80079ca <lflush+0x12>
 80079c2:	4b03      	ldr	r3, [pc, #12]	@ (80079d0 <lflush+0x18>)
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	f7fe be23 	b.w	8006610 <_fflush_r>
 80079ca:	2000      	movs	r0, #0
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	2000001c 	.word	0x2000001c

080079d4 <__srefill_r>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	460c      	mov	r4, r1
 80079d8:	4605      	mov	r5, r0
 80079da:	b118      	cbz	r0, 80079e4 <__srefill_r+0x10>
 80079dc:	6a03      	ldr	r3, [r0, #32]
 80079de:	b90b      	cbnz	r3, 80079e4 <__srefill_r+0x10>
 80079e0:	f7fe fede 	bl	80067a0 <__sinit>
 80079e4:	2300      	movs	r3, #0
 80079e6:	6063      	str	r3, [r4, #4]
 80079e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ec:	069e      	lsls	r6, r3, #26
 80079ee:	d408      	bmi.n	8007a02 <__srefill_r+0x2e>
 80079f0:	0758      	lsls	r0, r3, #29
 80079f2:	d445      	bmi.n	8007a80 <__srefill_r+0xac>
 80079f4:	06d9      	lsls	r1, r3, #27
 80079f6:	d407      	bmi.n	8007a08 <__srefill_r+0x34>
 80079f8:	2209      	movs	r2, #9
 80079fa:	602a      	str	r2, [r5, #0]
 80079fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a00:	81a3      	strh	r3, [r4, #12]
 8007a02:	f04f 30ff 	mov.w	r0, #4294967295
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	071a      	lsls	r2, r3, #28
 8007a0a:	d50b      	bpl.n	8007a24 <__srefill_r+0x50>
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f7fe fdfe 	bl	8006610 <_fflush_r>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d1f4      	bne.n	8007a02 <__srefill_r+0x2e>
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	60a0      	str	r0, [r4, #8]
 8007a1c:	f023 0308 	bic.w	r3, r3, #8
 8007a20:	81a3      	strh	r3, [r4, #12]
 8007a22:	61a0      	str	r0, [r4, #24]
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	f043 0304 	orr.w	r3, r3, #4
 8007a2a:	81a3      	strh	r3, [r4, #12]
 8007a2c:	6923      	ldr	r3, [r4, #16]
 8007a2e:	b91b      	cbnz	r3, 8007a38 <__srefill_r+0x64>
 8007a30:	4621      	mov	r1, r4
 8007a32:	4628      	mov	r0, r5
 8007a34:	f7ff ff84 	bl	8007940 <__smakebuf_r>
 8007a38:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8007a3c:	07b3      	lsls	r3, r6, #30
 8007a3e:	d00f      	beq.n	8007a60 <__srefill_r+0x8c>
 8007a40:	2301      	movs	r3, #1
 8007a42:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab0 <__srefill_r+0xdc>)
 8007a44:	491b      	ldr	r1, [pc, #108]	@ (8007ab4 <__srefill_r+0xe0>)
 8007a46:	481c      	ldr	r0, [pc, #112]	@ (8007ab8 <__srefill_r+0xe4>)
 8007a48:	81a3      	strh	r3, [r4, #12]
 8007a4a:	f7fe fec1 	bl	80067d0 <_fwalk_sglue>
 8007a4e:	81a6      	strh	r6, [r4, #12]
 8007a50:	f006 0609 	and.w	r6, r6, #9
 8007a54:	2e09      	cmp	r6, #9
 8007a56:	d103      	bne.n	8007a60 <__srefill_r+0x8c>
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f7fe fd54 	bl	8006508 <__sflush_r>
 8007a60:	6922      	ldr	r2, [r4, #16]
 8007a62:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8007a64:	6963      	ldr	r3, [r4, #20]
 8007a66:	6a21      	ldr	r1, [r4, #32]
 8007a68:	6022      	str	r2, [r4, #0]
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	47b0      	blx	r6
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	6060      	str	r0, [r4, #4]
 8007a72:	dc17      	bgt.n	8007aa4 <__srefill_r+0xd0>
 8007a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a78:	d116      	bne.n	8007aa8 <__srefill_r+0xd4>
 8007a7a:	f043 0320 	orr.w	r3, r3, #32
 8007a7e:	e7bf      	b.n	8007a00 <__srefill_r+0x2c>
 8007a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a82:	2900      	cmp	r1, #0
 8007a84:	d0d2      	beq.n	8007a2c <__srefill_r+0x58>
 8007a86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a8a:	4299      	cmp	r1, r3
 8007a8c:	d002      	beq.n	8007a94 <__srefill_r+0xc0>
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f7ff f862 	bl	8006b58 <_free_r>
 8007a94:	2300      	movs	r3, #0
 8007a96:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a9a:	6063      	str	r3, [r4, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0c5      	beq.n	8007a2c <__srefill_r+0x58>
 8007aa0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007aa2:	6023      	str	r3, [r4, #0]
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	e7ae      	b.n	8007a06 <__srefill_r+0x32>
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	6062      	str	r2, [r4, #4]
 8007aac:	e7a6      	b.n	80079fc <__srefill_r+0x28>
 8007aae:	bf00      	nop
 8007ab0:	20000010 	.word	0x20000010
 8007ab4:	080079b9 	.word	0x080079b9
 8007ab8:	20000020 	.word	0x20000020

08007abc <__sccl>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	780b      	ldrb	r3, [r1, #0]
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	2b5e      	cmp	r3, #94	@ 0x5e
 8007ac4:	bf0b      	itete	eq
 8007ac6:	784b      	ldrbeq	r3, [r1, #1]
 8007ac8:	1c4a      	addne	r2, r1, #1
 8007aca:	1c8a      	addeq	r2, r1, #2
 8007acc:	2100      	movne	r1, #0
 8007ace:	bf08      	it	eq
 8007ad0:	2101      	moveq	r1, #1
 8007ad2:	3801      	subs	r0, #1
 8007ad4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007ad8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007adc:	42a8      	cmp	r0, r5
 8007ade:	d1fb      	bne.n	8007ad8 <__sccl+0x1c>
 8007ae0:	b90b      	cbnz	r3, 8007ae6 <__sccl+0x2a>
 8007ae2:	1e50      	subs	r0, r2, #1
 8007ae4:	bd70      	pop	{r4, r5, r6, pc}
 8007ae6:	f081 0101 	eor.w	r1, r1, #1
 8007aea:	54e1      	strb	r1, [r4, r3]
 8007aec:	4610      	mov	r0, r2
 8007aee:	4602      	mov	r2, r0
 8007af0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007af4:	2d2d      	cmp	r5, #45	@ 0x2d
 8007af6:	d005      	beq.n	8007b04 <__sccl+0x48>
 8007af8:	2d5d      	cmp	r5, #93	@ 0x5d
 8007afa:	d016      	beq.n	8007b2a <__sccl+0x6e>
 8007afc:	2d00      	cmp	r5, #0
 8007afe:	d0f1      	beq.n	8007ae4 <__sccl+0x28>
 8007b00:	462b      	mov	r3, r5
 8007b02:	e7f2      	b.n	8007aea <__sccl+0x2e>
 8007b04:	7846      	ldrb	r6, [r0, #1]
 8007b06:	2e5d      	cmp	r6, #93	@ 0x5d
 8007b08:	d0fa      	beq.n	8007b00 <__sccl+0x44>
 8007b0a:	42b3      	cmp	r3, r6
 8007b0c:	dcf8      	bgt.n	8007b00 <__sccl+0x44>
 8007b0e:	3002      	adds	r0, #2
 8007b10:	461a      	mov	r2, r3
 8007b12:	3201      	adds	r2, #1
 8007b14:	4296      	cmp	r6, r2
 8007b16:	54a1      	strb	r1, [r4, r2]
 8007b18:	dcfb      	bgt.n	8007b12 <__sccl+0x56>
 8007b1a:	1af2      	subs	r2, r6, r3
 8007b1c:	3a01      	subs	r2, #1
 8007b1e:	1c5d      	adds	r5, r3, #1
 8007b20:	42b3      	cmp	r3, r6
 8007b22:	bfa8      	it	ge
 8007b24:	2200      	movge	r2, #0
 8007b26:	18ab      	adds	r3, r5, r2
 8007b28:	e7e1      	b.n	8007aee <__sccl+0x32>
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	e7da      	b.n	8007ae4 <__sccl+0x28>

08007b2e <__submore>:
 8007b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b32:	460c      	mov	r4, r1
 8007b34:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007b36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b3a:	4299      	cmp	r1, r3
 8007b3c:	d11d      	bne.n	8007b7a <__submore+0x4c>
 8007b3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007b42:	f7ff f87d 	bl	8006c40 <_malloc_r>
 8007b46:	b918      	cbnz	r0, 8007b50 <__submore+0x22>
 8007b48:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b54:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007b56:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007b5a:	6360      	str	r0, [r4, #52]	@ 0x34
 8007b5c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007b60:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007b64:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007b68:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007b6c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007b70:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007b74:	6020      	str	r0, [r4, #0]
 8007b76:	2000      	movs	r0, #0
 8007b78:	e7e8      	b.n	8007b4c <__submore+0x1e>
 8007b7a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007b7c:	0077      	lsls	r7, r6, #1
 8007b7e:	463a      	mov	r2, r7
 8007b80:	f000 f954 	bl	8007e2c <_realloc_r>
 8007b84:	4605      	mov	r5, r0
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d0de      	beq.n	8007b48 <__submore+0x1a>
 8007b8a:	eb00 0806 	add.w	r8, r0, r6
 8007b8e:	4601      	mov	r1, r0
 8007b90:	4632      	mov	r2, r6
 8007b92:	4640      	mov	r0, r8
 8007b94:	f7fe ffd1 	bl	8006b3a <memcpy>
 8007b98:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007b9c:	f8c4 8000 	str.w	r8, [r4]
 8007ba0:	e7e9      	b.n	8007b76 <__submore+0x48>

08007ba2 <_ungetc_r>:
 8007ba2:	b570      	push	{r4, r5, r6, lr}
 8007ba4:	460d      	mov	r5, r1
 8007ba6:	1c69      	adds	r1, r5, #1
 8007ba8:	4606      	mov	r6, r0
 8007baa:	4614      	mov	r4, r2
 8007bac:	d01e      	beq.n	8007bec <_ungetc_r+0x4a>
 8007bae:	b118      	cbz	r0, 8007bb8 <_ungetc_r+0x16>
 8007bb0:	6a03      	ldr	r3, [r0, #32]
 8007bb2:	b90b      	cbnz	r3, 8007bb8 <_ungetc_r+0x16>
 8007bb4:	f7fe fdf4 	bl	80067a0 <__sinit>
 8007bb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bba:	07da      	lsls	r2, r3, #31
 8007bbc:	d405      	bmi.n	8007bca <_ungetc_r+0x28>
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	059b      	lsls	r3, r3, #22
 8007bc2:	d402      	bmi.n	8007bca <_ungetc_r+0x28>
 8007bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bc6:	f7fe ffb6 	bl	8006b36 <__retarget_lock_acquire_recursive>
 8007bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bce:	f023 0220 	bic.w	r2, r3, #32
 8007bd2:	0758      	lsls	r0, r3, #29
 8007bd4:	81a2      	strh	r2, [r4, #12]
 8007bd6:	d422      	bmi.n	8007c1e <_ungetc_r+0x7c>
 8007bd8:	06d9      	lsls	r1, r3, #27
 8007bda:	d40a      	bmi.n	8007bf2 <_ungetc_r+0x50>
 8007bdc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007bde:	07d2      	lsls	r2, r2, #31
 8007be0:	d404      	bmi.n	8007bec <_ungetc_r+0x4a>
 8007be2:	0599      	lsls	r1, r3, #22
 8007be4:	d402      	bmi.n	8007bec <_ungetc_r+0x4a>
 8007be6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007be8:	f7fe ffa6 	bl	8006b38 <__retarget_lock_release_recursive>
 8007bec:	f04f 35ff 	mov.w	r5, #4294967295
 8007bf0:	e046      	b.n	8007c80 <_ungetc_r+0xde>
 8007bf2:	071b      	lsls	r3, r3, #28
 8007bf4:	d50f      	bpl.n	8007c16 <_ungetc_r+0x74>
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f7fe fd09 	bl	8006610 <_fflush_r>
 8007bfe:	b120      	cbz	r0, 8007c0a <_ungetc_r+0x68>
 8007c00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c02:	07d8      	lsls	r0, r3, #31
 8007c04:	d4f2      	bmi.n	8007bec <_ungetc_r+0x4a>
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	e7eb      	b.n	8007be2 <_ungetc_r+0x40>
 8007c0a:	89a3      	ldrh	r3, [r4, #12]
 8007c0c:	60a0      	str	r0, [r4, #8]
 8007c0e:	f023 0308 	bic.w	r3, r3, #8
 8007c12:	81a3      	strh	r3, [r4, #12]
 8007c14:	61a0      	str	r0, [r4, #24]
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	f043 0304 	orr.w	r3, r3, #4
 8007c1c:	81a3      	strh	r3, [r4, #12]
 8007c1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c20:	6862      	ldr	r2, [r4, #4]
 8007c22:	b2ed      	uxtb	r5, r5
 8007c24:	b1d3      	cbz	r3, 8007c5c <_ungetc_r+0xba>
 8007c26:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	dc05      	bgt.n	8007c38 <_ungetc_r+0x96>
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f7ff ff7d 	bl	8007b2e <__submore>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d1e3      	bne.n	8007c00 <_ungetc_r+0x5e>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	1e5a      	subs	r2, r3, #1
 8007c3c:	6022      	str	r2, [r4, #0]
 8007c3e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007c42:	6863      	ldr	r3, [r4, #4]
 8007c44:	3301      	adds	r3, #1
 8007c46:	6063      	str	r3, [r4, #4]
 8007c48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c4a:	07da      	lsls	r2, r3, #31
 8007c4c:	d418      	bmi.n	8007c80 <_ungetc_r+0xde>
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	059b      	lsls	r3, r3, #22
 8007c52:	d415      	bmi.n	8007c80 <_ungetc_r+0xde>
 8007c54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c56:	f7fe ff6f 	bl	8006b38 <__retarget_lock_release_recursive>
 8007c5a:	e011      	b.n	8007c80 <_ungetc_r+0xde>
 8007c5c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8007c5e:	6920      	ldr	r0, [r4, #16]
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	f001 0101 	and.w	r1, r1, #1
 8007c66:	b168      	cbz	r0, 8007c84 <_ungetc_r+0xe2>
 8007c68:	4298      	cmp	r0, r3
 8007c6a:	d20b      	bcs.n	8007c84 <_ungetc_r+0xe2>
 8007c6c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8007c70:	42a8      	cmp	r0, r5
 8007c72:	d107      	bne.n	8007c84 <_ungetc_r+0xe2>
 8007c74:	3b01      	subs	r3, #1
 8007c76:	3201      	adds	r2, #1
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	6062      	str	r2, [r4, #4]
 8007c7c:	2900      	cmp	r1, #0
 8007c7e:	d0e6      	beq.n	8007c4e <_ungetc_r+0xac>
 8007c80:	4628      	mov	r0, r5
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
 8007c84:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8007c88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c8e:	2303      	movs	r3, #3
 8007c90:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007c92:	4623      	mov	r3, r4
 8007c94:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	6063      	str	r3, [r4, #4]
 8007c9e:	e7ed      	b.n	8007c7c <_ungetc_r+0xda>

08007ca0 <__swbuf_r>:
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	460e      	mov	r6, r1
 8007ca4:	4614      	mov	r4, r2
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	b118      	cbz	r0, 8007cb2 <__swbuf_r+0x12>
 8007caa:	6a03      	ldr	r3, [r0, #32]
 8007cac:	b90b      	cbnz	r3, 8007cb2 <__swbuf_r+0x12>
 8007cae:	f7fe fd77 	bl	80067a0 <__sinit>
 8007cb2:	69a3      	ldr	r3, [r4, #24]
 8007cb4:	60a3      	str	r3, [r4, #8]
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	071a      	lsls	r2, r3, #28
 8007cba:	d501      	bpl.n	8007cc0 <__swbuf_r+0x20>
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	b943      	cbnz	r3, 8007cd2 <__swbuf_r+0x32>
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f000 f82a 	bl	8007d1c <__swsetup_r>
 8007cc8:	b118      	cbz	r0, 8007cd2 <__swbuf_r+0x32>
 8007cca:	f04f 37ff 	mov.w	r7, #4294967295
 8007cce:	4638      	mov	r0, r7
 8007cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	6922      	ldr	r2, [r4, #16]
 8007cd6:	1a98      	subs	r0, r3, r2
 8007cd8:	6963      	ldr	r3, [r4, #20]
 8007cda:	b2f6      	uxtb	r6, r6
 8007cdc:	4283      	cmp	r3, r0
 8007cde:	4637      	mov	r7, r6
 8007ce0:	dc05      	bgt.n	8007cee <__swbuf_r+0x4e>
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f7fe fc93 	bl	8006610 <_fflush_r>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d1ed      	bne.n	8007cca <__swbuf_r+0x2a>
 8007cee:	68a3      	ldr	r3, [r4, #8]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	60a3      	str	r3, [r4, #8]
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	6022      	str	r2, [r4, #0]
 8007cfa:	701e      	strb	r6, [r3, #0]
 8007cfc:	6962      	ldr	r2, [r4, #20]
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d004      	beq.n	8007d0e <__swbuf_r+0x6e>
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	07db      	lsls	r3, r3, #31
 8007d08:	d5e1      	bpl.n	8007cce <__swbuf_r+0x2e>
 8007d0a:	2e0a      	cmp	r6, #10
 8007d0c:	d1df      	bne.n	8007cce <__swbuf_r+0x2e>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4628      	mov	r0, r5
 8007d12:	f7fe fc7d 	bl	8006610 <_fflush_r>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d0d9      	beq.n	8007cce <__swbuf_r+0x2e>
 8007d1a:	e7d6      	b.n	8007cca <__swbuf_r+0x2a>

08007d1c <__swsetup_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4b29      	ldr	r3, [pc, #164]	@ (8007dc4 <__swsetup_r+0xa8>)
 8007d20:	4605      	mov	r5, r0
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	460c      	mov	r4, r1
 8007d26:	b118      	cbz	r0, 8007d30 <__swsetup_r+0x14>
 8007d28:	6a03      	ldr	r3, [r0, #32]
 8007d2a:	b90b      	cbnz	r3, 8007d30 <__swsetup_r+0x14>
 8007d2c:	f7fe fd38 	bl	80067a0 <__sinit>
 8007d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d34:	0719      	lsls	r1, r3, #28
 8007d36:	d422      	bmi.n	8007d7e <__swsetup_r+0x62>
 8007d38:	06da      	lsls	r2, r3, #27
 8007d3a:	d407      	bmi.n	8007d4c <__swsetup_r+0x30>
 8007d3c:	2209      	movs	r2, #9
 8007d3e:	602a      	str	r2, [r5, #0]
 8007d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d44:	81a3      	strh	r3, [r4, #12]
 8007d46:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4a:	e033      	b.n	8007db4 <__swsetup_r+0x98>
 8007d4c:	0758      	lsls	r0, r3, #29
 8007d4e:	d512      	bpl.n	8007d76 <__swsetup_r+0x5a>
 8007d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d52:	b141      	cbz	r1, 8007d66 <__swsetup_r+0x4a>
 8007d54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d58:	4299      	cmp	r1, r3
 8007d5a:	d002      	beq.n	8007d62 <__swsetup_r+0x46>
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f7fe fefb 	bl	8006b58 <_free_r>
 8007d62:	2300      	movs	r3, #0
 8007d64:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d6c:	81a3      	strh	r3, [r4, #12]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	6063      	str	r3, [r4, #4]
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	f043 0308 	orr.w	r3, r3, #8
 8007d7c:	81a3      	strh	r3, [r4, #12]
 8007d7e:	6923      	ldr	r3, [r4, #16]
 8007d80:	b94b      	cbnz	r3, 8007d96 <__swsetup_r+0x7a>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d8c:	d003      	beq.n	8007d96 <__swsetup_r+0x7a>
 8007d8e:	4621      	mov	r1, r4
 8007d90:	4628      	mov	r0, r5
 8007d92:	f7ff fdd5 	bl	8007940 <__smakebuf_r>
 8007d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d9a:	f013 0201 	ands.w	r2, r3, #1
 8007d9e:	d00a      	beq.n	8007db6 <__swsetup_r+0x9a>
 8007da0:	2200      	movs	r2, #0
 8007da2:	60a2      	str	r2, [r4, #8]
 8007da4:	6962      	ldr	r2, [r4, #20]
 8007da6:	4252      	negs	r2, r2
 8007da8:	61a2      	str	r2, [r4, #24]
 8007daa:	6922      	ldr	r2, [r4, #16]
 8007dac:	b942      	cbnz	r2, 8007dc0 <__swsetup_r+0xa4>
 8007dae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007db2:	d1c5      	bne.n	8007d40 <__swsetup_r+0x24>
 8007db4:	bd38      	pop	{r3, r4, r5, pc}
 8007db6:	0799      	lsls	r1, r3, #30
 8007db8:	bf58      	it	pl
 8007dba:	6962      	ldrpl	r2, [r4, #20]
 8007dbc:	60a2      	str	r2, [r4, #8]
 8007dbe:	e7f4      	b.n	8007daa <__swsetup_r+0x8e>
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	e7f7      	b.n	8007db4 <__swsetup_r+0x98>
 8007dc4:	2000001c 	.word	0x2000001c

08007dc8 <_fstat_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d07      	ldr	r5, [pc, #28]	@ (8007de8 <_fstat_r+0x20>)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	602b      	str	r3, [r5, #0]
 8007dd6:	f7f8 fddb 	bl	8000990 <_fstat>
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	d102      	bne.n	8007de4 <_fstat_r+0x1c>
 8007dde:	682b      	ldr	r3, [r5, #0]
 8007de0:	b103      	cbz	r3, 8007de4 <_fstat_r+0x1c>
 8007de2:	6023      	str	r3, [r4, #0]
 8007de4:	bd38      	pop	{r3, r4, r5, pc}
 8007de6:	bf00      	nop
 8007de8:	20001b6c 	.word	0x20001b6c

08007dec <_isatty_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d06      	ldr	r5, [pc, #24]	@ (8007e08 <_isatty_r+0x1c>)
 8007df0:	2300      	movs	r3, #0
 8007df2:	4604      	mov	r4, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	602b      	str	r3, [r5, #0]
 8007df8:	f7f8 fd48 	bl	800088c <_isatty>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_isatty_r+0x1a>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_isatty_r+0x1a>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	20001b6c 	.word	0x20001b6c

08007e0c <_sbrk_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d06      	ldr	r5, [pc, #24]	@ (8007e28 <_sbrk_r+0x1c>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	602b      	str	r3, [r5, #0]
 8007e18:	f7f8 fe90 	bl	8000b3c <_sbrk>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_sbrk_r+0x1a>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_sbrk_r+0x1a>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	20001b6c 	.word	0x20001b6c

08007e2c <_realloc_r>:
 8007e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e30:	4680      	mov	r8, r0
 8007e32:	4615      	mov	r5, r2
 8007e34:	460c      	mov	r4, r1
 8007e36:	b921      	cbnz	r1, 8007e42 <_realloc_r+0x16>
 8007e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	f7fe beff 	b.w	8006c40 <_malloc_r>
 8007e42:	b92a      	cbnz	r2, 8007e50 <_realloc_r+0x24>
 8007e44:	f7fe fe88 	bl	8006b58 <_free_r>
 8007e48:	2400      	movs	r4, #0
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e50:	f000 f906 	bl	8008060 <_malloc_usable_size_r>
 8007e54:	4285      	cmp	r5, r0
 8007e56:	4606      	mov	r6, r0
 8007e58:	d802      	bhi.n	8007e60 <_realloc_r+0x34>
 8007e5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007e5e:	d8f4      	bhi.n	8007e4a <_realloc_r+0x1e>
 8007e60:	4629      	mov	r1, r5
 8007e62:	4640      	mov	r0, r8
 8007e64:	f7fe feec 	bl	8006c40 <_malloc_r>
 8007e68:	4607      	mov	r7, r0
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d0ec      	beq.n	8007e48 <_realloc_r+0x1c>
 8007e6e:	42b5      	cmp	r5, r6
 8007e70:	462a      	mov	r2, r5
 8007e72:	4621      	mov	r1, r4
 8007e74:	bf28      	it	cs
 8007e76:	4632      	movcs	r2, r6
 8007e78:	f7fe fe5f 	bl	8006b3a <memcpy>
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4640      	mov	r0, r8
 8007e80:	f7fe fe6a 	bl	8006b58 <_free_r>
 8007e84:	463c      	mov	r4, r7
 8007e86:	e7e0      	b.n	8007e4a <_realloc_r+0x1e>

08007e88 <_strtol_l.constprop.0>:
 8007e88:	2b24      	cmp	r3, #36	@ 0x24
 8007e8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e8e:	4686      	mov	lr, r0
 8007e90:	4690      	mov	r8, r2
 8007e92:	d801      	bhi.n	8007e98 <_strtol_l.constprop.0+0x10>
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d106      	bne.n	8007ea6 <_strtol_l.constprop.0+0x1e>
 8007e98:	f7fe fe22 	bl	8006ae0 <__errno>
 8007e9c:	2316      	movs	r3, #22
 8007e9e:	6003      	str	r3, [r0, #0]
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea6:	4834      	ldr	r0, [pc, #208]	@ (8007f78 <_strtol_l.constprop.0+0xf0>)
 8007ea8:	460d      	mov	r5, r1
 8007eaa:	462a      	mov	r2, r5
 8007eac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007eb0:	5d06      	ldrb	r6, [r0, r4]
 8007eb2:	f016 0608 	ands.w	r6, r6, #8
 8007eb6:	d1f8      	bne.n	8007eaa <_strtol_l.constprop.0+0x22>
 8007eb8:	2c2d      	cmp	r4, #45	@ 0x2d
 8007eba:	d12d      	bne.n	8007f18 <_strtol_l.constprop.0+0x90>
 8007ebc:	782c      	ldrb	r4, [r5, #0]
 8007ebe:	2601      	movs	r6, #1
 8007ec0:	1c95      	adds	r5, r2, #2
 8007ec2:	f033 0210 	bics.w	r2, r3, #16
 8007ec6:	d109      	bne.n	8007edc <_strtol_l.constprop.0+0x54>
 8007ec8:	2c30      	cmp	r4, #48	@ 0x30
 8007eca:	d12a      	bne.n	8007f22 <_strtol_l.constprop.0+0x9a>
 8007ecc:	782a      	ldrb	r2, [r5, #0]
 8007ece:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ed2:	2a58      	cmp	r2, #88	@ 0x58
 8007ed4:	d125      	bne.n	8007f22 <_strtol_l.constprop.0+0x9a>
 8007ed6:	786c      	ldrb	r4, [r5, #1]
 8007ed8:	2310      	movs	r3, #16
 8007eda:	3502      	adds	r5, #2
 8007edc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007ee0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	fbbc f9f3 	udiv	r9, ip, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	fb03 ca19 	mls	sl, r3, r9, ip
 8007ef0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007ef4:	2f09      	cmp	r7, #9
 8007ef6:	d81b      	bhi.n	8007f30 <_strtol_l.constprop.0+0xa8>
 8007ef8:	463c      	mov	r4, r7
 8007efa:	42a3      	cmp	r3, r4
 8007efc:	dd27      	ble.n	8007f4e <_strtol_l.constprop.0+0xc6>
 8007efe:	1c57      	adds	r7, r2, #1
 8007f00:	d007      	beq.n	8007f12 <_strtol_l.constprop.0+0x8a>
 8007f02:	4581      	cmp	r9, r0
 8007f04:	d320      	bcc.n	8007f48 <_strtol_l.constprop.0+0xc0>
 8007f06:	d101      	bne.n	8007f0c <_strtol_l.constprop.0+0x84>
 8007f08:	45a2      	cmp	sl, r4
 8007f0a:	db1d      	blt.n	8007f48 <_strtol_l.constprop.0+0xc0>
 8007f0c:	fb00 4003 	mla	r0, r0, r3, r4
 8007f10:	2201      	movs	r2, #1
 8007f12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f16:	e7eb      	b.n	8007ef0 <_strtol_l.constprop.0+0x68>
 8007f18:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f1a:	bf04      	itt	eq
 8007f1c:	782c      	ldrbeq	r4, [r5, #0]
 8007f1e:	1c95      	addeq	r5, r2, #2
 8007f20:	e7cf      	b.n	8007ec2 <_strtol_l.constprop.0+0x3a>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1da      	bne.n	8007edc <_strtol_l.constprop.0+0x54>
 8007f26:	2c30      	cmp	r4, #48	@ 0x30
 8007f28:	bf0c      	ite	eq
 8007f2a:	2308      	moveq	r3, #8
 8007f2c:	230a      	movne	r3, #10
 8007f2e:	e7d5      	b.n	8007edc <_strtol_l.constprop.0+0x54>
 8007f30:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007f34:	2f19      	cmp	r7, #25
 8007f36:	d801      	bhi.n	8007f3c <_strtol_l.constprop.0+0xb4>
 8007f38:	3c37      	subs	r4, #55	@ 0x37
 8007f3a:	e7de      	b.n	8007efa <_strtol_l.constprop.0+0x72>
 8007f3c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007f40:	2f19      	cmp	r7, #25
 8007f42:	d804      	bhi.n	8007f4e <_strtol_l.constprop.0+0xc6>
 8007f44:	3c57      	subs	r4, #87	@ 0x57
 8007f46:	e7d8      	b.n	8007efa <_strtol_l.constprop.0+0x72>
 8007f48:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4c:	e7e1      	b.n	8007f12 <_strtol_l.constprop.0+0x8a>
 8007f4e:	1c53      	adds	r3, r2, #1
 8007f50:	d108      	bne.n	8007f64 <_strtol_l.constprop.0+0xdc>
 8007f52:	2322      	movs	r3, #34	@ 0x22
 8007f54:	f8ce 3000 	str.w	r3, [lr]
 8007f58:	4660      	mov	r0, ip
 8007f5a:	f1b8 0f00 	cmp.w	r8, #0
 8007f5e:	d0a0      	beq.n	8007ea2 <_strtol_l.constprop.0+0x1a>
 8007f60:	1e69      	subs	r1, r5, #1
 8007f62:	e006      	b.n	8007f72 <_strtol_l.constprop.0+0xea>
 8007f64:	b106      	cbz	r6, 8007f68 <_strtol_l.constprop.0+0xe0>
 8007f66:	4240      	negs	r0, r0
 8007f68:	f1b8 0f00 	cmp.w	r8, #0
 8007f6c:	d099      	beq.n	8007ea2 <_strtol_l.constprop.0+0x1a>
 8007f6e:	2a00      	cmp	r2, #0
 8007f70:	d1f6      	bne.n	8007f60 <_strtol_l.constprop.0+0xd8>
 8007f72:	f8c8 1000 	str.w	r1, [r8]
 8007f76:	e794      	b.n	8007ea2 <_strtol_l.constprop.0+0x1a>
 8007f78:	080081e7 	.word	0x080081e7

08007f7c <_strtol_r>:
 8007f7c:	f7ff bf84 	b.w	8007e88 <_strtol_l.constprop.0>

08007f80 <_strtoul_l.constprop.0>:
 8007f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f84:	4e34      	ldr	r6, [pc, #208]	@ (8008058 <_strtoul_l.constprop.0+0xd8>)
 8007f86:	4686      	mov	lr, r0
 8007f88:	460d      	mov	r5, r1
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f90:	5d37      	ldrb	r7, [r6, r4]
 8007f92:	f017 0708 	ands.w	r7, r7, #8
 8007f96:	d1f8      	bne.n	8007f8a <_strtoul_l.constprop.0+0xa>
 8007f98:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f9a:	d12f      	bne.n	8007ffc <_strtoul_l.constprop.0+0x7c>
 8007f9c:	782c      	ldrb	r4, [r5, #0]
 8007f9e:	2701      	movs	r7, #1
 8007fa0:	1c85      	adds	r5, r0, #2
 8007fa2:	f033 0010 	bics.w	r0, r3, #16
 8007fa6:	d109      	bne.n	8007fbc <_strtoul_l.constprop.0+0x3c>
 8007fa8:	2c30      	cmp	r4, #48	@ 0x30
 8007faa:	d12c      	bne.n	8008006 <_strtoul_l.constprop.0+0x86>
 8007fac:	7828      	ldrb	r0, [r5, #0]
 8007fae:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007fb2:	2858      	cmp	r0, #88	@ 0x58
 8007fb4:	d127      	bne.n	8008006 <_strtoul_l.constprop.0+0x86>
 8007fb6:	786c      	ldrb	r4, [r5, #1]
 8007fb8:	2310      	movs	r3, #16
 8007fba:	3502      	adds	r5, #2
 8007fbc:	f04f 38ff 	mov.w	r8, #4294967295
 8007fc0:	2600      	movs	r6, #0
 8007fc2:	fbb8 f8f3 	udiv	r8, r8, r3
 8007fc6:	fb03 f908 	mul.w	r9, r3, r8
 8007fca:	ea6f 0909 	mvn.w	r9, r9
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007fd4:	f1bc 0f09 	cmp.w	ip, #9
 8007fd8:	d81c      	bhi.n	8008014 <_strtoul_l.constprop.0+0x94>
 8007fda:	4664      	mov	r4, ip
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	dd2a      	ble.n	8008036 <_strtoul_l.constprop.0+0xb6>
 8007fe0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007fe4:	d007      	beq.n	8007ff6 <_strtoul_l.constprop.0+0x76>
 8007fe6:	4580      	cmp	r8, r0
 8007fe8:	d322      	bcc.n	8008030 <_strtoul_l.constprop.0+0xb0>
 8007fea:	d101      	bne.n	8007ff0 <_strtoul_l.constprop.0+0x70>
 8007fec:	45a1      	cmp	r9, r4
 8007fee:	db1f      	blt.n	8008030 <_strtoul_l.constprop.0+0xb0>
 8007ff0:	fb00 4003 	mla	r0, r0, r3, r4
 8007ff4:	2601      	movs	r6, #1
 8007ff6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ffa:	e7e9      	b.n	8007fd0 <_strtoul_l.constprop.0+0x50>
 8007ffc:	2c2b      	cmp	r4, #43	@ 0x2b
 8007ffe:	bf04      	itt	eq
 8008000:	782c      	ldrbeq	r4, [r5, #0]
 8008002:	1c85      	addeq	r5, r0, #2
 8008004:	e7cd      	b.n	8007fa2 <_strtoul_l.constprop.0+0x22>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1d8      	bne.n	8007fbc <_strtoul_l.constprop.0+0x3c>
 800800a:	2c30      	cmp	r4, #48	@ 0x30
 800800c:	bf0c      	ite	eq
 800800e:	2308      	moveq	r3, #8
 8008010:	230a      	movne	r3, #10
 8008012:	e7d3      	b.n	8007fbc <_strtoul_l.constprop.0+0x3c>
 8008014:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008018:	f1bc 0f19 	cmp.w	ip, #25
 800801c:	d801      	bhi.n	8008022 <_strtoul_l.constprop.0+0xa2>
 800801e:	3c37      	subs	r4, #55	@ 0x37
 8008020:	e7dc      	b.n	8007fdc <_strtoul_l.constprop.0+0x5c>
 8008022:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008026:	f1bc 0f19 	cmp.w	ip, #25
 800802a:	d804      	bhi.n	8008036 <_strtoul_l.constprop.0+0xb6>
 800802c:	3c57      	subs	r4, #87	@ 0x57
 800802e:	e7d5      	b.n	8007fdc <_strtoul_l.constprop.0+0x5c>
 8008030:	f04f 36ff 	mov.w	r6, #4294967295
 8008034:	e7df      	b.n	8007ff6 <_strtoul_l.constprop.0+0x76>
 8008036:	1c73      	adds	r3, r6, #1
 8008038:	d106      	bne.n	8008048 <_strtoul_l.constprop.0+0xc8>
 800803a:	2322      	movs	r3, #34	@ 0x22
 800803c:	f8ce 3000 	str.w	r3, [lr]
 8008040:	4630      	mov	r0, r6
 8008042:	b932      	cbnz	r2, 8008052 <_strtoul_l.constprop.0+0xd2>
 8008044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008048:	b107      	cbz	r7, 800804c <_strtoul_l.constprop.0+0xcc>
 800804a:	4240      	negs	r0, r0
 800804c:	2a00      	cmp	r2, #0
 800804e:	d0f9      	beq.n	8008044 <_strtoul_l.constprop.0+0xc4>
 8008050:	b106      	cbz	r6, 8008054 <_strtoul_l.constprop.0+0xd4>
 8008052:	1e69      	subs	r1, r5, #1
 8008054:	6011      	str	r1, [r2, #0]
 8008056:	e7f5      	b.n	8008044 <_strtoul_l.constprop.0+0xc4>
 8008058:	080081e7 	.word	0x080081e7

0800805c <_strtoul_r>:
 800805c:	f7ff bf90 	b.w	8007f80 <_strtoul_l.constprop.0>

08008060 <_malloc_usable_size_r>:
 8008060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008064:	1f18      	subs	r0, r3, #4
 8008066:	2b00      	cmp	r3, #0
 8008068:	bfbc      	itt	lt
 800806a:	580b      	ldrlt	r3, [r1, r0]
 800806c:	18c0      	addlt	r0, r0, r3
 800806e:	4770      	bx	lr

08008070 <_init>:
 8008070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008072:	bf00      	nop
 8008074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008076:	bc08      	pop	{r3}
 8008078:	469e      	mov	lr, r3
 800807a:	4770      	bx	lr

0800807c <_fini>:
 800807c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807e:	bf00      	nop
 8008080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008082:	bc08      	pop	{r3}
 8008084:	469e      	mov	lr, r3
 8008086:	4770      	bx	lr
