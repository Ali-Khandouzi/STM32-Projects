
RTOS-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007330  08007330  00008330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007390  08007390  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007390  08007390  00008390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007398  08007398  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007398  08007398  00008398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800739c  0800739c  0000839c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080073a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b10  2000006c  0800740c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b7c  0800740c  00009b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159ba  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316d  00000000  00000000  0001ea56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00021bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d89  00000000  00000000  00022d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e40  00000000  00000000  00023b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145d0  00000000  00000000  00028949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f43ca  00000000  00000000  0003cf19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001312e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e60  00000000  00000000  00131328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00136188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007318 	.word	0x08007318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007318 	.word	0x08007318

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fb1a 	bl	8000afc <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f85e 	bl	8000588 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8de 	bl	800068c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f8ac 	bl	800062c <MX_USART2_UART_Init>
  RetargetInit(&huart2);
 80004d4:	4813      	ldr	r0, [pc, #76]	@ (8000524 <main+0x64>)
 80004d6:	f000 f945 	bl	8000764 <RetargetInit>
  /* Init scheduler */
  osKernelInitialize();
 80004da:	f003 f815 	bl	8003508 <osKernelInitialize>
  /* Creation of binary semaphore */
  semID = osSemaphoreNew(1, 1, NULL);
 80004de:	2200      	movs	r2, #0
 80004e0:	2101      	movs	r1, #1
 80004e2:	2001      	movs	r0, #1
 80004e4:	f003 f907 	bl	80036f6 <osSemaphoreNew>
 80004e8:	4603      	mov	r3, r0
 80004ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000528 <main+0x68>)
 80004ec:	6013      	str	r3, [r2, #0]
  osSemaphoreAcquire(semID, osWaitForever);
 80004ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <main+0x68>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f04f 31ff 	mov.w	r1, #4294967295
 80004f6:	4618      	mov	r0, r3
 80004f8:	f003 f986 	bl	8003808 <osSemaphoreAcquire>
  /* Create the thread(s) */
  /* Creation of blinkThread */
  blinkThreadID = osThreadNew(blinkThread, NULL, NULL);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2100      	movs	r1, #0
 8000500:	480a      	ldr	r0, [pc, #40]	@ (800052c <main+0x6c>)
 8000502:	f003 f84b 	bl	800359c <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a09      	ldr	r2, [pc, #36]	@ (8000530 <main+0x70>)
 800050a:	6013      	str	r3, [r2, #0]
  /* Creation of UARTThread */
  delayThreadID = osThreadNew(delayThread, NULL, NULL);
 800050c:	2200      	movs	r2, #0
 800050e:	2100      	movs	r1, #0
 8000510:	4808      	ldr	r0, [pc, #32]	@ (8000534 <main+0x74>)
 8000512:	f003 f843 	bl	800359c <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <main+0x78>)
 800051a:	6013      	str	r3, [r2, #0]
  /* Start scheduler */
  osKernelStart();
 800051c:	f003 f818 	bl	8003550 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  while (1);
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <main+0x60>
 8000524:	20000088 	.word	0x20000088
 8000528:	20000118 	.word	0x20000118
 800052c:	0800053d 	.word	0x0800053d
 8000530:	20000110 	.word	0x20000110
 8000534:	08000565 	.word	0x08000565
 8000538:	20000114 	.word	0x20000114

0800053c <blinkThread>:
}

void blinkThread(void *argument) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  while(1) {
    osSemaphoreAcquire(semID, osWaitForever);
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <blinkThread+0x24>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f04f 31ff 	mov.w	r1, #4294967295
 800054c:	4618      	mov	r0, r3
 800054e:	f003 f95b 	bl	8003808 <osSemaphoreAcquire>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000552:	2120      	movs	r1, #32
 8000554:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000558:	f000 fdf4 	bl	8001144 <HAL_GPIO_TogglePin>
    osSemaphoreAcquire(semID, osWaitForever);
 800055c:	bf00      	nop
 800055e:	e7f1      	b.n	8000544 <blinkThread+0x8>
 8000560:	20000118 	.word	0x20000118

08000564 <delayThread>:
  }
}

void delayThread(void *argument) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  while(1) {
    osDelay(500);
 800056c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000570:	f003 f8a6 	bl	80036c0 <osDelay>
    osSemaphoreRelease(semID);
 8000574:	4b03      	ldr	r3, [pc, #12]	@ (8000584 <delayThread+0x20>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f003 f997 	bl	80038ac <osSemaphoreRelease>
    osDelay(500);
 800057e:	bf00      	nop
 8000580:	e7f4      	b.n	800056c <delayThread+0x8>
 8000582:	bf00      	nop
 8000584:	20000118 	.word	0x20000118

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b096      	sub	sp, #88	@ 0x58
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2244      	movs	r2, #68	@ 0x44
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f006 fc3f 	bl	8006e1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ae:	f000 fdf1 	bl	8001194 <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b8:	f000 f8ce 	bl	8000758 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2310      	movs	r3, #16
 80005c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ce:	2302      	movs	r3, #2
 80005d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005d6:	230a      	movs	r3, #10
 80005d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005da:	2307      	movs	r3, #7
 80005dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fe28 	bl	8001240 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005f6:	f000 f8af 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2303      	movs	r3, #3
 8000600:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	2104      	movs	r1, #4
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f9f0 	bl	80019f8 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061e:	f000 f89b 	bl	8000758 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3758      	adds	r7, #88	@ 0x58
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000630:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <MX_USART2_UART_Init+0x58>)
 8000632:	4a15      	ldr	r2, [pc, #84]	@ (8000688 <MX_USART2_UART_Init+0x5c>)
 8000634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000636:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <MX_USART2_UART_Init+0x58>)
 8000638:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800063c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <MX_USART2_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_USART2_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <MX_USART2_UART_Init+0x58>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_USART2_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000662:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <MX_USART2_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	@ (8000684 <MX_USART2_UART_Init+0x58>)
 8000670:	f002 f8a2 	bl	80027b8 <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800067a:	f000 f86d 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000088 	.word	0x20000088
 8000688:	40004400 	.word	0x40004400

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	@ 0x28
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000750 <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ae:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a24      	ldr	r2, [pc, #144]	@ (8000750 <MX_GPIO_Init+0xc4>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000750 <MX_GPIO_Init+0xc4>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a18      	ldr	r2, [pc, #96]	@ (8000750 <MX_GPIO_Init+0xc4>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2120      	movs	r1, #32
 8000706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070a:	f000 fd03 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000714:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	480b      	ldr	r0, [pc, #44]	@ (8000754 <MX_GPIO_Init+0xc8>)
 8000726:	f000 fb4b 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800072a:	2320      	movs	r3, #32
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000744:	f000 fb3c 	bl	8000dc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	48000800 	.word	0x48000800

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <Error_Handler+0x8>

08000764 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800076c:	4a07      	ldr	r2, [pc, #28]	@ (800078c <RetargetInit+0x28>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000772:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <RetargetInit+0x2c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	6898      	ldr	r0, [r3, #8]
 8000778:	2300      	movs	r3, #0
 800077a:	2202      	movs	r2, #2
 800077c:	2100      	movs	r1, #0
 800077e:	f006 fa55 	bl	8006c2c <setvbuf>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000011c 	.word	0x2000011c
 8000790:	2000001c 	.word	0x2000001c

08000794 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d002      	beq.n	80007ac <_write+0x18>
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d111      	bne.n	80007d0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80007ac:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <_write+0x54>)
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	f002 f84b 	bl	8002854 <HAL_UART_Transmit>
 80007be:	4603      	mov	r3, r0
 80007c0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80007c2:	7dfb      	ldrb	r3, [r7, #23]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d101      	bne.n	80007cc <_write+0x38>
      return len;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	e008      	b.n	80007de <_write+0x4a>
    else
      return EIO;
 80007cc:	2305      	movs	r3, #5
 80007ce:	e006      	b.n	80007de <_write+0x4a>
  }
  errno = EBADF;
 80007d0:	f006 fb72 	bl	8006eb8 <__errno>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2209      	movs	r2, #9
 80007d8:	601a      	str	r2, [r3, #0]
  return -1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000011c 	.word	0x2000011c

080007ec <_close>:

int _close(int fd) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	db04      	blt.n	8000804 <_close+0x18>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	dc01      	bgt.n	8000804 <_close+0x18>
    return 0;
 8000800:	2300      	movs	r3, #0
 8000802:	e006      	b.n	8000812 <_close+0x26>

  errno = EBADF;
 8000804:	f006 fb58 	bl	8006eb8 <__errno>
 8000808:	4603      	mov	r3, r0
 800080a:	2209      	movs	r2, #9
 800080c:	601a      	str	r2, [r3, #0]
  return -1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <_read>:

int _read(int fd, char* ptr, int len) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d110      	bne.n	8000850 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <_read+0x4c>)
 8000830:	6818      	ldr	r0, [r3, #0]
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	2201      	movs	r2, #1
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	f002 f894 	bl	8002966 <HAL_UART_Receive>
 800083e:	4603      	mov	r3, r0
 8000840:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d101      	bne.n	800084c <_read+0x30>
      return 1;
 8000848:	2301      	movs	r3, #1
 800084a:	e008      	b.n	800085e <_read+0x42>
    else
      return EIO;
 800084c:	2305      	movs	r3, #5
 800084e:	e006      	b.n	800085e <_read+0x42>
  }
  errno = EBADF;
 8000850:	f006 fb32 	bl	8006eb8 <__errno>
 8000854:	4603      	mov	r3, r0
 8000856:	2209      	movs	r2, #9
 8000858:	601a      	str	r2, [r3, #0]
  return -1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800085e:	4618      	mov	r0, r3
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000011c 	.word	0x2000011c

0800086c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	db08      	blt.n	800088e <_fstat+0x22>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b02      	cmp	r3, #2
 8000880:	dc05      	bgt.n	800088e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000888:	605a      	str	r2, [r3, #4]
    return 0;
 800088a:	2300      	movs	r3, #0
 800088c:	e005      	b.n	800089a <_fstat+0x2e>
  }

  errno = EBADF;
 800088e:	f006 fb13 	bl	8006eb8 <__errno>
 8000892:	4603      	mov	r3, r0
 8000894:	2209      	movs	r2, #9
 8000896:	601a      	str	r2, [r3, #0]
  return 0;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ae:	4a10      	ldr	r2, [pc, #64]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c6:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	210f      	movs	r1, #15
 80008de:	f06f 0001 	mvn.w	r0, #1
 80008e2:	f000 fa44 	bl	8000d6e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b0ac      	sub	sp, #176	@ 0xb0
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2288      	movs	r2, #136	@ 0x88
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f006 fa80 	bl	8006e1a <memset>
  if(huart->Instance==USART2)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a21      	ldr	r2, [pc, #132]	@ (80009a4 <HAL_UART_MspInit+0xb0>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d13b      	bne.n	800099c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000924:	2302      	movs	r3, #2
 8000926:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000928:	2300      	movs	r3, #0
 800092a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4618      	mov	r0, r3
 8000932:	f001 fa85 	bl	8001e40 <HAL_RCCEx_PeriphCLKConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800093c:	f7ff ff0c 	bl	8000758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000940:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <HAL_UART_MspInit+0xb4>)
 8000942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000944:	4a18      	ldr	r2, [pc, #96]	@ (80009a8 <HAL_UART_MspInit+0xb4>)
 8000946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800094a:	6593      	str	r3, [r2, #88]	@ 0x58
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <HAL_UART_MspInit+0xb4>)
 800094e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <HAL_UART_MspInit+0xb4>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095c:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <HAL_UART_MspInit+0xb4>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000964:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <HAL_UART_MspInit+0xb4>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000970:	230c      	movs	r3, #12
 8000972:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000988:	2307      	movs	r3, #7
 800098a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000992:	4619      	mov	r1, r3
 8000994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000998:	f000 fa12 	bl	8000dc0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800099c:	bf00      	nop
 800099e:	37b0      	adds	r7, #176	@ 0xb0
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40004400 	.word	0x40004400
 80009a8:	40021000 	.word	0x40021000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <NMI_Handler+0x4>

080009b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <MemManage_Handler+0x4>

080009c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e6:	f000 f8e5 	bl	8000bb4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009ea:	f004 fee1 	bl	80057b0 <xTaskGetSchedulerState>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d001      	beq.n	80009f8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009f4:	f005 fdd8 	bl	80065a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_lseek>:
  }
  return len;
}

int _lseek(int file, int ptr, int dir)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a20:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <_sbrk+0x5c>)
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <_sbrk+0x60>)
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <_sbrk+0x64>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <_sbrk+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d207      	bcs.n	8000a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a48:	f006 fa36 	bl	8006eb8 <__errno>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	e009      	b.n	8000a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <_sbrk+0x64>)
 8000a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20018000 	.word	0x20018000
 8000a78:	00000400 	.word	0x00000400
 8000a7c:	20000120 	.word	0x20000120
 8000a80:	20001b80 	.word	0x20001b80

08000a84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	@ (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aac:	f7ff ffea 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	@ (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f006 f9f5 	bl	8006ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ada:	f7ff fcf1 	bl	80004c0 <main>

08000ade <LoopForever>:

LoopForever:
    b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000aec:	080073a0 	.word	0x080073a0
  ldr r2, =_sbss
 8000af0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000af4:	20001b7c 	.word	0x20001b7c

08000af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_2_IRQHandler>
	...

08000afc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b06:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <HAL_Init+0x3c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b38 <HAL_Init+0x3c>)
 8000b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b12:	2003      	movs	r0, #3
 8000b14:	f000 f920 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b18:	200f      	movs	r0, #15
 8000b1a:	f000 f80f 	bl	8000b3c <HAL_InitTick>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	e001      	b.n	8000b2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b2a:	f7ff febb 	bl	80008a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b48:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <HAL_InitTick+0x6c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d023      	beq.n	8000b98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <HAL_InitTick+0x70>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <HAL_InitTick+0x6c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f91d 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d10f      	bne.n	8000b92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d809      	bhi.n	8000b8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f000 f8f5 	bl	8000d6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b84:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <HAL_InitTick+0x74>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	e007      	b.n	8000b9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	e004      	b.n	8000b9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	e001      	b.n	8000b9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000124 	.word	0x20000124

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	@ (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000124 	.word	0x20000124

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	@ (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	@ (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	@ 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff47 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff5c 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffb0 	bl	8000d14 <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e17f      	b.n	80010d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 8171 	beq.w	80010ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d005      	beq.n	8000e00 <HAL_GPIO_Init+0x40>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d130      	bne.n	8000e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e36:	2201      	movs	r2, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	f003 0201 	and.w	r2, r3, #1
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d118      	bne.n	8000ea0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e74:	2201      	movs	r2, #1
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	08db      	lsrs	r3, r3, #3
 8000e8a:	f003 0201 	and.w	r2, r3, #1
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d017      	beq.n	8000edc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d123      	bne.n	8000f30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	6939      	ldr	r1, [r7, #16]
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0203 	and.w	r2, r3, #3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80ac 	beq.w	80010ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	4b5f      	ldr	r3, [pc, #380]	@ (80010f0 <HAL_GPIO_Init+0x330>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f76:	4a5e      	ldr	r2, [pc, #376]	@ (80010f0 <HAL_GPIO_Init+0x330>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80010f0 <HAL_GPIO_Init+0x330>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f8a:	4a5a      	ldr	r2, [pc, #360]	@ (80010f4 <HAL_GPIO_Init+0x334>)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fb4:	d025      	beq.n	8001002 <HAL_GPIO_Init+0x242>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4f      	ldr	r2, [pc, #316]	@ (80010f8 <HAL_GPIO_Init+0x338>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d01f      	beq.n	8000ffe <HAL_GPIO_Init+0x23e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4e      	ldr	r2, [pc, #312]	@ (80010fc <HAL_GPIO_Init+0x33c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d019      	beq.n	8000ffa <HAL_GPIO_Init+0x23a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4d      	ldr	r2, [pc, #308]	@ (8001100 <HAL_GPIO_Init+0x340>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d013      	beq.n	8000ff6 <HAL_GPIO_Init+0x236>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4c      	ldr	r2, [pc, #304]	@ (8001104 <HAL_GPIO_Init+0x344>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00d      	beq.n	8000ff2 <HAL_GPIO_Init+0x232>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8001108 <HAL_GPIO_Init+0x348>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d007      	beq.n	8000fee <HAL_GPIO_Init+0x22e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4a      	ldr	r2, [pc, #296]	@ (800110c <HAL_GPIO_Init+0x34c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_GPIO_Init+0x22a>
 8000fe6:	2306      	movs	r3, #6
 8000fe8:	e00c      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8000fea:	2307      	movs	r3, #7
 8000fec:	e00a      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8000fee:	2305      	movs	r3, #5
 8000ff0:	e008      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e004      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8001002:	2300      	movs	r3, #0
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	4093      	lsls	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001014:	4937      	ldr	r1, [pc, #220]	@ (80010f4 <HAL_GPIO_Init+0x334>)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001022:	4b3b      	ldr	r3, [pc, #236]	@ (8001110 <HAL_GPIO_Init+0x350>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001046:	4a32      	ldr	r2, [pc, #200]	@ (8001110 <HAL_GPIO_Init+0x350>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800104c:	4b30      	ldr	r3, [pc, #192]	@ (8001110 <HAL_GPIO_Init+0x350>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001070:	4a27      	ldr	r2, [pc, #156]	@ (8001110 <HAL_GPIO_Init+0x350>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001076:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <HAL_GPIO_Init+0x350>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800109a:	4a1d      	ldr	r2, [pc, #116]	@ (8001110 <HAL_GPIO_Init+0x350>)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <HAL_GPIO_Init+0x350>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010c4:	4a12      	ldr	r2, [pc, #72]	@ (8001110 <HAL_GPIO_Init+0x350>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa22 f303 	lsr.w	r3, r2, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f47f ae78 	bne.w	8000dd0 <HAL_GPIO_Init+0x10>
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010000 	.word	0x40010000
 80010f8:	48000400 	.word	0x48000400
 80010fc:	48000800 	.word	0x48000800
 8001100:	48000c00 	.word	0x48000c00
 8001104:	48001000 	.word	0x48001000
 8001108:	48001400 	.word	0x48001400
 800110c:	48001800 	.word	0x48001800
 8001110:	40010400 	.word	0x40010400

08001114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
 8001120:	4613      	mov	r3, r2
 8001122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001124:	787b      	ldrb	r3, [r7, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001130:	e002      	b.n	8001138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4013      	ands	r3, r2
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43d9      	mvns	r1, r3
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	400b      	ands	r3, r1
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <HAL_PWREx_GetVoltageRange+0x18>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40007000 	.word	0x40007000

08001194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011a2:	d130      	bne.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011b0:	d038      	beq.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2232      	movs	r2, #50	@ 0x32
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	4a1b      	ldr	r2, [pc, #108]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	0c9b      	lsrs	r3, r3, #18
 80011d4:	3301      	adds	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d8:	e002      	b.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e0:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ec:	d102      	bne.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f2      	bne.n	80011da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001200:	d110      	bne.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e00f      	b.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800120e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001212:	d007      	beq.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001214:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800121c:	4a05      	ldr	r2, [pc, #20]	@ (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001222:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40007000 	.word	0x40007000
 8001238:	20000000 	.word	0x20000000
 800123c:	431bde83 	.word	0x431bde83

08001240 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e3ca      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001252:	4b97      	ldr	r3, [pc, #604]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800125c:	4b94      	ldr	r3, [pc, #592]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80e4 	beq.w	800143c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <HAL_RCC_OscConfig+0x4a>
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b0c      	cmp	r3, #12
 800127e:	f040 808b 	bne.w	8001398 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	2b01      	cmp	r3, #1
 8001286:	f040 8087 	bne.w	8001398 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800128a:	4b89      	ldr	r3, [pc, #548]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x62>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e3a2      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1a      	ldr	r2, [r3, #32]
 80012a6:	4b82      	ldr	r3, [pc, #520]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d004      	beq.n	80012bc <HAL_RCC_OscConfig+0x7c>
 80012b2:	4b7f      	ldr	r3, [pc, #508]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012ba:	e005      	b.n	80012c8 <HAL_RCC_OscConfig+0x88>
 80012bc:	4b7c      	ldr	r3, [pc, #496]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d223      	bcs.n	8001314 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fd55 	bl	8001d80 <RCC_SetFlashLatencyFromMSIRange>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e383      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e0:	4b73      	ldr	r3, [pc, #460]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a72      	ldr	r2, [pc, #456]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b70      	ldr	r3, [pc, #448]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	496d      	ldr	r1, [pc, #436]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012fe:	4b6c      	ldr	r3, [pc, #432]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	4968      	ldr	r1, [pc, #416]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
 8001312:	e025      	b.n	8001360 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001314:	4b66      	ldr	r3, [pc, #408]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a65      	ldr	r2, [pc, #404]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b63      	ldr	r3, [pc, #396]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4960      	ldr	r1, [pc, #384]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001332:	4b5f      	ldr	r3, [pc, #380]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	495b      	ldr	r1, [pc, #364]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d109      	bne.n	8001360 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4618      	mov	r0, r3
 8001352:	f000 fd15 	bl	8001d80 <RCC_SetFlashLatencyFromMSIRange>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e343      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001360:	f000 fc4a 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001364:	4602      	mov	r2, r0
 8001366:	4b52      	ldr	r3, [pc, #328]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	4950      	ldr	r1, [pc, #320]	@ (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001372:	5ccb      	ldrb	r3, [r1, r3]
 8001374:	f003 031f 	and.w	r3, r3, #31
 8001378:	fa22 f303 	lsr.w	r3, r2, r3
 800137c:	4a4e      	ldr	r2, [pc, #312]	@ (80014b8 <HAL_RCC_OscConfig+0x278>)
 800137e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001380:	4b4e      	ldr	r3, [pc, #312]	@ (80014bc <HAL_RCC_OscConfig+0x27c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fbd9 	bl	8000b3c <HAL_InitTick>
 800138a:	4603      	mov	r3, r0
 800138c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d052      	beq.n	800143a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	e327      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d032      	beq.n	8001406 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a0:	4b43      	ldr	r3, [pc, #268]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a42      	ldr	r2, [pc, #264]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc16 	bl	8000bdc <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b4:	f7ff fc12 	bl	8000bdc <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e310      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013c6:	4b3a      	ldr	r3, [pc, #232]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d2:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a36      	ldr	r2, [pc, #216]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4931      	ldr	r1, [pc, #196]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f0:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	492c      	ldr	r1, [pc, #176]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
 8001404:	e01a      	b.n	800143c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001406:	4b2a      	ldr	r3, [pc, #168]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a29      	ldr	r2, [pc, #164]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001412:	f7ff fbe3 	bl	8000bdc <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800141a:	f7ff fbdf 	bl	8000bdc <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e2dd      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x1da>
 8001438:	e000      	b.n	800143c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800143a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d074      	beq.n	8001532 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2b08      	cmp	r3, #8
 800144c:	d005      	beq.n	800145a <HAL_RCC_OscConfig+0x21a>
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b0c      	cmp	r3, #12
 8001452:	d10e      	bne.n	8001472 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d10b      	bne.n	8001472 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d064      	beq.n	8001530 <HAL_RCC_OscConfig+0x2f0>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d160      	bne.n	8001530 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e2ba      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x24a>
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0b      	ldr	r2, [pc, #44]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e026      	b.n	80014d8 <HAL_RCC_OscConfig+0x298>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001492:	d115      	bne.n	80014c0 <HAL_RCC_OscConfig+0x280>
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a05      	ldr	r2, [pc, #20]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 800149a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a02      	ldr	r2, [pc, #8]	@ (80014b0 <HAL_RCC_OscConfig+0x270>)
 80014a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	e014      	b.n	80014d8 <HAL_RCC_OscConfig+0x298>
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	08007348 	.word	0x08007348
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000004 	.word	0x20000004
 80014c0:	4ba0      	ldr	r3, [pc, #640]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a9f      	ldr	r2, [pc, #636]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b9d      	ldr	r3, [pc, #628]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a9c      	ldr	r2, [pc, #624]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb7c 	bl	8000bdc <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fb78 	bl	8000bdc <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	@ 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e276      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fa:	4b92      	ldr	r3, [pc, #584]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x2a8>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fb68 	bl	8000bdc <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fb64 	bl	8000bdc <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	@ 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e262      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001522:	4b88      	ldr	r3, [pc, #544]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x2d0>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d060      	beq.n	8001600 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d005      	beq.n	8001550 <HAL_RCC_OscConfig+0x310>
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2b0c      	cmp	r3, #12
 8001548:	d119      	bne.n	800157e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d116      	bne.n	800157e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001550:	4b7c      	ldr	r3, [pc, #496]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_OscConfig+0x328>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e23f      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b76      	ldr	r3, [pc, #472]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	4973      	ldr	r1, [pc, #460]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800157c:	e040      	b.n	8001600 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d023      	beq.n	80015ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001586:	4b6f      	ldr	r3, [pc, #444]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6e      	ldr	r2, [pc, #440]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fb23 	bl	8000bdc <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fb1f 	bl	8000bdc <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e21d      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ac:	4b65      	ldr	r3, [pc, #404]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b62      	ldr	r3, [pc, #392]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	061b      	lsls	r3, r3, #24
 80015c6:	495f      	ldr	r1, [pc, #380]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
 80015cc:	e018      	b.n	8001600 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80015d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff faff 	bl	8000bdc <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff fafb 	bl	8000bdc <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e1f9      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f4:	4b53      	ldr	r3, [pc, #332]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f0      	bne.n	80015e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d03c      	beq.n	8001686 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d01c      	beq.n	800164e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001614:	4b4b      	ldr	r3, [pc, #300]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 8001616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800161a:	4a4a      	ldr	r2, [pc, #296]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fada 	bl	8000bdc <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fad6 	bl	8000bdc <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1d4      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800163e:	4b41      	ldr	r3, [pc, #260]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 8001640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0ef      	beq.n	800162c <HAL_RCC_OscConfig+0x3ec>
 800164c:	e01b      	b.n	8001686 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164e:	4b3d      	ldr	r3, [pc, #244]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 8001650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001654:	4a3b      	ldr	r2, [pc, #236]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165e:	f7ff fabd 	bl	8000bdc <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff fab9 	bl	8000bdc <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e1b7      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001678:	4b32      	ldr	r3, [pc, #200]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 800167a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1ef      	bne.n	8001666 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80a6 	beq.w	80017e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001698:	4b2a      	ldr	r3, [pc, #168]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10d      	bne.n	80016c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a4:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a8:	4a26      	ldr	r2, [pc, #152]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b0:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016bc:	2301      	movs	r3, #1
 80016be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c0:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <HAL_RCC_OscConfig+0x508>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d118      	bne.n	80016fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <HAL_RCC_OscConfig+0x508>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001748 <HAL_RCC_OscConfig+0x508>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d8:	f7ff fa80 	bl	8000bdc <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e0:	f7ff fa7c 	bl	8000bdc <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e17a      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <HAL_RCC_OscConfig+0x508>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <HAL_RCC_OscConfig+0x4d8>
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 8001708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800170c:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001716:	e029      	b.n	800176c <HAL_RCC_OscConfig+0x52c>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b05      	cmp	r3, #5
 800171e:	d115      	bne.n	800174c <HAL_RCC_OscConfig+0x50c>
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001726:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001730:	4b04      	ldr	r3, [pc, #16]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 8001732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001736:	4a03      	ldr	r2, [pc, #12]	@ (8001744 <HAL_RCC_OscConfig+0x504>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001740:	e014      	b.n	800176c <HAL_RCC_OscConfig+0x52c>
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	40007000 	.word	0x40007000
 800174c:	4b9c      	ldr	r3, [pc, #624]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 800174e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001752:	4a9b      	ldr	r2, [pc, #620]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800175c:	4b98      	ldr	r3, [pc, #608]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001762:	4a97      	ldr	r2, [pc, #604]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d016      	beq.n	80017a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff fa32 	bl	8000bdc <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177a:	e00a      	b.n	8001792 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7ff fa2e 	bl	8000bdc <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e12a      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001792:	4b8b      	ldr	r3, [pc, #556]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ed      	beq.n	800177c <HAL_RCC_OscConfig+0x53c>
 80017a0:	e015      	b.n	80017ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a2:	f7ff fa1b 	bl	8000bdc <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f7ff fa17 	bl	8000bdc <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e113      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c0:	4b7f      	ldr	r3, [pc, #508]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ed      	bne.n	80017aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ce:	7ffb      	ldrb	r3, [r7, #31]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d105      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d4:	4b7a      	ldr	r3, [pc, #488]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d8:	4a79      	ldr	r2, [pc, #484]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 80017da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017de:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80fe 	beq.w	80019e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	f040 80d0 	bne.w	8001994 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017f4:	4b72      	ldr	r3, [pc, #456]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f003 0203 	and.w	r2, r3, #3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	429a      	cmp	r2, r3
 8001806:	d130      	bne.n	800186a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	3b01      	subs	r3, #1
 8001814:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d127      	bne.n	800186a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001824:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d11f      	bne.n	800186a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001834:	2a07      	cmp	r2, #7
 8001836:	bf14      	ite	ne
 8001838:	2201      	movne	r2, #1
 800183a:	2200      	moveq	r2, #0
 800183c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800183e:	4293      	cmp	r3, r2
 8001840:	d113      	bne.n	800186a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184c:	085b      	lsrs	r3, r3, #1
 800184e:	3b01      	subs	r3, #1
 8001850:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d109      	bne.n	800186a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	3b01      	subs	r3, #1
 8001864:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	d06e      	beq.n	8001948 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b0c      	cmp	r3, #12
 800186e:	d069      	beq.n	8001944 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001870:	4b53      	ldr	r3, [pc, #332]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d105      	bne.n	8001888 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800187c:	4b50      	ldr	r3, [pc, #320]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0ad      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800188c:	4b4c      	ldr	r3, [pc, #304]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a4b      	ldr	r2, [pc, #300]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001896:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001898:	f7ff f9a0 	bl	8000bdc <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff f99c 	bl	8000bdc <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e09a      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b2:	4b43      	ldr	r3, [pc, #268]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018be:	4b40      	ldr	r3, [pc, #256]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	4b40      	ldr	r3, [pc, #256]	@ (80019c4 <HAL_RCC_OscConfig+0x784>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018ce:	3a01      	subs	r2, #1
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	4311      	orrs	r1, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018d8:	0212      	lsls	r2, r2, #8
 80018da:	4311      	orrs	r1, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018e0:	0852      	lsrs	r2, r2, #1
 80018e2:	3a01      	subs	r2, #1
 80018e4:	0552      	lsls	r2, r2, #21
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018ec:	0852      	lsrs	r2, r2, #1
 80018ee:	3a01      	subs	r2, #1
 80018f0:	0652      	lsls	r2, r2, #25
 80018f2:	4311      	orrs	r1, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018f8:	0912      	lsrs	r2, r2, #4
 80018fa:	0452      	lsls	r2, r2, #17
 80018fc:	430a      	orrs	r2, r1
 80018fe:	4930      	ldr	r1, [pc, #192]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001900:	4313      	orrs	r3, r2
 8001902:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001904:	4b2e      	ldr	r3, [pc, #184]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a2d      	ldr	r2, [pc, #180]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 800190a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800190e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001910:	4b2b      	ldr	r3, [pc, #172]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4a2a      	ldr	r2, [pc, #168]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800191a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800191c:	f7ff f95e 	bl	8000bdc <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff f95a 	bl	8000bdc <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e058      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001936:	4b22      	ldr	r3, [pc, #136]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001942:	e050      	b.n	80019e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e04f      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001948:	4b1d      	ldr	r3, [pc, #116]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d148      	bne.n	80019e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001954:	4b1a      	ldr	r3, [pc, #104]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a19      	ldr	r2, [pc, #100]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 800195a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800195e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001960:	4b17      	ldr	r3, [pc, #92]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4a16      	ldr	r2, [pc, #88]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800196a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800196c:	f7ff f936 	bl	8000bdc <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f932 	bl	8000bdc <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e030      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x734>
 8001992:	e028      	b.n	80019e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	d023      	beq.n	80019e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a08      	ldr	r2, [pc, #32]	@ (80019c0 <HAL_RCC_OscConfig+0x780>)
 80019a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff f919 	bl	8000bdc <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ac:	e00c      	b.n	80019c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ae:	f7ff f915 	bl	8000bdc <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d905      	bls.n	80019c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e013      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
 80019c0:	40021000 	.word	0x40021000
 80019c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <HAL_RCC_OscConfig+0x7b0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1ec      	bne.n	80019ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_RCC_OscConfig+0x7b0>)
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	4905      	ldr	r1, [pc, #20]	@ (80019f0 <HAL_RCC_OscConfig+0x7b0>)
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_RCC_OscConfig+0x7b4>)
 80019dc:	4013      	ands	r3, r2
 80019de:	60cb      	str	r3, [r1, #12]
 80019e0:	e001      	b.n	80019e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	feeefffc 	.word	0xfeeefffc

080019f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0e7      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b75      	ldr	r3, [pc, #468]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d910      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b72      	ldr	r3, [pc, #456]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 0207 	bic.w	r2, r3, #7
 8001a22:	4970      	ldr	r1, [pc, #448]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b6e      	ldr	r3, [pc, #440]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0cf      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d010      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	4b66      	ldr	r3, [pc, #408]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d908      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a58:	4b63      	ldr	r3, [pc, #396]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4960      	ldr	r1, [pc, #384]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d04c      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d121      	bne.n	8001ace <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0a6      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a96:	4b54      	ldr	r3, [pc, #336]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d115      	bne.n	8001ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e09a      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aae:	4b4e      	ldr	r3, [pc, #312]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e08e      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001abe:	4b4a      	ldr	r3, [pc, #296]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e086      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ace:	4b46      	ldr	r3, [pc, #280]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f023 0203 	bic.w	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4943      	ldr	r1, [pc, #268]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae0:	f7ff f87c 	bl	8000bdc <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7ff f878 	bl	8000bdc <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e06e      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	4b3a      	ldr	r3, [pc, #232]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 020c 	and.w	r2, r3, #12
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1eb      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d010      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	4b31      	ldr	r3, [pc, #196]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d208      	bcs.n	8001b3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	492b      	ldr	r1, [pc, #172]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3e:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d210      	bcs.n	8001b6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4c:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 0207 	bic.w	r2, r3, #7
 8001b54:	4923      	ldr	r1, [pc, #140]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5c:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e036      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d008      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	4918      	ldr	r1, [pc, #96]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d009      	beq.n	8001bac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4910      	ldr	r1, [pc, #64]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bac:	f000 f824 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	490b      	ldr	r1, [pc, #44]	@ (8001bec <HAL_RCC_ClockConfig+0x1f4>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	4a09      	ldr	r2, [pc, #36]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f8>)
 8001bca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bcc:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1fc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe ffb3 	bl	8000b3c <HAL_InitTick>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bda:	7afb      	ldrb	r3, [r7, #11]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40022000 	.word	0x40022000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	08007348 	.word	0x08007348
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	@ 0x24
 8001bfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c06:	4b3e      	ldr	r3, [pc, #248]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c10:	4b3b      	ldr	r3, [pc, #236]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x34>
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d121      	bne.n	8001c6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d11e      	bne.n	8001c6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c2c:	4b34      	ldr	r3, [pc, #208]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c38:	4b31      	ldr	r3, [pc, #196]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e005      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c48:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c54:	4a2b      	ldr	r2, [pc, #172]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10d      	bne.n	8001c80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d102      	bne.n	8001c76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c70:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	e004      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c7c:	4b23      	ldr	r3, [pc, #140]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d134      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c86:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d003      	beq.n	8001c9e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d003      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0xac>
 8001c9c:	e005      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca0:	617b      	str	r3, [r7, #20]
      break;
 8001ca2:	e005      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ca6:	617b      	str	r3, [r7, #20]
      break;
 8001ca8:	e002      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	617b      	str	r3, [r7, #20]
      break;
 8001cae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	3301      	adds	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	fb03 f202 	mul.w	r2, r3, r2
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	0e5b      	lsrs	r3, r3, #25
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3724      	adds	r7, #36	@ 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	08007360 	.word	0x08007360
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	007a1200 	.word	0x007a1200

08001d10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4904      	ldr	r1, [pc, #16]	@ (8001d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	08007358 	.word	0x08007358

08001d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d58:	f7ff ffda 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	0adb      	lsrs	r3, r3, #11
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	4904      	ldr	r1, [pc, #16]	@ (8001d7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08007358 	.word	0x08007358

08001d80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d98:	f7ff f9ee 	bl	8001178 <HAL_PWREx_GetVoltageRange>
 8001d9c:	6178      	str	r0, [r7, #20]
 8001d9e:	e014      	b.n	8001dca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001da0:	4b25      	ldr	r3, [pc, #148]	@ (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da4:	4a24      	ldr	r2, [pc, #144]	@ (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dac:	4b22      	ldr	r3, [pc, #136]	@ (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001db8:	f7ff f9de 	bl	8001178 <HAL_PWREx_GetVoltageRange>
 8001dbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dd0:	d10b      	bne.n	8001dea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b80      	cmp	r3, #128	@ 0x80
 8001dd6:	d919      	bls.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ddc:	d902      	bls.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dde:	2302      	movs	r3, #2
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	e013      	b.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de4:	2301      	movs	r3, #1
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	e010      	b.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b80      	cmp	r3, #128	@ 0x80
 8001dee:	d902      	bls.n	8001df6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001df0:	2303      	movs	r3, #3
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	e00a      	b.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b80      	cmp	r3, #128	@ 0x80
 8001dfa:	d102      	bne.n	8001e02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	e004      	b.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b70      	cmp	r3, #112	@ 0x70
 8001e06:	d101      	bne.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e08:	2301      	movs	r3, #1
 8001e0a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f023 0207 	bic.w	r2, r3, #7
 8001e14:	4909      	ldr	r1, [pc, #36]	@ (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e1c:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40022000 	.word	0x40022000

08001e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e48:	2300      	movs	r3, #0
 8001e4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d041      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e64:	d02a      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e66:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e6a:	d824      	bhi.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e70:	d008      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e76:	d81e      	bhi.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e80:	d010      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e82:	e018      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e84:	4b86      	ldr	r3, [pc, #536]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4a85      	ldr	r2, [pc, #532]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e90:	e015      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fabb 	bl	8002414 <RCCEx_PLLSAI1_Config>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ea2:	e00c      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3320      	adds	r3, #32
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fba6 	bl	80025fc <RCCEx_PLLSAI2_Config>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eb4:	e003      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eba:	e000      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ebe:	7cfb      	ldrb	r3, [r7, #19]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ec4:	4b76      	ldr	r3, [pc, #472]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ed2:	4973      	ldr	r1, [pc, #460]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001eda:	e001      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001edc:	7cfb      	ldrb	r3, [r7, #19]
 8001ede:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d041      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ef0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ef4:	d02a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ef6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001efa:	d824      	bhi.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001efc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f00:	d008      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f06:	d81e      	bhi.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f10:	d010      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f12:	e018      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f14:	4b62      	ldr	r3, [pc, #392]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a61      	ldr	r2, [pc, #388]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f20:	e015      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fa73 	bl	8002414 <RCCEx_PLLSAI1_Config>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f32:	e00c      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3320      	adds	r3, #32
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fb5e 	bl	80025fc <RCCEx_PLLSAI2_Config>
 8001f40:	4603      	mov	r3, r0
 8001f42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f44:	e003      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	74fb      	strb	r3, [r7, #19]
      break;
 8001f4a:	e000      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f4e:	7cfb      	ldrb	r3, [r7, #19]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f54:	4b52      	ldr	r3, [pc, #328]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f62:	494f      	ldr	r1, [pc, #316]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f6a:	e001      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80a0 	beq.w	80020be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f82:	4b47      	ldr	r3, [pc, #284]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f92:	2300      	movs	r3, #0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f98:	4b41      	ldr	r3, [pc, #260]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	4a40      	ldr	r2, [pc, #256]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa4:	4b3e      	ldr	r3, [pc, #248]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a3a      	ldr	r2, [pc, #232]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fc0:	f7fe fe0c 	bl	8000bdc <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fc6:	e009      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc8:	f7fe fe08 	bl	8000bdc <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d902      	bls.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	74fb      	strb	r3, [r7, #19]
        break;
 8001fda:	e005      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fdc:	4b31      	ldr	r3, [pc, #196]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ef      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fe8:	7cfb      	ldrb	r3, [r7, #19]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d15c      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fee:	4b2c      	ldr	r3, [pc, #176]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ff8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01f      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	d019      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800200c:	4b24      	ldr	r3, [pc, #144]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002016:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002018:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201e:	4a20      	ldr	r2, [pc, #128]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002028:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202e:	4a1c      	ldr	r2, [pc, #112]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002038:	4a19      	ldr	r2, [pc, #100]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d016      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7fe fdc7 	bl	8000bdc <HAL_GetTick>
 800204e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002050:	e00b      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe fdc3 	bl	8000bdc <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d902      	bls.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	74fb      	strb	r3, [r7, #19]
            break;
 8002068:	e006      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206a:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0ec      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10c      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002084:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800208e:	4904      	ldr	r1, [pc, #16]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002096:	e009      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	74bb      	strb	r3, [r7, #18]
 800209c:	e006      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ac:	7c7b      	ldrb	r3, [r7, #17]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4b9e      	ldr	r3, [pc, #632]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b6:	4a9d      	ldr	r2, [pc, #628]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ca:	4b98      	ldr	r3, [pc, #608]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d0:	f023 0203 	bic.w	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d8:	4994      	ldr	r1, [pc, #592]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ec:	4b8f      	ldr	r3, [pc, #572]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f2:	f023 020c 	bic.w	r2, r3, #12
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020fa:	498c      	ldr	r1, [pc, #560]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800210e:	4b87      	ldr	r3, [pc, #540]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002114:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	4983      	ldr	r1, [pc, #524]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002130:	4b7e      	ldr	r3, [pc, #504]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	497b      	ldr	r1, [pc, #492]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002152:	4b76      	ldr	r3, [pc, #472]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002158:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002160:	4972      	ldr	r1, [pc, #456]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002174:	4b6d      	ldr	r3, [pc, #436]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	496a      	ldr	r1, [pc, #424]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002196:	4b65      	ldr	r3, [pc, #404]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a4:	4961      	ldr	r1, [pc, #388]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021b8:	4b5c      	ldr	r3, [pc, #368]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c6:	4959      	ldr	r1, [pc, #356]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021da:	4b54      	ldr	r3, [pc, #336]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021e8:	4950      	ldr	r1, [pc, #320]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021fc:	4b4b      	ldr	r3, [pc, #300]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002202:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220a:	4948      	ldr	r1, [pc, #288]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800221e:	4b43      	ldr	r3, [pc, #268]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002224:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222c:	493f      	ldr	r1, [pc, #252]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d028      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002240:	4b3a      	ldr	r3, [pc, #232]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002246:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800224e:	4937      	ldr	r1, [pc, #220]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800225a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800225e:	d106      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002260:	4b32      	ldr	r3, [pc, #200]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a31      	ldr	r2, [pc, #196]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800226a:	60d3      	str	r3, [r2, #12]
 800226c:	e011      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002272:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002276:	d10c      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3304      	adds	r3, #4
 800227c:	2101      	movs	r1, #1
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f8c8 	bl	8002414 <RCCEx_PLLSAI1_Config>
 8002284:	4603      	mov	r3, r0
 8002286:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d028      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800229e:	4b23      	ldr	r3, [pc, #140]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ac:	491f      	ldr	r1, [pc, #124]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022bc:	d106      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022be:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	4a1a      	ldr	r2, [pc, #104]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022c8:	60d3      	str	r3, [r2, #12]
 80022ca:	e011      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3304      	adds	r3, #4
 80022da:	2101      	movs	r1, #1
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 f899 	bl	8002414 <RCCEx_PLLSAI1_Config>
 80022e2:	4603      	mov	r3, r0
 80022e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022e6:	7cfb      	ldrb	r3, [r7, #19]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d02b      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002302:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800230a:	4908      	ldr	r1, [pc, #32]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800231a:	d109      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800231c:	4b03      	ldr	r3, [pc, #12]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a02      	ldr	r2, [pc, #8]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002326:	60d3      	str	r3, [r2, #12]
 8002328:	e014      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002334:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002338:	d10c      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3304      	adds	r3, #4
 800233e:	2101      	movs	r1, #1
 8002340:	4618      	mov	r0, r3
 8002342:	f000 f867 	bl	8002414 <RCCEx_PLLSAI1_Config>
 8002346:	4603      	mov	r3, r0
 8002348:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d02f      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002360:	4b2b      	ldr	r3, [pc, #172]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002366:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800236e:	4928      	ldr	r1, [pc, #160]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800237a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800237e:	d10d      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	2102      	movs	r1, #2
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f844 	bl	8002414 <RCCEx_PLLSAI1_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d014      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	74bb      	strb	r3, [r7, #18]
 800239a:	e011      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3320      	adds	r3, #32
 80023aa:	2102      	movs	r1, #2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 f925 	bl	80025fc <RCCEx_PLLSAI2_Config>
 80023b2:	4603      	mov	r3, r0
 80023b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023cc:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023da:	490d      	ldr	r1, [pc, #52]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023ee:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023fe:	4904      	ldr	r1, [pc, #16]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002406:	7cbb      	ldrb	r3, [r7, #18]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000

08002414 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002422:	4b75      	ldr	r3, [pc, #468]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d018      	beq.n	8002460 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800242e:	4b72      	ldr	r3, [pc, #456]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0203 	and.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d10d      	bne.n	800245a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
       ||
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002446:	4b6c      	ldr	r3, [pc, #432]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
       ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d047      	beq.n	80024ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e044      	b.n	80024ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d018      	beq.n	800249a <RCCEx_PLLSAI1_Config+0x86>
 8002468:	2b03      	cmp	r3, #3
 800246a:	d825      	bhi.n	80024b8 <RCCEx_PLLSAI1_Config+0xa4>
 800246c:	2b01      	cmp	r3, #1
 800246e:	d002      	beq.n	8002476 <RCCEx_PLLSAI1_Config+0x62>
 8002470:	2b02      	cmp	r3, #2
 8002472:	d009      	beq.n	8002488 <RCCEx_PLLSAI1_Config+0x74>
 8002474:	e020      	b.n	80024b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002476:	4b60      	ldr	r3, [pc, #384]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d11d      	bne.n	80024be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002486:	e01a      	b.n	80024be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002488:	4b5b      	ldr	r3, [pc, #364]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002490:	2b00      	cmp	r3, #0
 8002492:	d116      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002498:	e013      	b.n	80024c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800249a:	4b57      	ldr	r3, [pc, #348]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024a6:	4b54      	ldr	r3, [pc, #336]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024b6:	e006      	b.n	80024c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
      break;
 80024bc:	e004      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024be:	bf00      	nop
 80024c0:	e002      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024c2:	bf00      	nop
 80024c4:	e000      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10d      	bne.n	80024ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ce:	4b4a      	ldr	r3, [pc, #296]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	430b      	orrs	r3, r1
 80024e4:	4944      	ldr	r1, [pc, #272]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d17d      	bne.n	80025ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024f0:	4b41      	ldr	r3, [pc, #260]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a40      	ldr	r2, [pc, #256]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024fc:	f7fe fb6e 	bl	8000bdc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002502:	e009      	b.n	8002518 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002504:	f7fe fb6a 	bl	8000bdc <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d902      	bls.n	8002518 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	73fb      	strb	r3, [r7, #15]
        break;
 8002516:	e005      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002518:	4b37      	ldr	r3, [pc, #220]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ef      	bne.n	8002504 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d160      	bne.n	80025ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d111      	bne.n	8002554 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002530:	4b31      	ldr	r3, [pc, #196]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6892      	ldr	r2, [r2, #8]
 8002540:	0211      	lsls	r1, r2, #8
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68d2      	ldr	r2, [r2, #12]
 8002546:	0912      	lsrs	r2, r2, #4
 8002548:	0452      	lsls	r2, r2, #17
 800254a:	430a      	orrs	r2, r1
 800254c:	492a      	ldr	r1, [pc, #168]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	610b      	str	r3, [r1, #16]
 8002552:	e027      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d112      	bne.n	8002580 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800255a:	4b27      	ldr	r3, [pc, #156]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002562:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6892      	ldr	r2, [r2, #8]
 800256a:	0211      	lsls	r1, r2, #8
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6912      	ldr	r2, [r2, #16]
 8002570:	0852      	lsrs	r2, r2, #1
 8002572:	3a01      	subs	r2, #1
 8002574:	0552      	lsls	r2, r2, #21
 8002576:	430a      	orrs	r2, r1
 8002578:	491f      	ldr	r1, [pc, #124]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	610b      	str	r3, [r1, #16]
 800257e:	e011      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002580:	4b1d      	ldr	r3, [pc, #116]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002588:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6892      	ldr	r2, [r2, #8]
 8002590:	0211      	lsls	r1, r2, #8
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6952      	ldr	r2, [r2, #20]
 8002596:	0852      	lsrs	r2, r2, #1
 8002598:	3a01      	subs	r2, #1
 800259a:	0652      	lsls	r2, r2, #25
 800259c:	430a      	orrs	r2, r1
 800259e:	4916      	ldr	r1, [pc, #88]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025a4:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a13      	ldr	r2, [pc, #76]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7fe fb14 	bl	8000bdc <HAL_GetTick>
 80025b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b6:	e009      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025b8:	f7fe fb10 	bl	8000bdc <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d902      	bls.n	80025cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	73fb      	strb	r3, [r7, #15]
          break;
 80025ca:	e005      	b.n	80025d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025cc:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ef      	beq.n	80025b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4904      	ldr	r1, [pc, #16]	@ (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000

080025fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800260a:	4b6a      	ldr	r3, [pc, #424]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002616:	4b67      	ldr	r3, [pc, #412]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0203 	and.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d10d      	bne.n	8002642 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
       ||
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800262e:	4b61      	ldr	r3, [pc, #388]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
       ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d047      	beq.n	80026d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e044      	b.n	80026d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d018      	beq.n	8002682 <RCCEx_PLLSAI2_Config+0x86>
 8002650:	2b03      	cmp	r3, #3
 8002652:	d825      	bhi.n	80026a0 <RCCEx_PLLSAI2_Config+0xa4>
 8002654:	2b01      	cmp	r3, #1
 8002656:	d002      	beq.n	800265e <RCCEx_PLLSAI2_Config+0x62>
 8002658:	2b02      	cmp	r3, #2
 800265a:	d009      	beq.n	8002670 <RCCEx_PLLSAI2_Config+0x74>
 800265c:	e020      	b.n	80026a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800265e:	4b55      	ldr	r3, [pc, #340]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11d      	bne.n	80026a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266e:	e01a      	b.n	80026a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002670:	4b50      	ldr	r3, [pc, #320]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d116      	bne.n	80026aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002680:	e013      	b.n	80026aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002682:	4b4c      	ldr	r3, [pc, #304]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800268e:	4b49      	ldr	r3, [pc, #292]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800269e:	e006      	b.n	80026ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      break;
 80026a4:	e004      	b.n	80026b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026a6:	bf00      	nop
 80026a8:	e002      	b.n	80026b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026aa:	bf00      	nop
 80026ac:	e000      	b.n	80026b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026b6:	4b3f      	ldr	r3, [pc, #252]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	430b      	orrs	r3, r1
 80026cc:	4939      	ldr	r1, [pc, #228]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d167      	bne.n	80027a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026d8:	4b36      	ldr	r3, [pc, #216]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a35      	ldr	r2, [pc, #212]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e4:	f7fe fa7a 	bl	8000bdc <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026ea:	e009      	b.n	8002700 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026ec:	f7fe fa76 	bl	8000bdc <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d902      	bls.n	8002700 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	73fb      	strb	r3, [r7, #15]
        break;
 80026fe:	e005      	b.n	800270c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002700:	4b2c      	ldr	r3, [pc, #176]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ef      	bne.n	80026ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d14a      	bne.n	80027a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d111      	bne.n	800273c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002718:	4b26      	ldr	r3, [pc, #152]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6892      	ldr	r2, [r2, #8]
 8002728:	0211      	lsls	r1, r2, #8
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68d2      	ldr	r2, [r2, #12]
 800272e:	0912      	lsrs	r2, r2, #4
 8002730:	0452      	lsls	r2, r2, #17
 8002732:	430a      	orrs	r2, r1
 8002734:	491f      	ldr	r1, [pc, #124]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	614b      	str	r3, [r1, #20]
 800273a:	e011      	b.n	8002760 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800273c:	4b1d      	ldr	r3, [pc, #116]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002744:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6892      	ldr	r2, [r2, #8]
 800274c:	0211      	lsls	r1, r2, #8
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6912      	ldr	r2, [r2, #16]
 8002752:	0852      	lsrs	r2, r2, #1
 8002754:	3a01      	subs	r2, #1
 8002756:	0652      	lsls	r2, r2, #25
 8002758:	430a      	orrs	r2, r1
 800275a:	4916      	ldr	r1, [pc, #88]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275c:	4313      	orrs	r3, r2
 800275e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002760:	4b14      	ldr	r3, [pc, #80]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a13      	ldr	r2, [pc, #76]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800276a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7fe fa36 	bl	8000bdc <HAL_GetTick>
 8002770:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002772:	e009      	b.n	8002788 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002774:	f7fe fa32 	bl	8000bdc <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d902      	bls.n	8002788 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	73fb      	strb	r3, [r7, #15]
          break;
 8002786:	e005      	b.n	8002794 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002788:	4b0a      	ldr	r3, [pc, #40]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ef      	beq.n	8002774 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800279a:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	4904      	ldr	r1, [pc, #16]	@ (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000

080027b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e040      	b.n	800284c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fe f88a 	bl	80008f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2224      	movs	r2, #36	@ 0x24
 80027e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fc32 	bl	8003068 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f977 	bl	8002af8 <UART_SetConfig>
 800280a:	4603      	mov	r3, r0
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e01b      	b.n	800284c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fcb1 	bl	80031ac <UART_CheckIdleState>
 800284a:	4603      	mov	r3, r0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	@ 0x28
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002868:	2b20      	cmp	r3, #32
 800286a:	d177      	bne.n	800295c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_UART_Transmit+0x24>
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e070      	b.n	800295e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2221      	movs	r2, #33	@ 0x21
 8002888:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800288a:	f7fe f9a7 	bl	8000bdc <HAL_GetTick>
 800288e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	88fa      	ldrh	r2, [r7, #6]
 800289c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028a8:	d108      	bne.n	80028bc <HAL_UART_Transmit+0x68>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d104      	bne.n	80028bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	e003      	b.n	80028c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028c4:	e02f      	b.n	8002926 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2180      	movs	r1, #128	@ 0x80
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fd13 	bl	80032fc <UART_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e03b      	b.n	800295e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10b      	bne.n	8002904 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	881a      	ldrh	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f8:	b292      	uxth	r2, r2
 80028fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	3302      	adds	r3, #2
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	e007      	b.n	8002914 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	781a      	ldrb	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1c9      	bne.n	80028c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	2140      	movs	r1, #64	@ 0x40
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fcdd 	bl	80032fc <UART_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d004      	beq.n	8002952 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e005      	b.n	800295e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e000      	b.n	800295e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800295c:	2302      	movs	r3, #2
  }
}
 800295e:	4618      	mov	r0, r3
 8002960:	3720      	adds	r7, #32
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b08a      	sub	sp, #40	@ 0x28
 800296a:	af02      	add	r7, sp, #8
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	4613      	mov	r3, r2
 8002974:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800297c:	2b20      	cmp	r3, #32
 800297e:	f040 80b6 	bne.w	8002aee <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <HAL_UART_Receive+0x28>
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e0ae      	b.n	8002af0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2222      	movs	r2, #34	@ 0x22
 800299e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029a8:	f7fe f918 	bl	8000bdc <HAL_GetTick>
 80029ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	88fa      	ldrh	r2, [r7, #6]
 80029b2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	88fa      	ldrh	r2, [r7, #6]
 80029ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029c6:	d10e      	bne.n	80029e6 <HAL_UART_Receive+0x80>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <HAL_UART_Receive+0x76>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80029d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80029da:	e02d      	b.n	8002a38 <HAL_UART_Receive+0xd2>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	22ff      	movs	r2, #255	@ 0xff
 80029e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80029e4:	e028      	b.n	8002a38 <HAL_UART_Receive+0xd2>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10d      	bne.n	8002a0a <HAL_UART_Receive+0xa4>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d104      	bne.n	8002a00 <HAL_UART_Receive+0x9a>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	22ff      	movs	r2, #255	@ 0xff
 80029fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80029fe:	e01b      	b.n	8002a38 <HAL_UART_Receive+0xd2>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	227f      	movs	r2, #127	@ 0x7f
 8002a04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002a08:	e016      	b.n	8002a38 <HAL_UART_Receive+0xd2>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a12:	d10d      	bne.n	8002a30 <HAL_UART_Receive+0xca>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d104      	bne.n	8002a26 <HAL_UART_Receive+0xc0>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	227f      	movs	r2, #127	@ 0x7f
 8002a20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002a24:	e008      	b.n	8002a38 <HAL_UART_Receive+0xd2>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	223f      	movs	r2, #63	@ 0x3f
 8002a2a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002a2e:	e003      	b.n	8002a38 <HAL_UART_Receive+0xd2>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002a3e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a48:	d108      	bne.n	8002a5c <HAL_UART_Receive+0xf6>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	e003      	b.n	8002a64 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a64:	e037      	b.n	8002ad6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2120      	movs	r1, #32
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fc43 	bl	80032fc <UART_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e033      	b.n	8002af0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	8a7b      	ldrh	r3, [r7, #18]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	e00d      	b.n	8002ac4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	8a7b      	ldrh	r3, [r7, #18]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1c1      	bne.n	8002a66 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3720      	adds	r7, #32
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002afc:	b08a      	sub	sp, #40	@ 0x28
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4ba4      	ldr	r3, [pc, #656]	@ (8002db8 <UART_SetConfig+0x2c0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a99      	ldr	r2, [pc, #612]	@ (8002dbc <UART_SetConfig+0x2c4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d004      	beq.n	8002b64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b60:	4313      	orrs	r3, r2
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b74:	430a      	orrs	r2, r1
 8002b76:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a90      	ldr	r2, [pc, #576]	@ (8002dc0 <UART_SetConfig+0x2c8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d126      	bne.n	8002bd0 <UART_SetConfig+0xd8>
 8002b82:	4b90      	ldr	r3, [pc, #576]	@ (8002dc4 <UART_SetConfig+0x2cc>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d81b      	bhi.n	8002bc8 <UART_SetConfig+0xd0>
 8002b90:	a201      	add	r2, pc, #4	@ (adr r2, 8002b98 <UART_SetConfig+0xa0>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bb9 	.word	0x08002bb9
 8002ba0:	08002bb1 	.word	0x08002bb1
 8002ba4:	08002bc1 	.word	0x08002bc1
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bae:	e116      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bb6:	e112      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bbe:	e10e      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bc6:	e10a      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002bc8:	2310      	movs	r3, #16
 8002bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bce:	e106      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a7c      	ldr	r2, [pc, #496]	@ (8002dc8 <UART_SetConfig+0x2d0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d138      	bne.n	8002c4c <UART_SetConfig+0x154>
 8002bda:	4b7a      	ldr	r3, [pc, #488]	@ (8002dc4 <UART_SetConfig+0x2cc>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b0c      	cmp	r3, #12
 8002be6:	d82d      	bhi.n	8002c44 <UART_SetConfig+0x14c>
 8002be8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf0 <UART_SetConfig+0xf8>)
 8002bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bee:	bf00      	nop
 8002bf0:	08002c25 	.word	0x08002c25
 8002bf4:	08002c45 	.word	0x08002c45
 8002bf8:	08002c45 	.word	0x08002c45
 8002bfc:	08002c45 	.word	0x08002c45
 8002c00:	08002c35 	.word	0x08002c35
 8002c04:	08002c45 	.word	0x08002c45
 8002c08:	08002c45 	.word	0x08002c45
 8002c0c:	08002c45 	.word	0x08002c45
 8002c10:	08002c2d 	.word	0x08002c2d
 8002c14:	08002c45 	.word	0x08002c45
 8002c18:	08002c45 	.word	0x08002c45
 8002c1c:	08002c45 	.word	0x08002c45
 8002c20:	08002c3d 	.word	0x08002c3d
 8002c24:	2300      	movs	r3, #0
 8002c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c2a:	e0d8      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c32:	e0d4      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002c34:	2304      	movs	r3, #4
 8002c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c3a:	e0d0      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002c3c:	2308      	movs	r3, #8
 8002c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c42:	e0cc      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002c44:	2310      	movs	r3, #16
 8002c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c4a:	e0c8      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a5e      	ldr	r2, [pc, #376]	@ (8002dcc <UART_SetConfig+0x2d4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d125      	bne.n	8002ca2 <UART_SetConfig+0x1aa>
 8002c56:	4b5b      	ldr	r3, [pc, #364]	@ (8002dc4 <UART_SetConfig+0x2cc>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002c60:	2b30      	cmp	r3, #48	@ 0x30
 8002c62:	d016      	beq.n	8002c92 <UART_SetConfig+0x19a>
 8002c64:	2b30      	cmp	r3, #48	@ 0x30
 8002c66:	d818      	bhi.n	8002c9a <UART_SetConfig+0x1a2>
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d00a      	beq.n	8002c82 <UART_SetConfig+0x18a>
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d814      	bhi.n	8002c9a <UART_SetConfig+0x1a2>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <UART_SetConfig+0x182>
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d008      	beq.n	8002c8a <UART_SetConfig+0x192>
 8002c78:	e00f      	b.n	8002c9a <UART_SetConfig+0x1a2>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c80:	e0ad      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002c82:	2302      	movs	r3, #2
 8002c84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c88:	e0a9      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c90:	e0a5      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002c92:	2308      	movs	r3, #8
 8002c94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c98:	e0a1      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ca0:	e09d      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8002dd0 <UART_SetConfig+0x2d8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d125      	bne.n	8002cf8 <UART_SetConfig+0x200>
 8002cac:	4b45      	ldr	r3, [pc, #276]	@ (8002dc4 <UART_SetConfig+0x2cc>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002cb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cb8:	d016      	beq.n	8002ce8 <UART_SetConfig+0x1f0>
 8002cba:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cbc:	d818      	bhi.n	8002cf0 <UART_SetConfig+0x1f8>
 8002cbe:	2b80      	cmp	r3, #128	@ 0x80
 8002cc0:	d00a      	beq.n	8002cd8 <UART_SetConfig+0x1e0>
 8002cc2:	2b80      	cmp	r3, #128	@ 0x80
 8002cc4:	d814      	bhi.n	8002cf0 <UART_SetConfig+0x1f8>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <UART_SetConfig+0x1d8>
 8002cca:	2b40      	cmp	r3, #64	@ 0x40
 8002ccc:	d008      	beq.n	8002ce0 <UART_SetConfig+0x1e8>
 8002cce:	e00f      	b.n	8002cf0 <UART_SetConfig+0x1f8>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cd6:	e082      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cde:	e07e      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ce6:	e07a      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002ce8:	2308      	movs	r3, #8
 8002cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cee:	e076      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cf6:	e072      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a35      	ldr	r2, [pc, #212]	@ (8002dd4 <UART_SetConfig+0x2dc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d12a      	bne.n	8002d58 <UART_SetConfig+0x260>
 8002d02:	4b30      	ldr	r3, [pc, #192]	@ (8002dc4 <UART_SetConfig+0x2cc>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d10:	d01a      	beq.n	8002d48 <UART_SetConfig+0x250>
 8002d12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d16:	d81b      	bhi.n	8002d50 <UART_SetConfig+0x258>
 8002d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d1c:	d00c      	beq.n	8002d38 <UART_SetConfig+0x240>
 8002d1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d22:	d815      	bhi.n	8002d50 <UART_SetConfig+0x258>
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <UART_SetConfig+0x238>
 8002d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d2c:	d008      	beq.n	8002d40 <UART_SetConfig+0x248>
 8002d2e:	e00f      	b.n	8002d50 <UART_SetConfig+0x258>
 8002d30:	2300      	movs	r3, #0
 8002d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d36:	e052      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d3e:	e04e      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002d40:	2304      	movs	r3, #4
 8002d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d46:	e04a      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002d48:	2308      	movs	r3, #8
 8002d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d4e:	e046      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002d50:	2310      	movs	r3, #16
 8002d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d56:	e042      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a17      	ldr	r2, [pc, #92]	@ (8002dbc <UART_SetConfig+0x2c4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d13a      	bne.n	8002dd8 <UART_SetConfig+0x2e0>
 8002d62:	4b18      	ldr	r3, [pc, #96]	@ (8002dc4 <UART_SetConfig+0x2cc>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d70:	d01a      	beq.n	8002da8 <UART_SetConfig+0x2b0>
 8002d72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d76:	d81b      	bhi.n	8002db0 <UART_SetConfig+0x2b8>
 8002d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d7c:	d00c      	beq.n	8002d98 <UART_SetConfig+0x2a0>
 8002d7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d82:	d815      	bhi.n	8002db0 <UART_SetConfig+0x2b8>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <UART_SetConfig+0x298>
 8002d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d8c:	d008      	beq.n	8002da0 <UART_SetConfig+0x2a8>
 8002d8e:	e00f      	b.n	8002db0 <UART_SetConfig+0x2b8>
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d96:	e022      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d9e:	e01e      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002da0:	2304      	movs	r3, #4
 8002da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002da6:	e01a      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002da8:	2308      	movs	r3, #8
 8002daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dae:	e016      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002db0:	2310      	movs	r3, #16
 8002db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002db6:	e012      	b.n	8002dde <UART_SetConfig+0x2e6>
 8002db8:	efff69f3 	.word	0xefff69f3
 8002dbc:	40008000 	.word	0x40008000
 8002dc0:	40013800 	.word	0x40013800
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40004400 	.word	0x40004400
 8002dcc:	40004800 	.word	0x40004800
 8002dd0:	40004c00 	.word	0x40004c00
 8002dd4:	40005000 	.word	0x40005000
 8002dd8:	2310      	movs	r3, #16
 8002dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a9f      	ldr	r2, [pc, #636]	@ (8003060 <UART_SetConfig+0x568>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d17a      	bne.n	8002ede <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002de8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d824      	bhi.n	8002e3a <UART_SetConfig+0x342>
 8002df0:	a201      	add	r2, pc, #4	@ (adr r2, 8002df8 <UART_SetConfig+0x300>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e1d 	.word	0x08002e1d
 8002dfc:	08002e3b 	.word	0x08002e3b
 8002e00:	08002e25 	.word	0x08002e25
 8002e04:	08002e3b 	.word	0x08002e3b
 8002e08:	08002e2b 	.word	0x08002e2b
 8002e0c:	08002e3b 	.word	0x08002e3b
 8002e10:	08002e3b 	.word	0x08002e3b
 8002e14:	08002e3b 	.word	0x08002e3b
 8002e18:	08002e33 	.word	0x08002e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e1c:	f7fe ff84 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002e20:	61f8      	str	r0, [r7, #28]
        break;
 8002e22:	e010      	b.n	8002e46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e24:	4b8f      	ldr	r3, [pc, #572]	@ (8003064 <UART_SetConfig+0x56c>)
 8002e26:	61fb      	str	r3, [r7, #28]
        break;
 8002e28:	e00d      	b.n	8002e46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e2a:	f7fe fee5 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8002e2e:	61f8      	str	r0, [r7, #28]
        break;
 8002e30:	e009      	b.n	8002e46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e36:	61fb      	str	r3, [r7, #28]
        break;
 8002e38:	e005      	b.n	8002e46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002e44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80fb 	beq.w	8003044 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d305      	bcc.n	8002e6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d903      	bls.n	8002e72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002e70:	e0e8      	b.n	8003044 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2200      	movs	r2, #0
 8002e76:	461c      	mov	r4, r3
 8002e78:	4615      	mov	r5, r2
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	022b      	lsls	r3, r5, #8
 8002e84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e88:	0222      	lsls	r2, r4, #8
 8002e8a:	68f9      	ldr	r1, [r7, #12]
 8002e8c:	6849      	ldr	r1, [r1, #4]
 8002e8e:	0849      	lsrs	r1, r1, #1
 8002e90:	2000      	movs	r0, #0
 8002e92:	4688      	mov	r8, r1
 8002e94:	4681      	mov	r9, r0
 8002e96:	eb12 0a08 	adds.w	sl, r2, r8
 8002e9a:	eb43 0b09 	adc.w	fp, r3, r9
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eac:	4650      	mov	r0, sl
 8002eae:	4659      	mov	r1, fp
 8002eb0:	f7fd f98e 	bl	80001d0 <__aeabi_uldivmod>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4613      	mov	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ec2:	d308      	bcc.n	8002ed6 <UART_SetConfig+0x3de>
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eca:	d204      	bcs.n	8002ed6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	60da      	str	r2, [r3, #12]
 8002ed4:	e0b6      	b.n	8003044 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002edc:	e0b2      	b.n	8003044 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee6:	d15e      	bne.n	8002fa6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d828      	bhi.n	8002f42 <UART_SetConfig+0x44a>
 8002ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <UART_SetConfig+0x400>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f1d 	.word	0x08002f1d
 8002efc:	08002f25 	.word	0x08002f25
 8002f00:	08002f2d 	.word	0x08002f2d
 8002f04:	08002f43 	.word	0x08002f43
 8002f08:	08002f33 	.word	0x08002f33
 8002f0c:	08002f43 	.word	0x08002f43
 8002f10:	08002f43 	.word	0x08002f43
 8002f14:	08002f43 	.word	0x08002f43
 8002f18:	08002f3b 	.word	0x08002f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f1c:	f7fe ff04 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002f20:	61f8      	str	r0, [r7, #28]
        break;
 8002f22:	e014      	b.n	8002f4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f24:	f7fe ff16 	bl	8001d54 <HAL_RCC_GetPCLK2Freq>
 8002f28:	61f8      	str	r0, [r7, #28]
        break;
 8002f2a:	e010      	b.n	8002f4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8003064 <UART_SetConfig+0x56c>)
 8002f2e:	61fb      	str	r3, [r7, #28]
        break;
 8002f30:	e00d      	b.n	8002f4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f32:	f7fe fe61 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8002f36:	61f8      	str	r0, [r7, #28]
        break;
 8002f38:	e009      	b.n	8002f4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f3e:	61fb      	str	r3, [r7, #28]
        break;
 8002f40:	e005      	b.n	8002f4e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d077      	beq.n	8003044 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005a      	lsls	r2, r3, #1
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	441a      	add	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d916      	bls.n	8002f9e <UART_SetConfig+0x4a6>
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f76:	d212      	bcs.n	8002f9e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	f023 030f 	bic.w	r3, r3, #15
 8002f80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	8afb      	ldrh	r3, [r7, #22]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	8afa      	ldrh	r2, [r7, #22]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	e052      	b.n	8003044 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002fa4:	e04e      	b.n	8003044 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d827      	bhi.n	8002ffe <UART_SetConfig+0x506>
 8002fae:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb4 <UART_SetConfig+0x4bc>)
 8002fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb4:	08002fd9 	.word	0x08002fd9
 8002fb8:	08002fe1 	.word	0x08002fe1
 8002fbc:	08002fe9 	.word	0x08002fe9
 8002fc0:	08002fff 	.word	0x08002fff
 8002fc4:	08002fef 	.word	0x08002fef
 8002fc8:	08002fff 	.word	0x08002fff
 8002fcc:	08002fff 	.word	0x08002fff
 8002fd0:	08002fff 	.word	0x08002fff
 8002fd4:	08002ff7 	.word	0x08002ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd8:	f7fe fea6 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002fdc:	61f8      	str	r0, [r7, #28]
        break;
 8002fde:	e014      	b.n	800300a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe0:	f7fe feb8 	bl	8001d54 <HAL_RCC_GetPCLK2Freq>
 8002fe4:	61f8      	str	r0, [r7, #28]
        break;
 8002fe6:	e010      	b.n	800300a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8003064 <UART_SetConfig+0x56c>)
 8002fea:	61fb      	str	r3, [r7, #28]
        break;
 8002fec:	e00d      	b.n	800300a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fee:	f7fe fe03 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8002ff2:	61f8      	str	r0, [r7, #28]
        break;
 8002ff4:	e009      	b.n	800300a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ffa:	61fb      	str	r3, [r7, #28]
        break;
 8002ffc:	e005      	b.n	800300a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003008:	bf00      	nop
    }

    if (pclk != 0U)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d019      	beq.n	8003044 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	085a      	lsrs	r2, r3, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	441a      	add	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b0f      	cmp	r3, #15
 8003028:	d909      	bls.n	800303e <UART_SetConfig+0x546>
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003030:	d205      	bcs.n	800303e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	e002      	b.n	8003044 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003050:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003054:	4618      	mov	r0, r3
 8003056:	3728      	adds	r7, #40	@ 0x28
 8003058:	46bd      	mov	sp, r7
 800305a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800305e:	bf00      	nop
 8003060:	40008000 	.word	0x40008000
 8003064:	00f42400 	.word	0x00f42400

08003068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01a      	beq.n	800317e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003166:	d10a      	bne.n	800317e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  }
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b098      	sub	sp, #96	@ 0x60
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031bc:	f7fd fd0e 	bl	8000bdc <HAL_GetTick>
 80031c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d12e      	bne.n	800322e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d8:	2200      	movs	r2, #0
 80031da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f88c 	bl	80032fc <UART_WaitOnFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d021      	beq.n	800322e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f2:	e853 3f00 	ldrex	r3, [r3]
 80031f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003208:	647b      	str	r3, [r7, #68]	@ 0x44
 800320a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800320e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003210:	e841 2300 	strex	r3, r2, [r1]
 8003214:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e6      	bne.n	80031ea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e062      	b.n	80032f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b04      	cmp	r3, #4
 800323a:	d149      	bne.n	80032d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800323c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003244:	2200      	movs	r2, #0
 8003246:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f856 	bl	80032fc <UART_WaitOnFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d03c      	beq.n	80032d0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	623b      	str	r3, [r7, #32]
   return(result);
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800326a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003274:	633b      	str	r3, [r7, #48]	@ 0x30
 8003276:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800327a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e6      	bne.n	8003256 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3308      	adds	r3, #8
 800328e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	60fb      	str	r3, [r7, #12]
   return(result);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3308      	adds	r3, #8
 80032a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032a8:	61fa      	str	r2, [r7, #28]
 80032aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ac:	69b9      	ldr	r1, [r7, #24]
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	e841 2300 	strex	r3, r2, [r1]
 80032b4:	617b      	str	r3, [r7, #20]
   return(result);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e5      	bne.n	8003288 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e011      	b.n	80032f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3758      	adds	r7, #88	@ 0x58
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330c:	e04f      	b.n	80033ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d04b      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003316:	f7fd fc61 	bl	8000bdc <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	429a      	cmp	r2, r3
 8003324:	d302      	bcc.n	800332c <UART_WaitOnFlagUntilTimeout+0x30>
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e04e      	b.n	80033ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d037      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b80      	cmp	r3, #128	@ 0x80
 8003342:	d034      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b40      	cmp	r3, #64	@ 0x40
 8003348:	d031      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b08      	cmp	r3, #8
 8003356:	d110      	bne.n	800337a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2208      	movs	r2, #8
 800335e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f838 	bl	80033d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2208      	movs	r2, #8
 800336a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e029      	b.n	80033ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003384:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003388:	d111      	bne.n	80033ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003392:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f81e 	bl	80033d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e00f      	b.n	80033ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d0a0      	beq.n	800330e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b095      	sub	sp, #84	@ 0x54
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80033fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003402:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800340a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e6      	bne.n	80033de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3308      	adds	r3, #8
 8003416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3308      	adds	r3, #8
 800342e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003430:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003432:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003434:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003438:	e841 2300 	strex	r3, r2, [r1]
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e5      	bne.n	8003410 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003448:	2b01      	cmp	r3, #1
 800344a:	d118      	bne.n	800347e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	e853 3f00 	ldrex	r3, [r3]
 8003458:	60bb      	str	r3, [r7, #8]
   return(result);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f023 0310 	bic.w	r3, r3, #16
 8003460:	647b      	str	r3, [r7, #68]	@ 0x44
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346e:	6979      	ldr	r1, [r7, #20]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	613b      	str	r3, [r7, #16]
   return(result);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e6      	bne.n	800344c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003492:	bf00      	nop
 8003494:	3754      	adds	r7, #84	@ 0x54
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <__NVIC_SetPriority>:
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	6039      	str	r1, [r7, #0]
 80034aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	db0a      	blt.n	80034ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	490c      	ldr	r1, [pc, #48]	@ (80034ec <__NVIC_SetPriority+0x4c>)
 80034ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034be:	0112      	lsls	r2, r2, #4
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	440b      	add	r3, r1
 80034c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80034c8:	e00a      	b.n	80034e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	4908      	ldr	r1, [pc, #32]	@ (80034f0 <__NVIC_SetPriority+0x50>)
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	3b04      	subs	r3, #4
 80034d8:	0112      	lsls	r2, r2, #4
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	440b      	add	r3, r1
 80034de:	761a      	strb	r2, [r3, #24]
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000e100 	.word	0xe000e100
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80034f8:	2100      	movs	r1, #0
 80034fa:	f06f 0004 	mvn.w	r0, #4
 80034fe:	f7ff ffcf 	bl	80034a0 <__NVIC_SetPriority>
#endif
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800350e:	f3ef 8305 	mrs	r3, IPSR
 8003512:	603b      	str	r3, [r7, #0]
  return(result);
 8003514:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800351a:	f06f 0305 	mvn.w	r3, #5
 800351e:	607b      	str	r3, [r7, #4]
 8003520:	e00c      	b.n	800353c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003522:	4b0a      	ldr	r3, [pc, #40]	@ (800354c <osKernelInitialize+0x44>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800352a:	4b08      	ldr	r3, [pc, #32]	@ (800354c <osKernelInitialize+0x44>)
 800352c:	2201      	movs	r2, #1
 800352e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003530:	2300      	movs	r3, #0
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	e002      	b.n	800353c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003536:	f04f 33ff 	mov.w	r3, #4294967295
 800353a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800353c:	687b      	ldr	r3, [r7, #4]
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000128 	.word	0x20000128

08003550 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003556:	f3ef 8305 	mrs	r3, IPSR
 800355a:	603b      	str	r3, [r7, #0]
  return(result);
 800355c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003562:	f06f 0305 	mvn.w	r3, #5
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	e010      	b.n	800358c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800356a:	4b0b      	ldr	r3, [pc, #44]	@ (8003598 <osKernelStart+0x48>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d109      	bne.n	8003586 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003572:	f7ff ffbf 	bl	80034f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003576:	4b08      	ldr	r3, [pc, #32]	@ (8003598 <osKernelStart+0x48>)
 8003578:	2202      	movs	r2, #2
 800357a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800357c:	f001 fcca 	bl	8004f14 <vTaskStartScheduler>
      stat = osOK;
 8003580:	2300      	movs	r3, #0
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	e002      	b.n	800358c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800358c:	687b      	ldr	r3, [r7, #4]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000128 	.word	0x20000128

0800359c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b08e      	sub	sp, #56	@ 0x38
 80035a0:	af04      	add	r7, sp, #16
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ac:	f3ef 8305 	mrs	r3, IPSR
 80035b0:	617b      	str	r3, [r7, #20]
  return(result);
 80035b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d17e      	bne.n	80036b6 <osThreadNew+0x11a>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d07b      	beq.n	80036b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80035be:	2380      	movs	r3, #128	@ 0x80
 80035c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80035c2:	2318      	movs	r3, #24
 80035c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295
 80035ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d045      	beq.n	8003662 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <osThreadNew+0x48>
        name = attr->name;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <osThreadNew+0x6e>
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b38      	cmp	r3, #56	@ 0x38
 80035fc:	d805      	bhi.n	800360a <osThreadNew+0x6e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <osThreadNew+0x72>
        return (NULL);
 800360a:	2300      	movs	r3, #0
 800360c:	e054      	b.n	80036b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00e      	beq.n	8003644 <osThreadNew+0xa8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b5b      	cmp	r3, #91	@ 0x5b
 800362c:	d90a      	bls.n	8003644 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003632:	2b00      	cmp	r3, #0
 8003634:	d006      	beq.n	8003644 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <osThreadNew+0xa8>
        mem = 1;
 800363e:	2301      	movs	r3, #1
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	e010      	b.n	8003666 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10c      	bne.n	8003666 <osThreadNew+0xca>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d108      	bne.n	8003666 <osThreadNew+0xca>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d104      	bne.n	8003666 <osThreadNew+0xca>
          mem = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	e001      	b.n	8003666 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d110      	bne.n	800368e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003674:	9202      	str	r2, [sp, #8]
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6a3a      	ldr	r2, [r7, #32]
 8003680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f001 fa6a 	bl	8004b5c <xTaskCreateStatic>
 8003688:	4603      	mov	r3, r0
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	e013      	b.n	80036b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d110      	bne.n	80036b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	b29a      	uxth	r2, r3
 8003698:	f107 0310 	add.w	r3, r7, #16
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f001 fab8 	bl	8004c1c <xTaskCreate>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d001      	beq.n	80036b6 <osThreadNew+0x11a>
            hTask = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80036b6:	693b      	ldr	r3, [r7, #16]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3728      	adds	r7, #40	@ 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036c8:	f3ef 8305 	mrs	r3, IPSR
 80036cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80036ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <osDelay+0x1c>
    stat = osErrorISR;
 80036d4:	f06f 0305 	mvn.w	r3, #5
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e007      	b.n	80036ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f001 fbde 	bl	8004ea8 <vTaskDelay>
    }
  }

  return (stat);
 80036ec:	68fb      	ldr	r3, [r7, #12]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b08a      	sub	sp, #40	@ 0x28
 80036fa:	af02      	add	r7, sp, #8
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003706:	f3ef 8305 	mrs	r3, IPSR
 800370a:	613b      	str	r3, [r7, #16]
  return(result);
 800370c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800370e:	2b00      	cmp	r3, #0
 8003710:	d175      	bne.n	80037fe <osSemaphoreNew+0x108>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d072      	beq.n	80037fe <osSemaphoreNew+0x108>
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	429a      	cmp	r2, r3
 800371e:	d86e      	bhi.n	80037fe <osSemaphoreNew+0x108>
    mem = -1;
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
 8003724:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d015      	beq.n	8003758 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d006      	beq.n	8003742 <osSemaphoreNew+0x4c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b4f      	cmp	r3, #79	@ 0x4f
 800373a:	d902      	bls.n	8003742 <osSemaphoreNew+0x4c>
        mem = 1;
 800373c:	2301      	movs	r3, #1
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	e00c      	b.n	800375c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d108      	bne.n	800375c <osSemaphoreNew+0x66>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <osSemaphoreNew+0x66>
          mem = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	e001      	b.n	800375c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d04c      	beq.n	80037fe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d128      	bne.n	80037bc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d10a      	bne.n	8003786 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2203      	movs	r2, #3
 8003776:	9200      	str	r2, [sp, #0]
 8003778:	2200      	movs	r2, #0
 800377a:	2100      	movs	r1, #0
 800377c:	2001      	movs	r0, #1
 800377e:	f000 fa2b 	bl	8003bd8 <xQueueGenericCreateStatic>
 8003782:	61f8      	str	r0, [r7, #28]
 8003784:	e005      	b.n	8003792 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003786:	2203      	movs	r2, #3
 8003788:	2100      	movs	r1, #0
 800378a:	2001      	movs	r0, #1
 800378c:	f000 faa1 	bl	8003cd2 <xQueueGenericCreate>
 8003790:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d022      	beq.n	80037de <osSemaphoreNew+0xe8>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d01f      	beq.n	80037de <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800379e:	2300      	movs	r3, #0
 80037a0:	2200      	movs	r2, #0
 80037a2:	2100      	movs	r1, #0
 80037a4:	69f8      	ldr	r0, [r7, #28]
 80037a6:	f000 fb61 	bl	8003e6c <xQueueGenericSend>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d016      	beq.n	80037de <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80037b0:	69f8      	ldr	r0, [r7, #28]
 80037b2:	f000 ffff 	bl	80047b4 <vQueueDelete>
            hSemaphore = NULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e010      	b.n	80037de <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d108      	bne.n	80037d4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	461a      	mov	r2, r3
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 fadf 	bl	8003d8e <xQueueCreateCountingSemaphoreStatic>
 80037d0:	61f8      	str	r0, [r7, #28]
 80037d2:	e004      	b.n	80037de <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fb12 	bl	8003e00 <xQueueCreateCountingSemaphore>
 80037dc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00c      	beq.n	80037fe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e001      	b.n	80037f6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80037f6:	6979      	ldr	r1, [r7, #20]
 80037f8:	69f8      	ldr	r0, [r7, #28]
 80037fa:	f001 f927 	bl	8004a4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80037fe:	69fb      	ldr	r3, [r7, #28]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d103      	bne.n	8003828 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003820:	f06f 0303 	mvn.w	r3, #3
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e039      	b.n	800389c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003828:	f3ef 8305 	mrs	r3, IPSR
 800382c:	60fb      	str	r3, [r7, #12]
  return(result);
 800382e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003830:	2b00      	cmp	r3, #0
 8003832:	d022      	beq.n	800387a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800383a:	f06f 0303 	mvn.w	r3, #3
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e02c      	b.n	800389c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	461a      	mov	r2, r3
 800384c:	2100      	movs	r1, #0
 800384e:	6938      	ldr	r0, [r7, #16]
 8003850:	f000 ff2e 	bl	80046b0 <xQueueReceiveFromISR>
 8003854:	4603      	mov	r3, r0
 8003856:	2b01      	cmp	r3, #1
 8003858:	d003      	beq.n	8003862 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800385a:	f06f 0302 	mvn.w	r3, #2
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e01c      	b.n	800389c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d019      	beq.n	800389c <osSemaphoreAcquire+0x94>
 8003868:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <osSemaphoreAcquire+0xa0>)
 800386a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	e010      	b.n	800389c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800387a:	6839      	ldr	r1, [r7, #0]
 800387c:	6938      	ldr	r0, [r7, #16]
 800387e:	f000 fe07 	bl	8004490 <xQueueSemaphoreTake>
 8003882:	4603      	mov	r3, r0
 8003884:	2b01      	cmp	r3, #1
 8003886:	d009      	beq.n	800389c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800388e:	f06f 0301 	mvn.w	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	e002      	b.n	800389c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003896:	f06f 0302 	mvn.w	r3, #2
 800389a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800389c:	697b      	ldr	r3, [r7, #20]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	e000ed04 	.word	0xe000ed04

080038ac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80038c2:	f06f 0303 	mvn.w	r3, #3
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e02c      	b.n	8003924 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038ca:	f3ef 8305 	mrs	r3, IPSR
 80038ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80038d0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d01a      	beq.n	800390c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80038da:	f107 0308 	add.w	r3, r7, #8
 80038de:	4619      	mov	r1, r3
 80038e0:	6938      	ldr	r0, [r7, #16]
 80038e2:	f000 fc63 	bl	80041ac <xQueueGiveFromISR>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d003      	beq.n	80038f4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80038ec:	f06f 0302 	mvn.w	r3, #2
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	e017      	b.n	8003924 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d014      	beq.n	8003924 <osSemaphoreRelease+0x78>
 80038fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003930 <osSemaphoreRelease+0x84>)
 80038fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	e00b      	b.n	8003924 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800390c:	2300      	movs	r3, #0
 800390e:	2200      	movs	r2, #0
 8003910:	2100      	movs	r1, #0
 8003912:	6938      	ldr	r0, [r7, #16]
 8003914:	f000 faaa 	bl	8003e6c <xQueueGenericSend>
 8003918:	4603      	mov	r3, r0
 800391a:	2b01      	cmp	r3, #1
 800391c:	d002      	beq.n	8003924 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800391e:	f06f 0302 	mvn.w	r3, #2
 8003922:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003924:	697b      	ldr	r3, [r7, #20]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	e000ed04 	.word	0xe000ed04

08003934 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a07      	ldr	r2, [pc, #28]	@ (8003960 <vApplicationGetIdleTaskMemory+0x2c>)
 8003944:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4a06      	ldr	r2, [pc, #24]	@ (8003964 <vApplicationGetIdleTaskMemory+0x30>)
 800394a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2280      	movs	r2, #128	@ 0x80
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	2000012c 	.word	0x2000012c
 8003964:	20000188 	.word	0x20000188

08003968 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a07      	ldr	r2, [pc, #28]	@ (8003994 <vApplicationGetTimerTaskMemory+0x2c>)
 8003978:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4a06      	ldr	r2, [pc, #24]	@ (8003998 <vApplicationGetTimerTaskMemory+0x30>)
 800397e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003986:	601a      	str	r2, [r3, #0]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	20000388 	.word	0x20000388
 8003998:	200003e4 	.word	0x200003e4

0800399c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f103 0208 	add.w	r2, r3, #8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f04f 32ff 	mov.w	r2, #4294967295
 80039b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f103 0208 	add.w	r2, r3, #8
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f103 0208 	add.w	r2, r3, #8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039f6:	b480      	push	{r7}
 80039f8:	b085      	sub	sp, #20
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	601a      	str	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b085      	sub	sp, #20
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d103      	bne.n	8003a5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e00c      	b.n	8003a78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3308      	adds	r3, #8
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	e002      	b.n	8003a6c <vListInsert+0x2e>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d2f6      	bcs.n	8003a66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	601a      	str	r2, [r3, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6892      	ldr	r2, [r2, #8]
 8003ac6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6852      	ldr	r2, [r2, #4]
 8003ad0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d103      	bne.n	8003ae4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	1e5a      	subs	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b30:	f002 fcaa 	bl	8006488 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3c:	68f9      	ldr	r1, [r7, #12]
 8003b3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
 8003b44:	441a      	add	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b60:	3b01      	subs	r3, #1
 8003b62:	68f9      	ldr	r1, [r7, #12]
 8003b64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	441a      	add	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	22ff      	movs	r2, #255	@ 0xff
 8003b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	22ff      	movs	r2, #255	@ 0xff
 8003b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d114      	bne.n	8003bb0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01a      	beq.n	8003bc4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3310      	adds	r3, #16
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fc4c 	bl	8005430 <xTaskRemoveFromEventList>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d012      	beq.n	8003bc4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd4 <xQueueGenericReset+0xd0>)
 8003ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	e009      	b.n	8003bc4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	3310      	adds	r3, #16
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fef1 	bl	800399c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3324      	adds	r3, #36	@ 0x24
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff feec 	bl	800399c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003bc4:	f002 fc92 	bl	80064ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003bc8:	2301      	movs	r3, #1
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08e      	sub	sp, #56	@ 0x38
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10b      	bne.n	8003c04 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
 8003c02:	e7fd      	b.n	8003c00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10b      	bne.n	8003c22 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	e7fd      	b.n	8003c1e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <xQueueGenericCreateStatic+0x56>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <xQueueGenericCreateStatic+0x5a>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <xQueueGenericCreateStatic+0x5c>
 8003c32:	2300      	movs	r3, #0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10b      	bne.n	8003c50 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	623b      	str	r3, [r7, #32]
}
 8003c4a:	bf00      	nop
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d102      	bne.n	8003c5c <xQueueGenericCreateStatic+0x84>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <xQueueGenericCreateStatic+0x88>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <xQueueGenericCreateStatic+0x8a>
 8003c60:	2300      	movs	r3, #0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10b      	bne.n	8003c7e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	61fb      	str	r3, [r7, #28]
}
 8003c78:	bf00      	nop
 8003c7a:	bf00      	nop
 8003c7c:	e7fd      	b.n	8003c7a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c7e:	2350      	movs	r3, #80	@ 0x50
 8003c80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b50      	cmp	r3, #80	@ 0x50
 8003c86:	d00b      	beq.n	8003ca0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	61bb      	str	r3, [r7, #24]
}
 8003c9a:	bf00      	nop
 8003c9c:	bf00      	nop
 8003c9e:	e7fd      	b.n	8003c9c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003ca0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00d      	beq.n	8003cc8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003cb4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f840 	bl	8003d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3730      	adds	r7, #48	@ 0x30
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b08a      	sub	sp, #40	@ 0x28
 8003cd6:	af02      	add	r7, sp, #8
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <xQueueGenericCreate+0x2c>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	613b      	str	r3, [r7, #16]
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	e7fd      	b.n	8003cfa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	3350      	adds	r3, #80	@ 0x50
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f002 fcdd 	bl	80066cc <pvPortMalloc>
 8003d12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d011      	beq.n	8003d3e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	3350      	adds	r3, #80	@ 0x50
 8003d22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d2c:	79fa      	ldrb	r2, [r7, #7]
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f805 	bl	8003d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d3e:	69bb      	ldr	r3, [r7, #24]
	}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d103      	bne.n	8003d64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e002      	b.n	8003d6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d76:	2101      	movs	r1, #1
 8003d78:	69b8      	ldr	r0, [r7, #24]
 8003d7a:	f7ff fec3 	bl	8003b04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b08a      	sub	sp, #40	@ 0x28
 8003d92:	af02      	add	r7, sp, #8
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	61bb      	str	r3, [r7, #24]
}
 8003db2:	bf00      	nop
 8003db4:	bf00      	nop
 8003db6:	e7fd      	b.n	8003db4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d90b      	bls.n	8003dd8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	617b      	str	r3, [r7, #20]
}
 8003dd2:	bf00      	nop
 8003dd4:	bf00      	nop
 8003dd6:	e7fd      	b.n	8003dd4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003dd8:	2302      	movs	r3, #2
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	2100      	movs	r1, #0
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f7ff fef8 	bl	8003bd8 <xQueueGenericCreateStatic>
 8003de8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003df6:	69fb      	ldr	r3, [r7, #28]
	}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3720      	adds	r7, #32
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10b      	bne.n	8003e28 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	613b      	str	r3, [r7, #16]
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	e7fd      	b.n	8003e24 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d90b      	bls.n	8003e48 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	60fb      	str	r3, [r7, #12]
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	e7fd      	b.n	8003e44 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003e48:	2202      	movs	r2, #2
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff40 	bl	8003cd2 <xQueueGenericCreate>
 8003e52:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003e60:	697b      	ldr	r3, [r7, #20]
	}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08e      	sub	sp, #56	@ 0x38
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <xQueueGenericSend+0x34>
	__asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	e7fd      	b.n	8003e9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <xQueueGenericSend+0x42>
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <xQueueGenericSend+0x46>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <xQueueGenericSend+0x48>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <xQueueGenericSend+0x64>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
 8003ece:	e7fd      	b.n	8003ecc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d103      	bne.n	8003ede <xQueueGenericSend+0x72>
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <xQueueGenericSend+0x76>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <xQueueGenericSend+0x78>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <xQueueGenericSend+0x94>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	623b      	str	r3, [r7, #32]
}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	e7fd      	b.n	8003efc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f00:	f001 fc56 	bl	80057b0 <xTaskGetSchedulerState>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d102      	bne.n	8003f10 <xQueueGenericSend+0xa4>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <xQueueGenericSend+0xa8>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <xQueueGenericSend+0xaa>
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10b      	bne.n	8003f32 <xQueueGenericSend+0xc6>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	61fb      	str	r3, [r7, #28]
}
 8003f2c:	bf00      	nop
 8003f2e:	bf00      	nop
 8003f30:	e7fd      	b.n	8003f2e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f32:	f002 faa9 	bl	8006488 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <xQueueGenericSend+0xdc>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d129      	bne.n	8003f9c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f4e:	f000 fc6d 	bl	800482c <prvCopyDataToQueue>
 8003f52:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d010      	beq.n	8003f7e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5e:	3324      	adds	r3, #36	@ 0x24
 8003f60:	4618      	mov	r0, r3
 8003f62:	f001 fa65 	bl	8005430 <xTaskRemoveFromEventList>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d013      	beq.n	8003f94 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f6c:	4b3f      	ldr	r3, [pc, #252]	@ (800406c <xQueueGenericSend+0x200>)
 8003f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	e00a      	b.n	8003f94 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f84:	4b39      	ldr	r3, [pc, #228]	@ (800406c <xQueueGenericSend+0x200>)
 8003f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f94:	f002 faaa 	bl	80064ec <vPortExitCritical>
				return pdPASS;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e063      	b.n	8004064 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d103      	bne.n	8003faa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fa2:	f002 faa3 	bl	80064ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e05c      	b.n	8004064 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fb0:	f107 0314 	add.w	r3, r7, #20
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 fa9f 	bl	80054f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fbe:	f002 fa95 	bl	80064ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fc2:	f001 f80f 	bl	8004fe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fc6:	f002 fa5f 	bl	8006488 <vPortEnterCritical>
 8003fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fd0:	b25b      	sxtb	r3, r3
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d103      	bne.n	8003fe0 <xQueueGenericSend+0x174>
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fe6:	b25b      	sxtb	r3, r3
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d103      	bne.n	8003ff6 <xQueueGenericSend+0x18a>
 8003fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ff6:	f002 fa79 	bl	80064ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ffa:	1d3a      	adds	r2, r7, #4
 8003ffc:	f107 0314 	add.w	r3, r7, #20
 8004000:	4611      	mov	r1, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f001 fa8e 	bl	8005524 <xTaskCheckForTimeOut>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d124      	bne.n	8004058 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800400e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004010:	f000 fd04 	bl	8004a1c <prvIsQueueFull>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d018      	beq.n	800404c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800401a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401c:	3310      	adds	r3, #16
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f001 f9b2 	bl	800538c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004028:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800402a:	f000 fc8f 	bl	800494c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800402e:	f000 ffe7 	bl	8005000 <xTaskResumeAll>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	f47f af7c 	bne.w	8003f32 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800403a:	4b0c      	ldr	r3, [pc, #48]	@ (800406c <xQueueGenericSend+0x200>)
 800403c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	e772      	b.n	8003f32 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800404c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800404e:	f000 fc7d 	bl	800494c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004052:	f000 ffd5 	bl	8005000 <xTaskResumeAll>
 8004056:	e76c      	b.n	8003f32 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004058:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800405a:	f000 fc77 	bl	800494c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800405e:	f000 ffcf 	bl	8005000 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004062:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004064:	4618      	mov	r0, r3
 8004066:	3738      	adds	r7, #56	@ 0x38
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	e000ed04 	.word	0xe000ed04

08004070 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b090      	sub	sp, #64	@ 0x40
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10b      	bne.n	80040a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800409a:	bf00      	nop
 800409c:	bf00      	nop
 800409e:	e7fd      	b.n	800409c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d103      	bne.n	80040ae <xQueueGenericSendFromISR+0x3e>
 80040a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <xQueueGenericSendFromISR+0x42>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <xQueueGenericSendFromISR+0x44>
 80040b2:	2300      	movs	r3, #0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10b      	bne.n	80040d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
 80040ce:	e7fd      	b.n	80040cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d103      	bne.n	80040de <xQueueGenericSendFromISR+0x6e>
 80040d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <xQueueGenericSendFromISR+0x72>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <xQueueGenericSendFromISR+0x74>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	623b      	str	r3, [r7, #32]
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004100:	f002 faa2 	bl	8006648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004104:	f3ef 8211 	mrs	r2, BASEPRI
 8004108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	61fa      	str	r2, [r7, #28]
 800411a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800411c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800411e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	429a      	cmp	r2, r3
 800412a:	d302      	bcc.n	8004132 <xQueueGenericSendFromISR+0xc2>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d12f      	bne.n	8004192 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004134:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004138:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800413c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800413e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004140:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004148:	f000 fb70 	bl	800482c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800414c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004154:	d112      	bne.n	800417c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	d016      	beq.n	800418c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800415e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004160:	3324      	adds	r3, #36	@ 0x24
 8004162:	4618      	mov	r0, r3
 8004164:	f001 f964 	bl	8005430 <xTaskRemoveFromEventList>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00e      	beq.n	800418c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00b      	beq.n	800418c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e007      	b.n	800418c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800417c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004180:	3301      	adds	r3, #1
 8004182:	b2db      	uxtb	r3, r3
 8004184:	b25a      	sxtb	r2, r3
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800418c:	2301      	movs	r3, #1
 800418e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004190:	e001      	b.n	8004196 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004192:	2300      	movs	r3, #0
 8004194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004198:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3740      	adds	r7, #64	@ 0x40
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08e      	sub	sp, #56	@ 0x38
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80041ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	623b      	str	r3, [r7, #32]
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00b      	beq.n	80041f8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	61fb      	str	r3, [r7, #28]
}
 80041f2:	bf00      	nop
 80041f4:	bf00      	nop
 80041f6:	e7fd      	b.n	80041f4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80041f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d103      	bne.n	8004208 <xQueueGiveFromISR+0x5c>
 8004200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <xQueueGiveFromISR+0x60>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <xQueueGiveFromISR+0x62>
 800420c:	2300      	movs	r3, #0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	61bb      	str	r3, [r7, #24]
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	e7fd      	b.n	8004226 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800422a:	f002 fa0d 	bl	8006648 <vPortValidateInterruptPriority>
	__asm volatile
 800422e:	f3ef 8211 	mrs	r2, BASEPRI
 8004232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	617a      	str	r2, [r7, #20]
 8004244:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004246:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004248:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800424a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004256:	429a      	cmp	r2, r3
 8004258:	d22b      	bcs.n	80042b2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800425a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800426c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d112      	bne.n	800429c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	2b00      	cmp	r3, #0
 800427c:	d016      	beq.n	80042ac <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	3324      	adds	r3, #36	@ 0x24
 8004282:	4618      	mov	r0, r3
 8004284:	f001 f8d4 	bl	8005430 <xTaskRemoveFromEventList>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00e      	beq.n	80042ac <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2201      	movs	r2, #1
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	e007      	b.n	80042ac <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800429c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042a0:	3301      	adds	r3, #1
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	b25a      	sxtb	r2, r3
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80042ac:	2301      	movs	r3, #1
 80042ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80042b0:	e001      	b.n	80042b6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80042b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f383 8811 	msr	BASEPRI, r3
}
 80042c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3738      	adds	r7, #56	@ 0x38
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08c      	sub	sp, #48	@ 0x30
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042d8:	2300      	movs	r3, #0
 80042da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <xQueueReceive+0x32>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	623b      	str	r3, [r7, #32]
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	e7fd      	b.n	80042fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d103      	bne.n	800430c <xQueueReceive+0x40>
 8004304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <xQueueReceive+0x44>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <xQueueReceive+0x46>
 8004310:	2300      	movs	r3, #0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <xQueueReceive+0x62>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	61fb      	str	r3, [r7, #28]
}
 8004328:	bf00      	nop
 800432a:	bf00      	nop
 800432c:	e7fd      	b.n	800432a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800432e:	f001 fa3f 	bl	80057b0 <xTaskGetSchedulerState>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d102      	bne.n	800433e <xQueueReceive+0x72>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <xQueueReceive+0x76>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <xQueueReceive+0x78>
 8004342:	2300      	movs	r3, #0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <xQueueReceive+0x94>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	61bb      	str	r3, [r7, #24]
}
 800435a:	bf00      	nop
 800435c:	bf00      	nop
 800435e:	e7fd      	b.n	800435c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004360:	f002 f892 	bl	8006488 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004368:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01f      	beq.n	80043b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004374:	f000 fac4 	bl	8004900 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	1e5a      	subs	r2, r3, #1
 800437c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00f      	beq.n	80043a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438a:	3310      	adds	r3, #16
 800438c:	4618      	mov	r0, r3
 800438e:	f001 f84f 	bl	8005430 <xTaskRemoveFromEventList>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d007      	beq.n	80043a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004398:	4b3c      	ldr	r3, [pc, #240]	@ (800448c <xQueueReceive+0x1c0>)
 800439a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043a8:	f002 f8a0 	bl	80064ec <vPortExitCritical>
				return pdPASS;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e069      	b.n	8004484 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043b6:	f002 f899 	bl	80064ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e062      	b.n	8004484 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d106      	bne.n	80043d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043c4:	f107 0310 	add.w	r3, r7, #16
 80043c8:	4618      	mov	r0, r3
 80043ca:	f001 f895 	bl	80054f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043ce:	2301      	movs	r3, #1
 80043d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043d2:	f002 f88b 	bl	80064ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043d6:	f000 fe05 	bl	8004fe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043da:	f002 f855 	bl	8006488 <vPortEnterCritical>
 80043de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043e4:	b25b      	sxtb	r3, r3
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ea:	d103      	bne.n	80043f4 <xQueueReceive+0x128>
 80043ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043fa:	b25b      	sxtb	r3, r3
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004400:	d103      	bne.n	800440a <xQueueReceive+0x13e>
 8004402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800440a:	f002 f86f 	bl	80064ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800440e:	1d3a      	adds	r2, r7, #4
 8004410:	f107 0310 	add.w	r3, r7, #16
 8004414:	4611      	mov	r1, r2
 8004416:	4618      	mov	r0, r3
 8004418:	f001 f884 	bl	8005524 <xTaskCheckForTimeOut>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d123      	bne.n	800446a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004422:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004424:	f000 fae4 	bl	80049f0 <prvIsQueueEmpty>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d017      	beq.n	800445e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800442e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004430:	3324      	adds	r3, #36	@ 0x24
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	4611      	mov	r1, r2
 8004436:	4618      	mov	r0, r3
 8004438:	f000 ffa8 	bl	800538c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800443c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800443e:	f000 fa85 	bl	800494c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004442:	f000 fddd 	bl	8005000 <xTaskResumeAll>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d189      	bne.n	8004360 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800444c:	4b0f      	ldr	r3, [pc, #60]	@ (800448c <xQueueReceive+0x1c0>)
 800444e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	e780      	b.n	8004360 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800445e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004460:	f000 fa74 	bl	800494c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004464:	f000 fdcc 	bl	8005000 <xTaskResumeAll>
 8004468:	e77a      	b.n	8004360 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800446a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800446c:	f000 fa6e 	bl	800494c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004470:	f000 fdc6 	bl	8005000 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004474:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004476:	f000 fabb 	bl	80049f0 <prvIsQueueEmpty>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	f43f af6f 	beq.w	8004360 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004482:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004484:	4618      	mov	r0, r3
 8004486:	3730      	adds	r7, #48	@ 0x30
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08e      	sub	sp, #56	@ 0x38
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800449a:	2300      	movs	r3, #0
 800449c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	623b      	str	r3, [r7, #32]
}
 80044be:	bf00      	nop
 80044c0:	bf00      	nop
 80044c2:	e7fd      	b.n	80044c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80044c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	61fb      	str	r3, [r7, #28]
}
 80044de:	bf00      	nop
 80044e0:	bf00      	nop
 80044e2:	e7fd      	b.n	80044e0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044e4:	f001 f964 	bl	80057b0 <xTaskGetSchedulerState>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <xQueueSemaphoreTake+0x64>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <xQueueSemaphoreTake+0x68>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <xQueueSemaphoreTake+0x6a>
 80044f8:	2300      	movs	r3, #0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	61bb      	str	r3, [r7, #24]
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	e7fd      	b.n	8004512 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004516:	f001 ffb7 	bl	8006488 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800451a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	d024      	beq.n	8004570 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004528:	1e5a      	subs	r2, r3, #1
 800452a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800452e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004536:	f001 fab5 	bl	8005aa4 <pvTaskIncrementMutexHeldCount>
 800453a:	4602      	mov	r2, r0
 800453c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00f      	beq.n	8004568 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454a:	3310      	adds	r3, #16
 800454c:	4618      	mov	r0, r3
 800454e:	f000 ff6f 	bl	8005430 <xTaskRemoveFromEventList>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004558:	4b54      	ldr	r3, [pc, #336]	@ (80046ac <xQueueSemaphoreTake+0x21c>)
 800455a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004568:	f001 ffc0 	bl	80064ec <vPortExitCritical>
				return pdPASS;
 800456c:	2301      	movs	r3, #1
 800456e:	e098      	b.n	80046a2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d112      	bne.n	800459c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00b      	beq.n	8004594 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	617b      	str	r3, [r7, #20]
}
 800458e:	bf00      	nop
 8004590:	bf00      	nop
 8004592:	e7fd      	b.n	8004590 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004594:	f001 ffaa 	bl	80064ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004598:	2300      	movs	r3, #0
 800459a:	e082      	b.n	80046a2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800459c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 ffa6 	bl	80054f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045b0:	f001 ff9c 	bl	80064ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045b4:	f000 fd16 	bl	8004fe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045b8:	f001 ff66 	bl	8006488 <vPortEnterCritical>
 80045bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045c2:	b25b      	sxtb	r3, r3
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d103      	bne.n	80045d2 <xQueueSemaphoreTake+0x142>
 80045ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045d8:	b25b      	sxtb	r3, r3
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d103      	bne.n	80045e8 <xQueueSemaphoreTake+0x158>
 80045e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045e8:	f001 ff80 	bl	80064ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045ec:	463a      	mov	r2, r7
 80045ee:	f107 030c 	add.w	r3, r7, #12
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 ff95 	bl	8005524 <xTaskCheckForTimeOut>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d132      	bne.n	8004666 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004600:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004602:	f000 f9f5 	bl	80049f0 <prvIsQueueEmpty>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d026      	beq.n	800465a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800460c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004614:	f001 ff38 	bl	8006488 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4618      	mov	r0, r3
 800461e:	f001 f8e5 	bl	80057ec <xTaskPriorityInherit>
 8004622:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004624:	f001 ff62 	bl	80064ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462a:	3324      	adds	r3, #36	@ 0x24
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	4611      	mov	r1, r2
 8004630:	4618      	mov	r0, r3
 8004632:	f000 feab 	bl	800538c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004636:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004638:	f000 f988 	bl	800494c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800463c:	f000 fce0 	bl	8005000 <xTaskResumeAll>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	f47f af67 	bne.w	8004516 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004648:	4b18      	ldr	r3, [pc, #96]	@ (80046ac <xQueueSemaphoreTake+0x21c>)
 800464a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	e75d      	b.n	8004516 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800465a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800465c:	f000 f976 	bl	800494c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004660:	f000 fcce 	bl	8005000 <xTaskResumeAll>
 8004664:	e757      	b.n	8004516 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004666:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004668:	f000 f970 	bl	800494c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800466c:	f000 fcc8 	bl	8005000 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004670:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004672:	f000 f9bd 	bl	80049f0 <prvIsQueueEmpty>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	f43f af4c 	beq.w	8004516 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00d      	beq.n	80046a0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004684:	f001 ff00 	bl	8006488 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004688:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800468a:	f000 f8b7 	bl	80047fc <prvGetDisinheritPriorityAfterTimeout>
 800468e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004696:	4618      	mov	r0, r3
 8004698:	f001 f980 	bl	800599c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800469c:	f001 ff26 	bl	80064ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3738      	adds	r7, #56	@ 0x38
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	e000ed04 	.word	0xe000ed04

080046b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08e      	sub	sp, #56	@ 0x38
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80046c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	623b      	str	r3, [r7, #32]
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	e7fd      	b.n	80046da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d103      	bne.n	80046ec <xQueueReceiveFromISR+0x3c>
 80046e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <xQueueReceiveFromISR+0x40>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <xQueueReceiveFromISR+0x42>
 80046f0:	2300      	movs	r3, #0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	61fb      	str	r3, [r7, #28]
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	e7fd      	b.n	800470a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800470e:	f001 ff9b 	bl	8006648 <vPortValidateInterruptPriority>
	__asm volatile
 8004712:	f3ef 8211 	mrs	r2, BASEPRI
 8004716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	61ba      	str	r2, [r7, #24]
 8004728:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800472a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800472c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800472e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004732:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d02f      	beq.n	800479a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800473a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004748:	f000 f8da 	bl	8004900 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	1e5a      	subs	r2, r3, #1
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004752:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004754:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d112      	bne.n	8004784 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800475e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d016      	beq.n	8004794 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004768:	3310      	adds	r3, #16
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fe60 	bl	8005430 <xTaskRemoveFromEventList>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00e      	beq.n	8004794 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e007      	b.n	8004794 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004784:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004788:	3301      	adds	r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	b25a      	sxtb	r2, r3
 800478e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004794:	2301      	movs	r3, #1
 8004796:	637b      	str	r3, [r7, #52]	@ 0x34
 8004798:	e001      	b.n	800479e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800479a:	2300      	movs	r3, #0
 800479c:	637b      	str	r3, [r7, #52]	@ 0x34
 800479e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f383 8811 	msr	BASEPRI, r3
}
 80047a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3738      	adds	r7, #56	@ 0x38
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <vQueueDelete+0x2a>
	__asm volatile
 80047c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	60bb      	str	r3, [r7, #8]
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	e7fd      	b.n	80047da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f95e 	bl	8004aa0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f002 f83a 	bl	8006868 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	2b00      	cmp	r3, #0
 800480a:	d006      	beq.n	800481a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	e001      	b.n	800481e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800481e:	68fb      	ldr	r3, [r7, #12]
	}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004840:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10d      	bne.n	8004866 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d14d      	bne.n	80048ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	4618      	mov	r0, r3
 8004858:	f001 f830 	bl	80058bc <xTaskPriorityDisinherit>
 800485c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	609a      	str	r2, [r3, #8]
 8004864:	e043      	b.n	80048ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d119      	bne.n	80048a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6858      	ldr	r0, [r3, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	461a      	mov	r2, r3
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	f002 fb4b 	bl	8006f12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	441a      	add	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	429a      	cmp	r2, r3
 8004894:	d32b      	bcc.n	80048ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	e026      	b.n	80048ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68d8      	ldr	r0, [r3, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a8:	461a      	mov	r2, r3
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	f002 fb31 	bl	8006f12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	425b      	negs	r3, r3
 80048ba:	441a      	add	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d207      	bcs.n	80048dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d4:	425b      	negs	r3, r3
 80048d6:	441a      	add	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d105      	bne.n	80048ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80048f6:	697b      	ldr	r3, [r7, #20]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d018      	beq.n	8004944 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	441a      	add	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	429a      	cmp	r2, r3
 800492a:	d303      	bcc.n	8004934 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68d9      	ldr	r1, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	461a      	mov	r2, r3
 800493e:	6838      	ldr	r0, [r7, #0]
 8004940:	f002 fae7 	bl	8006f12 <memcpy>
	}
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004954:	f001 fd98 	bl	8006488 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800495e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004960:	e011      	b.n	8004986 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	d012      	beq.n	8004990 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3324      	adds	r3, #36	@ 0x24
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fd5e 	bl	8005430 <xTaskRemoveFromEventList>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800497a:	f000 fe37 	bl	80055ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	3b01      	subs	r3, #1
 8004982:	b2db      	uxtb	r3, r3
 8004984:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800498a:	2b00      	cmp	r3, #0
 800498c:	dce9      	bgt.n	8004962 <prvUnlockQueue+0x16>
 800498e:	e000      	b.n	8004992 <prvUnlockQueue+0x46>
					break;
 8004990:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	22ff      	movs	r2, #255	@ 0xff
 8004996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800499a:	f001 fda7 	bl	80064ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800499e:	f001 fd73 	bl	8006488 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049aa:	e011      	b.n	80049d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d012      	beq.n	80049da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3310      	adds	r3, #16
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fd39 	bl	8005430 <xTaskRemoveFromEventList>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049c4:	f000 fe12 	bl	80055ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049c8:	7bbb      	ldrb	r3, [r7, #14]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	dce9      	bgt.n	80049ac <prvUnlockQueue+0x60>
 80049d8:	e000      	b.n	80049dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	22ff      	movs	r2, #255	@ 0xff
 80049e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80049e4:	f001 fd82 	bl	80064ec <vPortExitCritical>
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049f8:	f001 fd46 	bl	8006488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a04:	2301      	movs	r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e001      	b.n	8004a0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a0e:	f001 fd6d 	bl	80064ec <vPortExitCritical>

	return xReturn;
 8004a12:	68fb      	ldr	r3, [r7, #12]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a24:	f001 fd30 	bl	8006488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d102      	bne.n	8004a3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e001      	b.n	8004a3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a3e:	f001 fd55 	bl	80064ec <vPortExitCritical>

	return xReturn;
 8004a42:	68fb      	ldr	r3, [r7, #12]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e014      	b.n	8004a86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8004a9c <vQueueAddToRegistry+0x50>)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10b      	bne.n	8004a80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a68:	490c      	ldr	r1, [pc, #48]	@ (8004a9c <vQueueAddToRegistry+0x50>)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a72:	4a0a      	ldr	r2, [pc, #40]	@ (8004a9c <vQueueAddToRegistry+0x50>)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a7e:	e006      	b.n	8004a8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b07      	cmp	r3, #7
 8004a8a:	d9e7      	bls.n	8004a5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	200007e4 	.word	0x200007e4

08004aa0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e016      	b.n	8004adc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004aae:	4a10      	ldr	r2, [pc, #64]	@ (8004af0 <vQueueUnregisterQueue+0x50>)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d10b      	bne.n	8004ad6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004abe:	4a0c      	ldr	r2, [pc, #48]	@ (8004af0 <vQueueUnregisterQueue+0x50>)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004ac8:	4a09      	ldr	r2, [pc, #36]	@ (8004af0 <vQueueUnregisterQueue+0x50>)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	4413      	add	r3, r2
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	605a      	str	r2, [r3, #4]
				break;
 8004ad4:	e006      	b.n	8004ae4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b07      	cmp	r3, #7
 8004ae0:	d9e5      	bls.n	8004aae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	200007e4 	.word	0x200007e4

08004af4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b04:	f001 fcc0 	bl	8006488 <vPortEnterCritical>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b0e:	b25b      	sxtb	r3, r3
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d103      	bne.n	8004b1e <vQueueWaitForMessageRestricted+0x2a>
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b24:	b25b      	sxtb	r3, r3
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2a:	d103      	bne.n	8004b34 <vQueueWaitForMessageRestricted+0x40>
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b34:	f001 fcda 	bl	80064ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d106      	bne.n	8004b4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	3324      	adds	r3, #36	@ 0x24
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fc45 	bl	80053d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b4e:	6978      	ldr	r0, [r7, #20]
 8004b50:	f7ff fefc 	bl	800494c <prvUnlockQueue>
	}
 8004b54:	bf00      	nop
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08e      	sub	sp, #56	@ 0x38
 8004b60:	af04      	add	r7, sp, #16
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10b      	bne.n	8004b88 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	623b      	str	r3, [r7, #32]
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10b      	bne.n	8004ba6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	61fb      	str	r3, [r7, #28]
}
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	e7fd      	b.n	8004ba2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ba6:	235c      	movs	r3, #92	@ 0x5c
 8004ba8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b5c      	cmp	r3, #92	@ 0x5c
 8004bae:	d00b      	beq.n	8004bc8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	61bb      	str	r3, [r7, #24]
}
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
 8004bc6:	e7fd      	b.n	8004bc4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004bc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01e      	beq.n	8004c0e <xTaskCreateStatic+0xb2>
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01b      	beq.n	8004c0e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004be8:	2300      	movs	r3, #0
 8004bea:	9303      	str	r3, [sp, #12]
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	9302      	str	r3, [sp, #8]
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f850 	bl	8004ca6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c08:	f000 f8de 	bl	8004dc8 <prvAddNewTaskToReadyList>
 8004c0c:	e001      	b.n	8004c12 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c12:	697b      	ldr	r3, [r7, #20]
	}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3728      	adds	r7, #40	@ 0x28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08c      	sub	sp, #48	@ 0x30
 8004c20:	af04      	add	r7, sp, #16
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	603b      	str	r3, [r7, #0]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c2c:	88fb      	ldrh	r3, [r7, #6]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f001 fd4b 	bl	80066cc <pvPortMalloc>
 8004c36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00e      	beq.n	8004c5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c3e:	205c      	movs	r0, #92	@ 0x5c
 8004c40:	f001 fd44 	bl	80066cc <pvPortMalloc>
 8004c44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c52:	e005      	b.n	8004c60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c54:	6978      	ldr	r0, [r7, #20]
 8004c56:	f001 fe07 	bl	8006868 <vPortFree>
 8004c5a:	e001      	b.n	8004c60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d017      	beq.n	8004c96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	2300      	movs	r3, #0
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	9302      	str	r3, [sp, #8]
 8004c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f80e 	bl	8004ca6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c8a:	69f8      	ldr	r0, [r7, #28]
 8004c8c:	f000 f89c 	bl	8004dc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c90:	2301      	movs	r3, #1
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	e002      	b.n	8004c9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c96:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
	}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b088      	sub	sp, #32
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	21a5      	movs	r1, #165	@ 0xa5
 8004cc0:	f002 f8ab 	bl	8006e1a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	f023 0307 	bic.w	r3, r3, #7
 8004cdc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	617b      	str	r3, [r7, #20]
}
 8004cfa:	bf00      	nop
 8004cfc:	bf00      	nop
 8004cfe:	e7fd      	b.n	8004cfc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01f      	beq.n	8004d46 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	e012      	b.n	8004d32 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	7819      	ldrb	r1, [r3, #0]
 8004d14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	3334      	adds	r3, #52	@ 0x34
 8004d1c:	460a      	mov	r2, r1
 8004d1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	4413      	add	r3, r2
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d006      	beq.n	8004d3a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	2b0f      	cmp	r3, #15
 8004d36:	d9e9      	bls.n	8004d0c <prvInitialiseNewTask+0x66>
 8004d38:	e000      	b.n	8004d3c <prvInitialiseNewTask+0x96>
			{
				break;
 8004d3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d44:	e003      	b.n	8004d4e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d50:	2b37      	cmp	r3, #55	@ 0x37
 8004d52:	d901      	bls.n	8004d58 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d54:	2337      	movs	r3, #55	@ 0x37
 8004d56:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d62:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d66:	2200      	movs	r2, #0
 8004d68:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe fe34 	bl	80039dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d76:	3318      	adds	r3, #24
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fe fe2f 	bl	80039dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d86:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d92:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	2200      	movs	r2, #0
 8004d98:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	68f9      	ldr	r1, [r7, #12]
 8004da6:	69b8      	ldr	r0, [r7, #24]
 8004da8:	f001 fa3e 	bl	8006228 <pxPortInitialiseStack>
 8004dac:	4602      	mov	r2, r0
 8004dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dbe:	bf00      	nop
 8004dc0:	3720      	adds	r7, #32
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dd0:	f001 fb5a 	bl	8006488 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e8c <prvAddNewTaskToReadyList+0xc4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	4a2c      	ldr	r2, [pc, #176]	@ (8004e8c <prvAddNewTaskToReadyList+0xc4>)
 8004ddc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dde:	4b2c      	ldr	r3, [pc, #176]	@ (8004e90 <prvAddNewTaskToReadyList+0xc8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004de6:	4a2a      	ldr	r2, [pc, #168]	@ (8004e90 <prvAddNewTaskToReadyList+0xc8>)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004dec:	4b27      	ldr	r3, [pc, #156]	@ (8004e8c <prvAddNewTaskToReadyList+0xc4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d110      	bne.n	8004e16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004df4:	f000 fc1e 	bl	8005634 <prvInitialiseTaskLists>
 8004df8:	e00d      	b.n	8004e16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dfa:	4b26      	ldr	r3, [pc, #152]	@ (8004e94 <prvAddNewTaskToReadyList+0xcc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e02:	4b23      	ldr	r3, [pc, #140]	@ (8004e90 <prvAddNewTaskToReadyList+0xc8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d802      	bhi.n	8004e16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e10:	4a1f      	ldr	r2, [pc, #124]	@ (8004e90 <prvAddNewTaskToReadyList+0xc8>)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e16:	4b20      	ldr	r3, [pc, #128]	@ (8004e98 <prvAddNewTaskToReadyList+0xd0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	4a1e      	ldr	r2, [pc, #120]	@ (8004e98 <prvAddNewTaskToReadyList+0xd0>)
 8004e1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e20:	4b1d      	ldr	r3, [pc, #116]	@ (8004e98 <prvAddNewTaskToReadyList+0xd0>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e9c <prvAddNewTaskToReadyList+0xd4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d903      	bls.n	8004e3c <prvAddNewTaskToReadyList+0x74>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e38:	4a18      	ldr	r2, [pc, #96]	@ (8004e9c <prvAddNewTaskToReadyList+0xd4>)
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4a15      	ldr	r2, [pc, #84]	@ (8004ea0 <prvAddNewTaskToReadyList+0xd8>)
 8004e4a:	441a      	add	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f7fe fdcf 	bl	80039f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e58:	f001 fb48 	bl	80064ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e94 <prvAddNewTaskToReadyList+0xcc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00e      	beq.n	8004e82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e64:	4b0a      	ldr	r3, [pc, #40]	@ (8004e90 <prvAddNewTaskToReadyList+0xc8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d207      	bcs.n	8004e82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e72:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea4 <prvAddNewTaskToReadyList+0xdc>)
 8004e74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000cf8 	.word	0x20000cf8
 8004e90:	20000824 	.word	0x20000824
 8004e94:	20000d04 	.word	0x20000d04
 8004e98:	20000d14 	.word	0x20000d14
 8004e9c:	20000d00 	.word	0x20000d00
 8004ea0:	20000828 	.word	0x20000828
 8004ea4:	e000ed04 	.word	0xe000ed04

08004ea8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d018      	beq.n	8004eec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eba:	4b14      	ldr	r3, [pc, #80]	@ (8004f0c <vTaskDelay+0x64>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00b      	beq.n	8004eda <vTaskDelay+0x32>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	60bb      	str	r3, [r7, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop
 8004ed8:	e7fd      	b.n	8004ed6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004eda:	f000 f883 	bl	8004fe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ede:	2100      	movs	r1, #0
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fdf3 	bl	8005acc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ee6:	f000 f88b 	bl	8005000 <xTaskResumeAll>
 8004eea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d107      	bne.n	8004f02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ef2:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <vTaskDelay+0x68>)
 8004ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000d20 	.word	0x20000d20
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	@ 0x28
 8004f18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f22:	463a      	mov	r2, r7
 8004f24:	1d39      	adds	r1, r7, #4
 8004f26:	f107 0308 	add.w	r3, r7, #8
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe fd02 	bl	8003934 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f30:	6839      	ldr	r1, [r7, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	9202      	str	r2, [sp, #8]
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	460a      	mov	r2, r1
 8004f42:	4922      	ldr	r1, [pc, #136]	@ (8004fcc <vTaskStartScheduler+0xb8>)
 8004f44:	4822      	ldr	r0, [pc, #136]	@ (8004fd0 <vTaskStartScheduler+0xbc>)
 8004f46:	f7ff fe09 	bl	8004b5c <xTaskCreateStatic>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4a21      	ldr	r2, [pc, #132]	@ (8004fd4 <vTaskStartScheduler+0xc0>)
 8004f4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f50:	4b20      	ldr	r3, [pc, #128]	@ (8004fd4 <vTaskStartScheduler+0xc0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e001      	b.n	8004f62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d102      	bne.n	8004f6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f68:	f000 fe04 	bl	8005b74 <xTimerCreateTimerTask>
 8004f6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d116      	bne.n	8004fa2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	613b      	str	r3, [r7, #16]
}
 8004f86:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f88:	4b13      	ldr	r3, [pc, #76]	@ (8004fd8 <vTaskStartScheduler+0xc4>)
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f90:	4b12      	ldr	r3, [pc, #72]	@ (8004fdc <vTaskStartScheduler+0xc8>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f96:	4b12      	ldr	r3, [pc, #72]	@ (8004fe0 <vTaskStartScheduler+0xcc>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f9c:	f001 f9d0 	bl	8006340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fa0:	e00f      	b.n	8004fc2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d10b      	bne.n	8004fc2 <vTaskStartScheduler+0xae>
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	60fb      	str	r3, [r7, #12]
}
 8004fbc:	bf00      	nop
 8004fbe:	bf00      	nop
 8004fc0:	e7fd      	b.n	8004fbe <vTaskStartScheduler+0xaa>
}
 8004fc2:	bf00      	nop
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	08007330 	.word	0x08007330
 8004fd0:	08005605 	.word	0x08005605
 8004fd4:	20000d1c 	.word	0x20000d1c
 8004fd8:	20000d18 	.word	0x20000d18
 8004fdc:	20000d04 	.word	0x20000d04
 8004fe0:	20000cfc 	.word	0x20000cfc

08004fe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fe8:	4b04      	ldr	r3, [pc, #16]	@ (8004ffc <vTaskSuspendAll+0x18>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3301      	adds	r3, #1
 8004fee:	4a03      	ldr	r2, [pc, #12]	@ (8004ffc <vTaskSuspendAll+0x18>)
 8004ff0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ff2:	bf00      	nop
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	20000d20 	.word	0x20000d20

08005000 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800500a:	2300      	movs	r3, #0
 800500c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800500e:	4b42      	ldr	r3, [pc, #264]	@ (8005118 <xTaskResumeAll+0x118>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10b      	bne.n	800502e <xTaskResumeAll+0x2e>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	603b      	str	r3, [r7, #0]
}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	e7fd      	b.n	800502a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800502e:	f001 fa2b 	bl	8006488 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005032:	4b39      	ldr	r3, [pc, #228]	@ (8005118 <xTaskResumeAll+0x118>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3b01      	subs	r3, #1
 8005038:	4a37      	ldr	r2, [pc, #220]	@ (8005118 <xTaskResumeAll+0x118>)
 800503a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800503c:	4b36      	ldr	r3, [pc, #216]	@ (8005118 <xTaskResumeAll+0x118>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d162      	bne.n	800510a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005044:	4b35      	ldr	r3, [pc, #212]	@ (800511c <xTaskResumeAll+0x11c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d05e      	beq.n	800510a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800504c:	e02f      	b.n	80050ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800504e:	4b34      	ldr	r3, [pc, #208]	@ (8005120 <xTaskResumeAll+0x120>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3318      	adds	r3, #24
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe fd28 	bl	8003ab0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3304      	adds	r3, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe fd23 	bl	8003ab0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506e:	4b2d      	ldr	r3, [pc, #180]	@ (8005124 <xTaskResumeAll+0x124>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d903      	bls.n	800507e <xTaskResumeAll+0x7e>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	4a2a      	ldr	r2, [pc, #168]	@ (8005124 <xTaskResumeAll+0x124>)
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4a27      	ldr	r2, [pc, #156]	@ (8005128 <xTaskResumeAll+0x128>)
 800508c:	441a      	add	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3304      	adds	r3, #4
 8005092:	4619      	mov	r1, r3
 8005094:	4610      	mov	r0, r2
 8005096:	f7fe fcae 	bl	80039f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800509e:	4b23      	ldr	r3, [pc, #140]	@ (800512c <xTaskResumeAll+0x12c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d302      	bcc.n	80050ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80050a8:	4b21      	ldr	r3, [pc, #132]	@ (8005130 <xTaskResumeAll+0x130>)
 80050aa:	2201      	movs	r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005120 <xTaskResumeAll+0x120>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1cb      	bne.n	800504e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050bc:	f000 fb58 	bl	8005770 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005134 <xTaskResumeAll+0x134>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d010      	beq.n	80050ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050cc:	f000 f846 	bl	800515c <xTaskIncrementTick>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80050d6:	4b16      	ldr	r3, [pc, #88]	@ (8005130 <xTaskResumeAll+0x130>)
 80050d8:	2201      	movs	r2, #1
 80050da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3b01      	subs	r3, #1
 80050e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f1      	bne.n	80050cc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80050e8:	4b12      	ldr	r3, [pc, #72]	@ (8005134 <xTaskResumeAll+0x134>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050ee:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <xTaskResumeAll+0x130>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050f6:	2301      	movs	r3, #1
 80050f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005138 <xTaskResumeAll+0x138>)
 80050fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800510a:	f001 f9ef 	bl	80064ec <vPortExitCritical>

	return xAlreadyYielded;
 800510e:	68bb      	ldr	r3, [r7, #8]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000d20 	.word	0x20000d20
 800511c:	20000cf8 	.word	0x20000cf8
 8005120:	20000cb8 	.word	0x20000cb8
 8005124:	20000d00 	.word	0x20000d00
 8005128:	20000828 	.word	0x20000828
 800512c:	20000824 	.word	0x20000824
 8005130:	20000d0c 	.word	0x20000d0c
 8005134:	20000d08 	.word	0x20000d08
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005142:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <xTaskGetTickCount+0x1c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005148:	687b      	ldr	r3, [r7, #4]
}
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	20000cfc 	.word	0x20000cfc

0800515c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005166:	4b4f      	ldr	r3, [pc, #316]	@ (80052a4 <xTaskIncrementTick+0x148>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f040 8090 	bne.w	8005290 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005170:	4b4d      	ldr	r3, [pc, #308]	@ (80052a8 <xTaskIncrementTick+0x14c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005178:	4a4b      	ldr	r2, [pc, #300]	@ (80052a8 <xTaskIncrementTick+0x14c>)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d121      	bne.n	80051c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005184:	4b49      	ldr	r3, [pc, #292]	@ (80052ac <xTaskIncrementTick+0x150>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00b      	beq.n	80051a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	603b      	str	r3, [r7, #0]
}
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
 80051a4:	e7fd      	b.n	80051a2 <xTaskIncrementTick+0x46>
 80051a6:	4b41      	ldr	r3, [pc, #260]	@ (80052ac <xTaskIncrementTick+0x150>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	4b40      	ldr	r3, [pc, #256]	@ (80052b0 <xTaskIncrementTick+0x154>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a3e      	ldr	r2, [pc, #248]	@ (80052ac <xTaskIncrementTick+0x150>)
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4a3e      	ldr	r2, [pc, #248]	@ (80052b0 <xTaskIncrementTick+0x154>)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	4b3e      	ldr	r3, [pc, #248]	@ (80052b4 <xTaskIncrementTick+0x158>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3301      	adds	r3, #1
 80051c0:	4a3c      	ldr	r2, [pc, #240]	@ (80052b4 <xTaskIncrementTick+0x158>)
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	f000 fad4 	bl	8005770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051c8:	4b3b      	ldr	r3, [pc, #236]	@ (80052b8 <xTaskIncrementTick+0x15c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d349      	bcc.n	8005266 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051d2:	4b36      	ldr	r3, [pc, #216]	@ (80052ac <xTaskIncrementTick+0x150>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051dc:	4b36      	ldr	r3, [pc, #216]	@ (80052b8 <xTaskIncrementTick+0x15c>)
 80051de:	f04f 32ff 	mov.w	r2, #4294967295
 80051e2:	601a      	str	r2, [r3, #0]
					break;
 80051e4:	e03f      	b.n	8005266 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e6:	4b31      	ldr	r3, [pc, #196]	@ (80052ac <xTaskIncrementTick+0x150>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d203      	bcs.n	8005206 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051fe:	4a2e      	ldr	r2, [pc, #184]	@ (80052b8 <xTaskIncrementTick+0x15c>)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005204:	e02f      	b.n	8005266 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	3304      	adds	r3, #4
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe fc50 	bl	8003ab0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	2b00      	cmp	r3, #0
 8005216:	d004      	beq.n	8005222 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	3318      	adds	r3, #24
 800521c:	4618      	mov	r0, r3
 800521e:	f7fe fc47 	bl	8003ab0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005226:	4b25      	ldr	r3, [pc, #148]	@ (80052bc <xTaskIncrementTick+0x160>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d903      	bls.n	8005236 <xTaskIncrementTick+0xda>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	4a22      	ldr	r2, [pc, #136]	@ (80052bc <xTaskIncrementTick+0x160>)
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4a1f      	ldr	r2, [pc, #124]	@ (80052c0 <xTaskIncrementTick+0x164>)
 8005244:	441a      	add	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	3304      	adds	r3, #4
 800524a:	4619      	mov	r1, r3
 800524c:	4610      	mov	r0, r2
 800524e:	f7fe fbd2 	bl	80039f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005256:	4b1b      	ldr	r3, [pc, #108]	@ (80052c4 <xTaskIncrementTick+0x168>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	429a      	cmp	r2, r3
 800525e:	d3b8      	bcc.n	80051d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005260:	2301      	movs	r3, #1
 8005262:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005264:	e7b5      	b.n	80051d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005266:	4b17      	ldr	r3, [pc, #92]	@ (80052c4 <xTaskIncrementTick+0x168>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800526c:	4914      	ldr	r1, [pc, #80]	@ (80052c0 <xTaskIncrementTick+0x164>)
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d901      	bls.n	8005282 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800527e:	2301      	movs	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005282:	4b11      	ldr	r3, [pc, #68]	@ (80052c8 <xTaskIncrementTick+0x16c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800528a:	2301      	movs	r3, #1
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e004      	b.n	800529a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005290:	4b0e      	ldr	r3, [pc, #56]	@ (80052cc <xTaskIncrementTick+0x170>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3301      	adds	r3, #1
 8005296:	4a0d      	ldr	r2, [pc, #52]	@ (80052cc <xTaskIncrementTick+0x170>)
 8005298:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800529a:	697b      	ldr	r3, [r7, #20]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	20000d20 	.word	0x20000d20
 80052a8:	20000cfc 	.word	0x20000cfc
 80052ac:	20000cb0 	.word	0x20000cb0
 80052b0:	20000cb4 	.word	0x20000cb4
 80052b4:	20000d10 	.word	0x20000d10
 80052b8:	20000d18 	.word	0x20000d18
 80052bc:	20000d00 	.word	0x20000d00
 80052c0:	20000828 	.word	0x20000828
 80052c4:	20000824 	.word	0x20000824
 80052c8:	20000d0c 	.word	0x20000d0c
 80052cc:	20000d08 	.word	0x20000d08

080052d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052d6:	4b28      	ldr	r3, [pc, #160]	@ (8005378 <vTaskSwitchContext+0xa8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052de:	4b27      	ldr	r3, [pc, #156]	@ (800537c <vTaskSwitchContext+0xac>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052e4:	e042      	b.n	800536c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80052e6:	4b25      	ldr	r3, [pc, #148]	@ (800537c <vTaskSwitchContext+0xac>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ec:	4b24      	ldr	r3, [pc, #144]	@ (8005380 <vTaskSwitchContext+0xb0>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e011      	b.n	8005318 <vTaskSwitchContext+0x48>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10b      	bne.n	8005312 <vTaskSwitchContext+0x42>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	607b      	str	r3, [r7, #4]
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	e7fd      	b.n	800530e <vTaskSwitchContext+0x3e>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3b01      	subs	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	491a      	ldr	r1, [pc, #104]	@ (8005384 <vTaskSwitchContext+0xb4>)
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0e3      	beq.n	80052f4 <vTaskSwitchContext+0x24>
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4a13      	ldr	r2, [pc, #76]	@ (8005384 <vTaskSwitchContext+0xb4>)
 8005338:	4413      	add	r3, r2
 800533a:	60bb      	str	r3, [r7, #8]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	3308      	adds	r3, #8
 800534e:	429a      	cmp	r2, r3
 8005350:	d104      	bne.n	800535c <vTaskSwitchContext+0x8c>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	605a      	str	r2, [r3, #4]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	4a09      	ldr	r2, [pc, #36]	@ (8005388 <vTaskSwitchContext+0xb8>)
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	4a06      	ldr	r2, [pc, #24]	@ (8005380 <vTaskSwitchContext+0xb0>)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6013      	str	r3, [r2, #0]
}
 800536c:	bf00      	nop
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	20000d20 	.word	0x20000d20
 800537c:	20000d0c 	.word	0x20000d0c
 8005380:	20000d00 	.word	0x20000d00
 8005384:	20000828 	.word	0x20000828
 8005388:	20000824 	.word	0x20000824

0800538c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	60fb      	str	r3, [r7, #12]
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	e7fd      	b.n	80053b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053b4:	4b07      	ldr	r3, [pc, #28]	@ (80053d4 <vTaskPlaceOnEventList+0x48>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3318      	adds	r3, #24
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7fe fb3e 	bl	8003a3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053c2:	2101      	movs	r1, #1
 80053c4:	6838      	ldr	r0, [r7, #0]
 80053c6:	f000 fb81 	bl	8005acc <prvAddCurrentTaskToDelayedList>
}
 80053ca:	bf00      	nop
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000824 	.word	0x20000824

080053d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10b      	bne.n	8005402 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	617b      	str	r3, [r7, #20]
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	e7fd      	b.n	80053fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005402:	4b0a      	ldr	r3, [pc, #40]	@ (800542c <vTaskPlaceOnEventListRestricted+0x54>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3318      	adds	r3, #24
 8005408:	4619      	mov	r1, r3
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7fe faf3 	bl	80039f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005416:	f04f 33ff 	mov.w	r3, #4294967295
 800541a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	68b8      	ldr	r0, [r7, #8]
 8005420:	f000 fb54 	bl	8005acc <prvAddCurrentTaskToDelayedList>
	}
 8005424:	bf00      	nop
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20000824 	.word	0x20000824

08005430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10b      	bne.n	800545e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60fb      	str	r3, [r7, #12]
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	e7fd      	b.n	800545a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	3318      	adds	r3, #24
 8005462:	4618      	mov	r0, r3
 8005464:	f7fe fb24 	bl	8003ab0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005468:	4b1d      	ldr	r3, [pc, #116]	@ (80054e0 <xTaskRemoveFromEventList+0xb0>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d11d      	bne.n	80054ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	3304      	adds	r3, #4
 8005474:	4618      	mov	r0, r3
 8005476:	f7fe fb1b 	bl	8003ab0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547e:	4b19      	ldr	r3, [pc, #100]	@ (80054e4 <xTaskRemoveFromEventList+0xb4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d903      	bls.n	800548e <xTaskRemoveFromEventList+0x5e>
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548a:	4a16      	ldr	r2, [pc, #88]	@ (80054e4 <xTaskRemoveFromEventList+0xb4>)
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4a13      	ldr	r2, [pc, #76]	@ (80054e8 <xTaskRemoveFromEventList+0xb8>)
 800549c:	441a      	add	r2, r3
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4619      	mov	r1, r3
 80054a4:	4610      	mov	r0, r2
 80054a6:	f7fe faa6 	bl	80039f6 <vListInsertEnd>
 80054aa:	e005      	b.n	80054b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	3318      	adds	r3, #24
 80054b0:	4619      	mov	r1, r3
 80054b2:	480e      	ldr	r0, [pc, #56]	@ (80054ec <xTaskRemoveFromEventList+0xbc>)
 80054b4:	f7fe fa9f 	bl	80039f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054bc:	4b0c      	ldr	r3, [pc, #48]	@ (80054f0 <xTaskRemoveFromEventList+0xc0>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d905      	bls.n	80054d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054c6:	2301      	movs	r3, #1
 80054c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054ca:	4b0a      	ldr	r3, [pc, #40]	@ (80054f4 <xTaskRemoveFromEventList+0xc4>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e001      	b.n	80054d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054d6:	697b      	ldr	r3, [r7, #20]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20000d20 	.word	0x20000d20
 80054e4:	20000d00 	.word	0x20000d00
 80054e8:	20000828 	.word	0x20000828
 80054ec:	20000cb8 	.word	0x20000cb8
 80054f0:	20000824 	.word	0x20000824
 80054f4:	20000d0c 	.word	0x20000d0c

080054f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005500:	4b06      	ldr	r3, [pc, #24]	@ (800551c <vTaskInternalSetTimeOutState+0x24>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005508:	4b05      	ldr	r3, [pc, #20]	@ (8005520 <vTaskInternalSetTimeOutState+0x28>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	605a      	str	r2, [r3, #4]
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	20000d10 	.word	0x20000d10
 8005520:	20000cfc 	.word	0x20000cfc

08005524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10b      	bne.n	800554c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	613b      	str	r3, [r7, #16]
}
 8005546:	bf00      	nop
 8005548:	bf00      	nop
 800554a:	e7fd      	b.n	8005548 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10b      	bne.n	800556a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	60fb      	str	r3, [r7, #12]
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop
 8005568:	e7fd      	b.n	8005566 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800556a:	f000 ff8d 	bl	8006488 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800556e:	4b1d      	ldr	r3, [pc, #116]	@ (80055e4 <xTaskCheckForTimeOut+0xc0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005586:	d102      	bne.n	800558e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005588:	2300      	movs	r3, #0
 800558a:	61fb      	str	r3, [r7, #28]
 800558c:	e023      	b.n	80055d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4b15      	ldr	r3, [pc, #84]	@ (80055e8 <xTaskCheckForTimeOut+0xc4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d007      	beq.n	80055aa <xTaskCheckForTimeOut+0x86>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d302      	bcc.n	80055aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055a4:	2301      	movs	r3, #1
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	e015      	b.n	80055d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d20b      	bcs.n	80055cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	1ad2      	subs	r2, r2, r3
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff ff99 	bl	80054f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	e004      	b.n	80055d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055d2:	2301      	movs	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055d6:	f000 ff89 	bl	80064ec <vPortExitCritical>

	return xReturn;
 80055da:	69fb      	ldr	r3, [r7, #28]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000cfc 	.word	0x20000cfc
 80055e8:	20000d10 	.word	0x20000d10

080055ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055f0:	4b03      	ldr	r3, [pc, #12]	@ (8005600 <vTaskMissedYield+0x14>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
}
 80055f6:	bf00      	nop
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	20000d0c 	.word	0x20000d0c

08005604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800560c:	f000 f852 	bl	80056b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005610:	4b06      	ldr	r3, [pc, #24]	@ (800562c <prvIdleTask+0x28>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d9f9      	bls.n	800560c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005618:	4b05      	ldr	r3, [pc, #20]	@ (8005630 <prvIdleTask+0x2c>)
 800561a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005628:	e7f0      	b.n	800560c <prvIdleTask+0x8>
 800562a:	bf00      	nop
 800562c:	20000828 	.word	0x20000828
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800563a:	2300      	movs	r3, #0
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	e00c      	b.n	800565a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4a12      	ldr	r2, [pc, #72]	@ (8005694 <prvInitialiseTaskLists+0x60>)
 800564c:	4413      	add	r3, r2
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe f9a4 	bl	800399c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3301      	adds	r3, #1
 8005658:	607b      	str	r3, [r7, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b37      	cmp	r3, #55	@ 0x37
 800565e:	d9ef      	bls.n	8005640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005660:	480d      	ldr	r0, [pc, #52]	@ (8005698 <prvInitialiseTaskLists+0x64>)
 8005662:	f7fe f99b 	bl	800399c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005666:	480d      	ldr	r0, [pc, #52]	@ (800569c <prvInitialiseTaskLists+0x68>)
 8005668:	f7fe f998 	bl	800399c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800566c:	480c      	ldr	r0, [pc, #48]	@ (80056a0 <prvInitialiseTaskLists+0x6c>)
 800566e:	f7fe f995 	bl	800399c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005672:	480c      	ldr	r0, [pc, #48]	@ (80056a4 <prvInitialiseTaskLists+0x70>)
 8005674:	f7fe f992 	bl	800399c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005678:	480b      	ldr	r0, [pc, #44]	@ (80056a8 <prvInitialiseTaskLists+0x74>)
 800567a:	f7fe f98f 	bl	800399c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800567e:	4b0b      	ldr	r3, [pc, #44]	@ (80056ac <prvInitialiseTaskLists+0x78>)
 8005680:	4a05      	ldr	r2, [pc, #20]	@ (8005698 <prvInitialiseTaskLists+0x64>)
 8005682:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005684:	4b0a      	ldr	r3, [pc, #40]	@ (80056b0 <prvInitialiseTaskLists+0x7c>)
 8005686:	4a05      	ldr	r2, [pc, #20]	@ (800569c <prvInitialiseTaskLists+0x68>)
 8005688:	601a      	str	r2, [r3, #0]
}
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000828 	.word	0x20000828
 8005698:	20000c88 	.word	0x20000c88
 800569c:	20000c9c 	.word	0x20000c9c
 80056a0:	20000cb8 	.word	0x20000cb8
 80056a4:	20000ccc 	.word	0x20000ccc
 80056a8:	20000ce4 	.word	0x20000ce4
 80056ac:	20000cb0 	.word	0x20000cb0
 80056b0:	20000cb4 	.word	0x20000cb4

080056b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056ba:	e019      	b.n	80056f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056bc:	f000 fee4 	bl	8006488 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c0:	4b10      	ldr	r3, [pc, #64]	@ (8005704 <prvCheckTasksWaitingTermination+0x50>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fe f9ef 	bl	8003ab0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005708 <prvCheckTasksWaitingTermination+0x54>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	4a0b      	ldr	r2, [pc, #44]	@ (8005708 <prvCheckTasksWaitingTermination+0x54>)
 80056da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056dc:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <prvCheckTasksWaitingTermination+0x58>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	4a0a      	ldr	r2, [pc, #40]	@ (800570c <prvCheckTasksWaitingTermination+0x58>)
 80056e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056e6:	f000 ff01 	bl	80064ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f810 	bl	8005710 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056f0:	4b06      	ldr	r3, [pc, #24]	@ (800570c <prvCheckTasksWaitingTermination+0x58>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e1      	bne.n	80056bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000ccc 	.word	0x20000ccc
 8005708:	20000cf8 	.word	0x20000cf8
 800570c:	20000ce0 	.word	0x20000ce0

08005710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800571e:	2b00      	cmp	r3, #0
 8005720:	d108      	bne.n	8005734 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005726:	4618      	mov	r0, r3
 8005728:	f001 f89e 	bl	8006868 <vPortFree>
				vPortFree( pxTCB );
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 f89b 	bl	8006868 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005732:	e019      	b.n	8005768 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800573a:	2b01      	cmp	r3, #1
 800573c:	d103      	bne.n	8005746 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f001 f892 	bl	8006868 <vPortFree>
	}
 8005744:	e010      	b.n	8005768 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800574c:	2b02      	cmp	r3, #2
 800574e:	d00b      	beq.n	8005768 <prvDeleteTCB+0x58>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	60fb      	str	r3, [r7, #12]
}
 8005762:	bf00      	nop
 8005764:	bf00      	nop
 8005766:	e7fd      	b.n	8005764 <prvDeleteTCB+0x54>
	}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005776:	4b0c      	ldr	r3, [pc, #48]	@ (80057a8 <prvResetNextTaskUnblockTime+0x38>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005780:	4b0a      	ldr	r3, [pc, #40]	@ (80057ac <prvResetNextTaskUnblockTime+0x3c>)
 8005782:	f04f 32ff 	mov.w	r2, #4294967295
 8005786:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005788:	e008      	b.n	800579c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800578a:	4b07      	ldr	r3, [pc, #28]	@ (80057a8 <prvResetNextTaskUnblockTime+0x38>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4a04      	ldr	r2, [pc, #16]	@ (80057ac <prvResetNextTaskUnblockTime+0x3c>)
 800579a:	6013      	str	r3, [r2, #0]
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	20000cb0 	.word	0x20000cb0
 80057ac:	20000d18 	.word	0x20000d18

080057b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057b6:	4b0b      	ldr	r3, [pc, #44]	@ (80057e4 <xTaskGetSchedulerState+0x34>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057be:	2301      	movs	r3, #1
 80057c0:	607b      	str	r3, [r7, #4]
 80057c2:	e008      	b.n	80057d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057c4:	4b08      	ldr	r3, [pc, #32]	@ (80057e8 <xTaskGetSchedulerState+0x38>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057cc:	2302      	movs	r3, #2
 80057ce:	607b      	str	r3, [r7, #4]
 80057d0:	e001      	b.n	80057d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057d2:	2300      	movs	r3, #0
 80057d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057d6:	687b      	ldr	r3, [r7, #4]
	}
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	20000d04 	.word	0x20000d04
 80057e8:	20000d20 	.word	0x20000d20

080057ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d051      	beq.n	80058a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005806:	4b2a      	ldr	r3, [pc, #168]	@ (80058b0 <xTaskPriorityInherit+0xc4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580c:	429a      	cmp	r2, r3
 800580e:	d241      	bcs.n	8005894 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	db06      	blt.n	8005826 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005818:	4b25      	ldr	r3, [pc, #148]	@ (80058b0 <xTaskPriorityInherit+0xc4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6959      	ldr	r1, [r3, #20]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4a1f      	ldr	r2, [pc, #124]	@ (80058b4 <xTaskPriorityInherit+0xc8>)
 8005838:	4413      	add	r3, r2
 800583a:	4299      	cmp	r1, r3
 800583c:	d122      	bne.n	8005884 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	3304      	adds	r3, #4
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe f934 	bl	8003ab0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005848:	4b19      	ldr	r3, [pc, #100]	@ (80058b0 <xTaskPriorityInherit+0xc4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005856:	4b18      	ldr	r3, [pc, #96]	@ (80058b8 <xTaskPriorityInherit+0xcc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d903      	bls.n	8005866 <xTaskPriorityInherit+0x7a>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005862:	4a15      	ldr	r2, [pc, #84]	@ (80058b8 <xTaskPriorityInherit+0xcc>)
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4a10      	ldr	r2, [pc, #64]	@ (80058b4 <xTaskPriorityInherit+0xc8>)
 8005874:	441a      	add	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	3304      	adds	r3, #4
 800587a:	4619      	mov	r1, r3
 800587c:	4610      	mov	r0, r2
 800587e:	f7fe f8ba 	bl	80039f6 <vListInsertEnd>
 8005882:	e004      	b.n	800588e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005884:	4b0a      	ldr	r3, [pc, #40]	@ (80058b0 <xTaskPriorityInherit+0xc4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800588e:	2301      	movs	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	e008      	b.n	80058a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005898:	4b05      	ldr	r3, [pc, #20]	@ (80058b0 <xTaskPriorityInherit+0xc4>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589e:	429a      	cmp	r2, r3
 80058a0:	d201      	bcs.n	80058a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80058a2:	2301      	movs	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058a6:	68fb      	ldr	r3, [r7, #12]
	}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20000824 	.word	0x20000824
 80058b4:	20000828 	.word	0x20000828
 80058b8:	20000d00 	.word	0x20000d00

080058bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d058      	beq.n	8005984 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005990 <xTaskPriorityDisinherit+0xd4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d00b      	beq.n	80058f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60fb      	str	r3, [r7, #12]
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	e7fd      	b.n	80058f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60bb      	str	r3, [r7, #8]
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	e7fd      	b.n	8005910 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005918:	1e5a      	subs	r2, r3, #1
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005926:	429a      	cmp	r2, r3
 8005928:	d02c      	beq.n	8005984 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800592e:	2b00      	cmp	r3, #0
 8005930:	d128      	bne.n	8005984 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	3304      	adds	r3, #4
 8005936:	4618      	mov	r0, r3
 8005938:	f7fe f8ba 	bl	8003ab0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005954:	4b0f      	ldr	r3, [pc, #60]	@ (8005994 <xTaskPriorityDisinherit+0xd8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d903      	bls.n	8005964 <xTaskPriorityDisinherit+0xa8>
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005960:	4a0c      	ldr	r2, [pc, #48]	@ (8005994 <xTaskPriorityDisinherit+0xd8>)
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4a09      	ldr	r2, [pc, #36]	@ (8005998 <xTaskPriorityDisinherit+0xdc>)
 8005972:	441a      	add	r2, r3
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	3304      	adds	r3, #4
 8005978:	4619      	mov	r1, r3
 800597a:	4610      	mov	r0, r2
 800597c:	f7fe f83b 	bl	80039f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005980:	2301      	movs	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005984:	697b      	ldr	r3, [r7, #20]
	}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000824 	.word	0x20000824
 8005994:	20000d00 	.word	0x20000d00
 8005998:	20000828 	.word	0x20000828

0800599c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80059aa:	2301      	movs	r3, #1
 80059ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d06c      	beq.n	8005a8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10b      	bne.n	80059d4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	60fb      	str	r3, [r7, #12]
}
 80059ce:	bf00      	nop
 80059d0:	bf00      	nop
 80059d2:	e7fd      	b.n	80059d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d902      	bls.n	80059e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	e002      	b.n	80059ea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d04c      	beq.n	8005a8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d147      	bne.n	8005a8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80059fe:	4b26      	ldr	r3, [pc, #152]	@ (8005a98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d10b      	bne.n	8005a20 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	60bb      	str	r3, [r7, #8]
}
 8005a1a:	bf00      	nop
 8005a1c:	bf00      	nop
 8005a1e:	e7fd      	b.n	8005a1c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	db04      	blt.n	8005a3e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	6959      	ldr	r1, [r3, #20]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4a13      	ldr	r2, [pc, #76]	@ (8005a9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a4e:	4413      	add	r3, r2
 8005a50:	4299      	cmp	r1, r3
 8005a52:	d11c      	bne.n	8005a8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe f829 	bl	8003ab0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a62:	4b0f      	ldr	r3, [pc, #60]	@ (8005aa0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d903      	bls.n	8005a72 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8005aa0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4a07      	ldr	r2, [pc, #28]	@ (8005a9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a80:	441a      	add	r2, r3
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	3304      	adds	r3, #4
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f7fd ffb4 	bl	80039f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a8e:	bf00      	nop
 8005a90:	3720      	adds	r7, #32
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20000824 	.word	0x20000824
 8005a9c:	20000828 	.word	0x20000828
 8005aa0:	20000d00 	.word	0x20000d00

08005aa4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005aa8:	4b07      	ldr	r3, [pc, #28]	@ (8005ac8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d004      	beq.n	8005aba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005ab0:	4b05      	ldr	r3, [pc, #20]	@ (8005ac8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ab6:	3201      	adds	r2, #1
 8005ab8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005aba:	4b03      	ldr	r3, [pc, #12]	@ (8005ac8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005abc:	681b      	ldr	r3, [r3, #0]
	}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	20000824 	.word	0x20000824

08005acc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ad6:	4b21      	ldr	r3, [pc, #132]	@ (8005b5c <prvAddCurrentTaskToDelayedList+0x90>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005adc:	4b20      	ldr	r3, [pc, #128]	@ (8005b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fd ffe4 	bl	8003ab0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d10a      	bne.n	8005b06 <prvAddCurrentTaskToDelayedList+0x3a>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005af6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3304      	adds	r3, #4
 8005afc:	4619      	mov	r1, r3
 8005afe:	4819      	ldr	r0, [pc, #100]	@ (8005b64 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b00:	f7fd ff79 	bl	80039f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b04:	e026      	b.n	8005b54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b0e:	4b14      	ldr	r3, [pc, #80]	@ (8005b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d209      	bcs.n	8005b32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b1e:	4b12      	ldr	r3, [pc, #72]	@ (8005b68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b0f      	ldr	r3, [pc, #60]	@ (8005b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3304      	adds	r3, #4
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f7fd ff87 	bl	8003a3e <vListInsert>
}
 8005b30:	e010      	b.n	8005b54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b32:	4b0e      	ldr	r3, [pc, #56]	@ (8005b6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4b0a      	ldr	r3, [pc, #40]	@ (8005b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	f7fd ff7d 	bl	8003a3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b44:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d202      	bcs.n	8005b54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b4e:	4a08      	ldr	r2, [pc, #32]	@ (8005b70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	6013      	str	r3, [r2, #0]
}
 8005b54:	bf00      	nop
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20000cfc 	.word	0x20000cfc
 8005b60:	20000824 	.word	0x20000824
 8005b64:	20000ce4 	.word	0x20000ce4
 8005b68:	20000cb4 	.word	0x20000cb4
 8005b6c:	20000cb0 	.word	0x20000cb0
 8005b70:	20000d18 	.word	0x20000d18

08005b74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08a      	sub	sp, #40	@ 0x28
 8005b78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b7e:	f000 fb13 	bl	80061a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b82:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf8 <xTimerCreateTimerTask+0x84>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d021      	beq.n	8005bce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b92:	1d3a      	adds	r2, r7, #4
 8005b94:	f107 0108 	add.w	r1, r7, #8
 8005b98:	f107 030c 	add.w	r3, r7, #12
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fd fee3 	bl	8003968 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	9202      	str	r2, [sp, #8]
 8005baa:	9301      	str	r3, [sp, #4]
 8005bac:	2302      	movs	r3, #2
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	460a      	mov	r2, r1
 8005bb4:	4911      	ldr	r1, [pc, #68]	@ (8005bfc <xTimerCreateTimerTask+0x88>)
 8005bb6:	4812      	ldr	r0, [pc, #72]	@ (8005c00 <xTimerCreateTimerTask+0x8c>)
 8005bb8:	f7fe ffd0 	bl	8004b5c <xTaskCreateStatic>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4a11      	ldr	r2, [pc, #68]	@ (8005c04 <xTimerCreateTimerTask+0x90>)
 8005bc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bc2:	4b10      	ldr	r3, [pc, #64]	@ (8005c04 <xTimerCreateTimerTask+0x90>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10b      	bne.n	8005bec <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	613b      	str	r3, [r7, #16]
}
 8005be6:	bf00      	nop
 8005be8:	bf00      	nop
 8005bea:	e7fd      	b.n	8005be8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005bec:	697b      	ldr	r3, [r7, #20]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000d54 	.word	0x20000d54
 8005bfc:	08007338 	.word	0x08007338
 8005c00:	08005d41 	.word	0x08005d41
 8005c04:	20000d58 	.word	0x20000d58

08005c08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	@ 0x28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <xTimerGenericCommand+0x30>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	623b      	str	r3, [r7, #32]
}
 8005c32:	bf00      	nop
 8005c34:	bf00      	nop
 8005c36:	e7fd      	b.n	8005c34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c38:	4b19      	ldr	r3, [pc, #100]	@ (8005ca0 <xTimerGenericCommand+0x98>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d02a      	beq.n	8005c96 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	dc18      	bgt.n	8005c84 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c52:	f7ff fdad 	bl	80057b0 <xTaskGetSchedulerState>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d109      	bne.n	8005c70 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ca0 <xTimerGenericCommand+0x98>)
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	f107 0110 	add.w	r1, r7, #16
 8005c64:	2300      	movs	r3, #0
 8005c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c68:	f7fe f900 	bl	8003e6c <xQueueGenericSend>
 8005c6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c6e:	e012      	b.n	8005c96 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca0 <xTimerGenericCommand+0x98>)
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	f107 0110 	add.w	r1, r7, #16
 8005c78:	2300      	movs	r3, #0
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f7fe f8f6 	bl	8003e6c <xQueueGenericSend>
 8005c80:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c82:	e008      	b.n	8005c96 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c84:	4b06      	ldr	r3, [pc, #24]	@ (8005ca0 <xTimerGenericCommand+0x98>)
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	f107 0110 	add.w	r1, r7, #16
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	f7fe f9ee 	bl	8004070 <xQueueGenericSendFromISR>
 8005c94:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3728      	adds	r7, #40	@ 0x28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20000d54 	.word	0x20000d54

08005ca4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cae:	4b23      	ldr	r3, [pc, #140]	@ (8005d3c <prvProcessExpiredTimer+0x98>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fd fef7 	bl	8003ab0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d023      	beq.n	8005d18 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	699a      	ldr	r2, [r3, #24]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	18d1      	adds	r1, r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	6978      	ldr	r0, [r7, #20]
 8005cde:	f000 f8d5 	bl	8005e8c <prvInsertTimerInActiveList>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d020      	beq.n	8005d2a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	2300      	movs	r3, #0
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	6978      	ldr	r0, [r7, #20]
 8005cf4:	f7ff ff88 	bl	8005c08 <xTimerGenericCommand>
 8005cf8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d114      	bne.n	8005d2a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	60fb      	str	r3, [r7, #12]
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	e7fd      	b.n	8005d14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d1e:	f023 0301 	bic.w	r3, r3, #1
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	6978      	ldr	r0, [r7, #20]
 8005d30:	4798      	blx	r3
}
 8005d32:	bf00      	nop
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000d4c 	.word	0x20000d4c

08005d40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d48:	f107 0308 	add.w	r3, r7, #8
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 f859 	bl	8005e04 <prvGetNextExpireTime>
 8005d52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4619      	mov	r1, r3
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f805 	bl	8005d68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d5e:	f000 f8d7 	bl	8005f10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d62:	bf00      	nop
 8005d64:	e7f0      	b.n	8005d48 <prvTimerTask+0x8>
	...

08005d68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d72:	f7ff f937 	bl	8004fe4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d76:	f107 0308 	add.w	r3, r7, #8
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 f866 	bl	8005e4c <prvSampleTimeNow>
 8005d80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d130      	bne.n	8005dea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <prvProcessTimerOrBlockTask+0x3c>
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d806      	bhi.n	8005da4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d96:	f7ff f933 	bl	8005000 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d9a:	68f9      	ldr	r1, [r7, #12]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ff81 	bl	8005ca4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005da2:	e024      	b.n	8005dee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d008      	beq.n	8005dbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005daa:	4b13      	ldr	r3, [pc, #76]	@ (8005df8 <prvProcessTimerOrBlockTask+0x90>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <prvProcessTimerOrBlockTask+0x50>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <prvProcessTimerOrBlockTask+0x52>
 8005db8:	2300      	movs	r3, #0
 8005dba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8005dfc <prvProcessTimerOrBlockTask+0x94>)
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f7fe fe93 	bl	8004af4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005dce:	f7ff f917 	bl	8005000 <xTaskResumeAll>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005dd8:	4b09      	ldr	r3, [pc, #36]	@ (8005e00 <prvProcessTimerOrBlockTask+0x98>)
 8005dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	f3bf 8f6f 	isb	sy
}
 8005de8:	e001      	b.n	8005dee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dea:	f7ff f909 	bl	8005000 <xTaskResumeAll>
}
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000d50 	.word	0x20000d50
 8005dfc:	20000d54 	.word	0x20000d54
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005e48 <prvGetNextExpireTime+0x44>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <prvGetNextExpireTime+0x16>
 8005e16:	2201      	movs	r2, #1
 8005e18:	e000      	b.n	8005e1c <prvGetNextExpireTime+0x18>
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d105      	bne.n	8005e34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e28:	4b07      	ldr	r3, [pc, #28]	@ (8005e48 <prvGetNextExpireTime+0x44>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e001      	b.n	8005e38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e38:	68fb      	ldr	r3, [r7, #12]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20000d4c 	.word	0x20000d4c

08005e4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e54:	f7ff f972 	bl	800513c <xTaskGetTickCount>
 8005e58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e88 <prvSampleTimeNow+0x3c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d205      	bcs.n	8005e70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e64:	f000 f93a 	bl	80060dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	e002      	b.n	8005e76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e76:	4a04      	ldr	r2, [pc, #16]	@ (8005e88 <prvSampleTimeNow+0x3c>)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000d5c 	.word	0x20000d5c

08005e8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d812      	bhi.n	8005ed8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	1ad2      	subs	r2, r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d302      	bcc.n	8005ec6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e01b      	b.n	8005efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ec6:	4b10      	ldr	r3, [pc, #64]	@ (8005f08 <prvInsertTimerInActiveList+0x7c>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f7fd fdb4 	bl	8003a3e <vListInsert>
 8005ed6:	e012      	b.n	8005efe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d206      	bcs.n	8005eee <prvInsertTimerInActiveList+0x62>
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d302      	bcc.n	8005eee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	e007      	b.n	8005efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eee:	4b07      	ldr	r3, [pc, #28]	@ (8005f0c <prvInsertTimerInActiveList+0x80>)
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f7fd fda0 	bl	8003a3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005efe:	697b      	ldr	r3, [r7, #20]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	20000d50 	.word	0x20000d50
 8005f0c:	20000d4c 	.word	0x20000d4c

08005f10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08e      	sub	sp, #56	@ 0x38
 8005f14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f16:	e0ce      	b.n	80060b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	da19      	bge.n	8005f52 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f1e:	1d3b      	adds	r3, r7, #4
 8005f20:	3304      	adds	r3, #4
 8005f22:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10b      	bne.n	8005f42 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	61fb      	str	r3, [r7, #28]
}
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	e7fd      	b.n	8005f3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f48:	6850      	ldr	r0, [r2, #4]
 8005f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f4c:	6892      	ldr	r2, [r2, #8]
 8005f4e:	4611      	mov	r1, r2
 8005f50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f2c0 80ae 	blt.w	80060b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d004      	beq.n	8005f70 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f68:	3304      	adds	r3, #4
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fd fda0 	bl	8003ab0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f70:	463b      	mov	r3, r7
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff ff6a 	bl	8005e4c <prvSampleTimeNow>
 8005f78:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b09      	cmp	r3, #9
 8005f7e:	f200 8097 	bhi.w	80060b0 <prvProcessReceivedCommands+0x1a0>
 8005f82:	a201      	add	r2, pc, #4	@ (adr r2, 8005f88 <prvProcessReceivedCommands+0x78>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005fb1 	.word	0x08005fb1
 8005f8c:	08005fb1 	.word	0x08005fb1
 8005f90:	08005fb1 	.word	0x08005fb1
 8005f94:	08006027 	.word	0x08006027
 8005f98:	0800603b 	.word	0x0800603b
 8005f9c:	08006087 	.word	0x08006087
 8005fa0:	08005fb1 	.word	0x08005fb1
 8005fa4:	08005fb1 	.word	0x08005fb1
 8005fa8:	08006027 	.word	0x08006027
 8005fac:	0800603b 	.word	0x0800603b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fb6:	f043 0301 	orr.w	r3, r3, #1
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	18d1      	adds	r1, r2, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fd0:	f7ff ff5c 	bl	8005e8c <prvInsertTimerInActiveList>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d06c      	beq.n	80060b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fe0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d061      	beq.n	80060b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	441a      	add	r2, r3
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	2100      	movs	r1, #0
 8006000:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006002:	f7ff fe01 	bl	8005c08 <xTimerGenericCommand>
 8006006:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d152      	bne.n	80060b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	61bb      	str	r3, [r7, #24]
}
 8006020:	bf00      	nop
 8006022:	bf00      	nop
 8006024:	e7fd      	b.n	8006022 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800602c:	f023 0301 	bic.w	r3, r3, #1
 8006030:	b2da      	uxtb	r2, r3
 8006032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006034:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006038:	e03d      	b.n	80060b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800603a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	b2da      	uxtb	r2, r3
 8006046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006048:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006050:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	617b      	str	r3, [r7, #20]
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	e7fd      	b.n	800606e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006074:	699a      	ldr	r2, [r3, #24]
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	18d1      	adds	r1, r2, r3
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800607e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006080:	f7ff ff04 	bl	8005e8c <prvInsertTimerInActiveList>
					break;
 8006084:	e017      	b.n	80060b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006094:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006096:	f000 fbe7 	bl	8006868 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800609a:	e00c      	b.n	80060b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800609c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060a2:	f023 0301 	bic.w	r3, r3, #1
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80060ae:	e002      	b.n	80060b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80060b0:	bf00      	nop
 80060b2:	e000      	b.n	80060b6 <prvProcessReceivedCommands+0x1a6>
					break;
 80060b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060b6:	4b08      	ldr	r3, [pc, #32]	@ (80060d8 <prvProcessReceivedCommands+0x1c8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	1d39      	adds	r1, r7, #4
 80060bc:	2200      	movs	r2, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe f904 	bl	80042cc <xQueueReceive>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f47f af26 	bne.w	8005f18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	3730      	adds	r7, #48	@ 0x30
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000d54 	.word	0x20000d54

080060dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060e2:	e049      	b.n	8006178 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060e4:	4b2e      	ldr	r3, [pc, #184]	@ (80061a0 <prvSwitchTimerLists+0xc4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ee:	4b2c      	ldr	r3, [pc, #176]	@ (80061a0 <prvSwitchTimerLists+0xc4>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fd fcd7 	bl	8003ab0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b00      	cmp	r3, #0
 8006116:	d02f      	beq.n	8006178 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4413      	add	r3, r2
 8006120:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	429a      	cmp	r2, r3
 8006128:	d90e      	bls.n	8006148 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006136:	4b1a      	ldr	r3, [pc, #104]	@ (80061a0 <prvSwitchTimerLists+0xc4>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f7fd fc7c 	bl	8003a3e <vListInsert>
 8006146:	e017      	b.n	8006178 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006148:	2300      	movs	r3, #0
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	2300      	movs	r3, #0
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	2100      	movs	r1, #0
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f7ff fd58 	bl	8005c08 <xTimerGenericCommand>
 8006158:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10b      	bne.n	8006178 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	603b      	str	r3, [r7, #0]
}
 8006172:	bf00      	nop
 8006174:	bf00      	nop
 8006176:	e7fd      	b.n	8006174 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006178:	4b09      	ldr	r3, [pc, #36]	@ (80061a0 <prvSwitchTimerLists+0xc4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1b0      	bne.n	80060e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006182:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <prvSwitchTimerLists+0xc4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006188:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <prvSwitchTimerLists+0xc8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a04      	ldr	r2, [pc, #16]	@ (80061a0 <prvSwitchTimerLists+0xc4>)
 800618e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006190:	4a04      	ldr	r2, [pc, #16]	@ (80061a4 <prvSwitchTimerLists+0xc8>)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	6013      	str	r3, [r2, #0]
}
 8006196:	bf00      	nop
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000d4c 	.word	0x20000d4c
 80061a4:	20000d50 	.word	0x20000d50

080061a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061ae:	f000 f96b 	bl	8006488 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061b2:	4b15      	ldr	r3, [pc, #84]	@ (8006208 <prvCheckForValidListAndQueue+0x60>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d120      	bne.n	80061fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061ba:	4814      	ldr	r0, [pc, #80]	@ (800620c <prvCheckForValidListAndQueue+0x64>)
 80061bc:	f7fd fbee 	bl	800399c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061c0:	4813      	ldr	r0, [pc, #76]	@ (8006210 <prvCheckForValidListAndQueue+0x68>)
 80061c2:	f7fd fbeb 	bl	800399c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061c6:	4b13      	ldr	r3, [pc, #76]	@ (8006214 <prvCheckForValidListAndQueue+0x6c>)
 80061c8:	4a10      	ldr	r2, [pc, #64]	@ (800620c <prvCheckForValidListAndQueue+0x64>)
 80061ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061cc:	4b12      	ldr	r3, [pc, #72]	@ (8006218 <prvCheckForValidListAndQueue+0x70>)
 80061ce:	4a10      	ldr	r2, [pc, #64]	@ (8006210 <prvCheckForValidListAndQueue+0x68>)
 80061d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061d2:	2300      	movs	r3, #0
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	4b11      	ldr	r3, [pc, #68]	@ (800621c <prvCheckForValidListAndQueue+0x74>)
 80061d8:	4a11      	ldr	r2, [pc, #68]	@ (8006220 <prvCheckForValidListAndQueue+0x78>)
 80061da:	2110      	movs	r1, #16
 80061dc:	200a      	movs	r0, #10
 80061de:	f7fd fcfb 	bl	8003bd8 <xQueueGenericCreateStatic>
 80061e2:	4603      	mov	r3, r0
 80061e4:	4a08      	ldr	r2, [pc, #32]	@ (8006208 <prvCheckForValidListAndQueue+0x60>)
 80061e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061e8:	4b07      	ldr	r3, [pc, #28]	@ (8006208 <prvCheckForValidListAndQueue+0x60>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061f0:	4b05      	ldr	r3, [pc, #20]	@ (8006208 <prvCheckForValidListAndQueue+0x60>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	490b      	ldr	r1, [pc, #44]	@ (8006224 <prvCheckForValidListAndQueue+0x7c>)
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe fc28 	bl	8004a4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061fc:	f000 f976 	bl	80064ec <vPortExitCritical>
}
 8006200:	bf00      	nop
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000d54 	.word	0x20000d54
 800620c:	20000d24 	.word	0x20000d24
 8006210:	20000d38 	.word	0x20000d38
 8006214:	20000d4c 	.word	0x20000d4c
 8006218:	20000d50 	.word	0x20000d50
 800621c:	20000e00 	.word	0x20000e00
 8006220:	20000d60 	.word	0x20000d60
 8006224:	08007340 	.word	0x08007340

08006228 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3b04      	subs	r3, #4
 8006238:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3b04      	subs	r3, #4
 8006246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f023 0201 	bic.w	r2, r3, #1
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3b04      	subs	r3, #4
 8006256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006258:	4a0c      	ldr	r2, [pc, #48]	@ (800628c <pxPortInitialiseStack+0x64>)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3b14      	subs	r3, #20
 8006262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3b04      	subs	r3, #4
 800626e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f06f 0202 	mvn.w	r2, #2
 8006276:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3b20      	subs	r3, #32
 800627c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800627e:	68fb      	ldr	r3, [r7, #12]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	08006291 	.word	0x08006291

08006290 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800629a:	4b13      	ldr	r3, [pc, #76]	@ (80062e8 <prvTaskExitError+0x58>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d00b      	beq.n	80062bc <prvTaskExitError+0x2c>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	60fb      	str	r3, [r7, #12]
}
 80062b6:	bf00      	nop
 80062b8:	bf00      	nop
 80062ba:	e7fd      	b.n	80062b8 <prvTaskExitError+0x28>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	60bb      	str	r3, [r7, #8]
}
 80062ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062d0:	bf00      	nop
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0fc      	beq.n	80062d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	2000000c 	.word	0x2000000c
 80062ec:	00000000 	.word	0x00000000

080062f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062f0:	4b07      	ldr	r3, [pc, #28]	@ (8006310 <pxCurrentTCBConst2>)
 80062f2:	6819      	ldr	r1, [r3, #0]
 80062f4:	6808      	ldr	r0, [r1, #0]
 80062f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fa:	f380 8809 	msr	PSP, r0
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f380 8811 	msr	BASEPRI, r0
 800630a:	4770      	bx	lr
 800630c:	f3af 8000 	nop.w

08006310 <pxCurrentTCBConst2>:
 8006310:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006318:	4808      	ldr	r0, [pc, #32]	@ (800633c <prvPortStartFirstTask+0x24>)
 800631a:	6800      	ldr	r0, [r0, #0]
 800631c:	6800      	ldr	r0, [r0, #0]
 800631e:	f380 8808 	msr	MSP, r0
 8006322:	f04f 0000 	mov.w	r0, #0
 8006326:	f380 8814 	msr	CONTROL, r0
 800632a:	b662      	cpsie	i
 800632c:	b661      	cpsie	f
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	df00      	svc	0
 8006338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800633a:	bf00      	nop
 800633c:	e000ed08 	.word	0xe000ed08

08006340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006346:	4b47      	ldr	r3, [pc, #284]	@ (8006464 <xPortStartScheduler+0x124>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a47      	ldr	r2, [pc, #284]	@ (8006468 <xPortStartScheduler+0x128>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d10b      	bne.n	8006368 <xPortStartScheduler+0x28>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	613b      	str	r3, [r7, #16]
}
 8006362:	bf00      	nop
 8006364:	bf00      	nop
 8006366:	e7fd      	b.n	8006364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006368:	4b3e      	ldr	r3, [pc, #248]	@ (8006464 <xPortStartScheduler+0x124>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a3f      	ldr	r2, [pc, #252]	@ (800646c <xPortStartScheduler+0x12c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d10b      	bne.n	800638a <xPortStartScheduler+0x4a>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	60fb      	str	r3, [r7, #12]
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	e7fd      	b.n	8006386 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800638a:	4b39      	ldr	r3, [pc, #228]	@ (8006470 <xPortStartScheduler+0x130>)
 800638c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	22ff      	movs	r2, #255	@ 0xff
 800639a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	4b31      	ldr	r3, [pc, #196]	@ (8006474 <xPortStartScheduler+0x134>)
 80063b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063b2:	4b31      	ldr	r3, [pc, #196]	@ (8006478 <xPortStartScheduler+0x138>)
 80063b4:	2207      	movs	r2, #7
 80063b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063b8:	e009      	b.n	80063ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80063ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006478 <xPortStartScheduler+0x138>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3b01      	subs	r3, #1
 80063c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006478 <xPortStartScheduler+0x138>)
 80063c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d6:	2b80      	cmp	r3, #128	@ 0x80
 80063d8:	d0ef      	beq.n	80063ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063da:	4b27      	ldr	r3, [pc, #156]	@ (8006478 <xPortStartScheduler+0x138>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f1c3 0307 	rsb	r3, r3, #7
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d00b      	beq.n	80063fe <xPortStartScheduler+0xbe>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60bb      	str	r3, [r7, #8]
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	e7fd      	b.n	80063fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006478 <xPortStartScheduler+0x138>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	4a1c      	ldr	r2, [pc, #112]	@ (8006478 <xPortStartScheduler+0x138>)
 8006406:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006408:	4b1b      	ldr	r3, [pc, #108]	@ (8006478 <xPortStartScheduler+0x138>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006410:	4a19      	ldr	r2, [pc, #100]	@ (8006478 <xPortStartScheduler+0x138>)
 8006412:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	b2da      	uxtb	r2, r3
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800641c:	4b17      	ldr	r3, [pc, #92]	@ (800647c <xPortStartScheduler+0x13c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a16      	ldr	r2, [pc, #88]	@ (800647c <xPortStartScheduler+0x13c>)
 8006422:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006426:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006428:	4b14      	ldr	r3, [pc, #80]	@ (800647c <xPortStartScheduler+0x13c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a13      	ldr	r2, [pc, #76]	@ (800647c <xPortStartScheduler+0x13c>)
 800642e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006432:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006434:	f000 f8da 	bl	80065ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006438:	4b11      	ldr	r3, [pc, #68]	@ (8006480 <xPortStartScheduler+0x140>)
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800643e:	f000 f8f9 	bl	8006634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006442:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <xPortStartScheduler+0x144>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a0f      	ldr	r2, [pc, #60]	@ (8006484 <xPortStartScheduler+0x144>)
 8006448:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800644c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800644e:	f7ff ff63 	bl	8006318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006452:	f7fe ff3d 	bl	80052d0 <vTaskSwitchContext>
	prvTaskExitError();
 8006456:	f7ff ff1b 	bl	8006290 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	e000ed00 	.word	0xe000ed00
 8006468:	410fc271 	.word	0x410fc271
 800646c:	410fc270 	.word	0x410fc270
 8006470:	e000e400 	.word	0xe000e400
 8006474:	20000e50 	.word	0x20000e50
 8006478:	20000e54 	.word	0x20000e54
 800647c:	e000ed20 	.word	0xe000ed20
 8006480:	2000000c 	.word	0x2000000c
 8006484:	e000ef34 	.word	0xe000ef34

08006488 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	607b      	str	r3, [r7, #4]
}
 80064a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064a2:	4b10      	ldr	r3, [pc, #64]	@ (80064e4 <vPortEnterCritical+0x5c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3301      	adds	r3, #1
 80064a8:	4a0e      	ldr	r2, [pc, #56]	@ (80064e4 <vPortEnterCritical+0x5c>)
 80064aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064ac:	4b0d      	ldr	r3, [pc, #52]	@ (80064e4 <vPortEnterCritical+0x5c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d110      	bne.n	80064d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064b4:	4b0c      	ldr	r3, [pc, #48]	@ (80064e8 <vPortEnterCritical+0x60>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	603b      	str	r3, [r7, #0]
}
 80064d0:	bf00      	nop
 80064d2:	bf00      	nop
 80064d4:	e7fd      	b.n	80064d2 <vPortEnterCritical+0x4a>
	}
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	2000000c 	.word	0x2000000c
 80064e8:	e000ed04 	.word	0xe000ed04

080064ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064f2:	4b12      	ldr	r3, [pc, #72]	@ (800653c <vPortExitCritical+0x50>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <vPortExitCritical+0x26>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	607b      	str	r3, [r7, #4]
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	e7fd      	b.n	800650e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006512:	4b0a      	ldr	r3, [pc, #40]	@ (800653c <vPortExitCritical+0x50>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3b01      	subs	r3, #1
 8006518:	4a08      	ldr	r2, [pc, #32]	@ (800653c <vPortExitCritical+0x50>)
 800651a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800651c:	4b07      	ldr	r3, [pc, #28]	@ (800653c <vPortExitCritical+0x50>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <vPortExitCritical+0x44>
 8006524:	2300      	movs	r3, #0
 8006526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f383 8811 	msr	BASEPRI, r3
}
 800652e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	2000000c 	.word	0x2000000c

08006540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006540:	f3ef 8009 	mrs	r0, PSP
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	4b15      	ldr	r3, [pc, #84]	@ (80065a0 <pxCurrentTCBConst>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	f01e 0f10 	tst.w	lr, #16
 8006550:	bf08      	it	eq
 8006552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655a:	6010      	str	r0, [r2, #0]
 800655c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006564:	f380 8811 	msr	BASEPRI, r0
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f7fe feae 	bl	80052d0 <vTaskSwitchContext>
 8006574:	f04f 0000 	mov.w	r0, #0
 8006578:	f380 8811 	msr	BASEPRI, r0
 800657c:	bc09      	pop	{r0, r3}
 800657e:	6819      	ldr	r1, [r3, #0]
 8006580:	6808      	ldr	r0, [r1, #0]
 8006582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006586:	f01e 0f10 	tst.w	lr, #16
 800658a:	bf08      	it	eq
 800658c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006590:	f380 8809 	msr	PSP, r0
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	f3af 8000 	nop.w

080065a0 <pxCurrentTCBConst>:
 80065a0:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop

080065a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	607b      	str	r3, [r7, #4]
}
 80065c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065c2:	f7fe fdcb 	bl	800515c <xTaskIncrementTick>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065cc:	4b06      	ldr	r3, [pc, #24]	@ (80065e8 <xPortSysTickHandler+0x40>)
 80065ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	2300      	movs	r3, #0
 80065d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	f383 8811 	msr	BASEPRI, r3
}
 80065de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006620 <vPortSetupTimerInterrupt+0x34>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006624 <vPortSetupTimerInterrupt+0x38>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006628 <vPortSetupTimerInterrupt+0x3c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a0a      	ldr	r2, [pc, #40]	@ (800662c <vPortSetupTimerInterrupt+0x40>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	099b      	lsrs	r3, r3, #6
 8006608:	4a09      	ldr	r2, [pc, #36]	@ (8006630 <vPortSetupTimerInterrupt+0x44>)
 800660a:	3b01      	subs	r3, #1
 800660c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800660e:	4b04      	ldr	r3, [pc, #16]	@ (8006620 <vPortSetupTimerInterrupt+0x34>)
 8006610:	2207      	movs	r2, #7
 8006612:	601a      	str	r2, [r3, #0]
}
 8006614:	bf00      	nop
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	e000e010 	.word	0xe000e010
 8006624:	e000e018 	.word	0xe000e018
 8006628:	20000000 	.word	0x20000000
 800662c:	10624dd3 	.word	0x10624dd3
 8006630:	e000e014 	.word	0xe000e014

08006634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006644 <vPortEnableVFP+0x10>
 8006638:	6801      	ldr	r1, [r0, #0]
 800663a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800663e:	6001      	str	r1, [r0, #0]
 8006640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006642:	bf00      	nop
 8006644:	e000ed88 	.word	0xe000ed88

08006648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800664e:	f3ef 8305 	mrs	r3, IPSR
 8006652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b0f      	cmp	r3, #15
 8006658:	d915      	bls.n	8006686 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800665a:	4a18      	ldr	r2, [pc, #96]	@ (80066bc <vPortValidateInterruptPriority+0x74>)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006664:	4b16      	ldr	r3, [pc, #88]	@ (80066c0 <vPortValidateInterruptPriority+0x78>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	7afa      	ldrb	r2, [r7, #11]
 800666a:	429a      	cmp	r2, r3
 800666c:	d20b      	bcs.n	8006686 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	607b      	str	r3, [r7, #4]
}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	e7fd      	b.n	8006682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006686:	4b0f      	ldr	r3, [pc, #60]	@ (80066c4 <vPortValidateInterruptPriority+0x7c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800668e:	4b0e      	ldr	r3, [pc, #56]	@ (80066c8 <vPortValidateInterruptPriority+0x80>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d90b      	bls.n	80066ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	603b      	str	r3, [r7, #0]
}
 80066a8:	bf00      	nop
 80066aa:	bf00      	nop
 80066ac:	e7fd      	b.n	80066aa <vPortValidateInterruptPriority+0x62>
	}
 80066ae:	bf00      	nop
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	e000e3f0 	.word	0xe000e3f0
 80066c0:	20000e50 	.word	0x20000e50
 80066c4:	e000ed0c 	.word	0xe000ed0c
 80066c8:	20000e54 	.word	0x20000e54

080066cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08a      	sub	sp, #40	@ 0x28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066d8:	f7fe fc84 	bl	8004fe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006850 <pvPortMalloc+0x184>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066e4:	f000 f924 	bl	8006930 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006854 <pvPortMalloc+0x188>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4013      	ands	r3, r2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f040 8095 	bne.w	8006820 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01e      	beq.n	800673a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80066fc:	2208      	movs	r2, #8
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4413      	add	r3, r2
 8006702:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	2b00      	cmp	r3, #0
 800670c:	d015      	beq.n	800673a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f023 0307 	bic.w	r3, r3, #7
 8006714:	3308      	adds	r3, #8
 8006716:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00b      	beq.n	800673a <pvPortMalloc+0x6e>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	617b      	str	r3, [r7, #20]
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	e7fd      	b.n	8006736 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d06f      	beq.n	8006820 <pvPortMalloc+0x154>
 8006740:	4b45      	ldr	r3, [pc, #276]	@ (8006858 <pvPortMalloc+0x18c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	429a      	cmp	r2, r3
 8006748:	d86a      	bhi.n	8006820 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800674a:	4b44      	ldr	r3, [pc, #272]	@ (800685c <pvPortMalloc+0x190>)
 800674c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800674e:	4b43      	ldr	r3, [pc, #268]	@ (800685c <pvPortMalloc+0x190>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006754:	e004      	b.n	8006760 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	429a      	cmp	r2, r3
 8006768:	d903      	bls.n	8006772 <pvPortMalloc+0xa6>
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f1      	bne.n	8006756 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006772:	4b37      	ldr	r3, [pc, #220]	@ (8006850 <pvPortMalloc+0x184>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006778:	429a      	cmp	r2, r3
 800677a:	d051      	beq.n	8006820 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2208      	movs	r2, #8
 8006782:	4413      	add	r3, r2
 8006784:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	1ad2      	subs	r2, r2, r3
 8006796:	2308      	movs	r3, #8
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	429a      	cmp	r2, r3
 800679c:	d920      	bls.n	80067e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800679e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4413      	add	r3, r2
 80067a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00b      	beq.n	80067c8 <pvPortMalloc+0xfc>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	613b      	str	r3, [r7, #16]
}
 80067c2:	bf00      	nop
 80067c4:	bf00      	nop
 80067c6:	e7fd      	b.n	80067c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	1ad2      	subs	r2, r2, r3
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067da:	69b8      	ldr	r0, [r7, #24]
 80067dc:	f000 f90a 	bl	80069f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006858 <pvPortMalloc+0x18c>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006858 <pvPortMalloc+0x18c>)
 80067ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006858 <pvPortMalloc+0x18c>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006860 <pvPortMalloc+0x194>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d203      	bcs.n	8006802 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067fa:	4b17      	ldr	r3, [pc, #92]	@ (8006858 <pvPortMalloc+0x18c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a18      	ldr	r2, [pc, #96]	@ (8006860 <pvPortMalloc+0x194>)
 8006800:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	4b13      	ldr	r3, [pc, #76]	@ (8006854 <pvPortMalloc+0x188>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	431a      	orrs	r2, r3
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006816:	4b13      	ldr	r3, [pc, #76]	@ (8006864 <pvPortMalloc+0x198>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3301      	adds	r3, #1
 800681c:	4a11      	ldr	r2, [pc, #68]	@ (8006864 <pvPortMalloc+0x198>)
 800681e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006820:	f7fe fbee 	bl	8005000 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00b      	beq.n	8006846 <pvPortMalloc+0x17a>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	60fb      	str	r3, [r7, #12]
}
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	e7fd      	b.n	8006842 <pvPortMalloc+0x176>
	return pvReturn;
 8006846:	69fb      	ldr	r3, [r7, #28]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3728      	adds	r7, #40	@ 0x28
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20001a18 	.word	0x20001a18
 8006854:	20001a2c 	.word	0x20001a2c
 8006858:	20001a1c 	.word	0x20001a1c
 800685c:	20001a10 	.word	0x20001a10
 8006860:	20001a20 	.word	0x20001a20
 8006864:	20001a24 	.word	0x20001a24

08006868 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d04f      	beq.n	800691a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800687a:	2308      	movs	r3, #8
 800687c:	425b      	negs	r3, r3
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4413      	add	r3, r2
 8006882:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	4b25      	ldr	r3, [pc, #148]	@ (8006924 <vPortFree+0xbc>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4013      	ands	r3, r2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10b      	bne.n	80068ae <vPortFree+0x46>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	60fb      	str	r3, [r7, #12]
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	e7fd      	b.n	80068aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <vPortFree+0x66>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	60bb      	str	r3, [r7, #8]
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	e7fd      	b.n	80068ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	4b14      	ldr	r3, [pc, #80]	@ (8006924 <vPortFree+0xbc>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4013      	ands	r3, r2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01e      	beq.n	800691a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d11a      	bne.n	800691a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006924 <vPortFree+0xbc>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	43db      	mvns	r3, r3
 80068ee:	401a      	ands	r2, r3
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068f4:	f7fe fb76 	bl	8004fe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <vPortFree+0xc0>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4413      	add	r3, r2
 8006902:	4a09      	ldr	r2, [pc, #36]	@ (8006928 <vPortFree+0xc0>)
 8006904:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006906:	6938      	ldr	r0, [r7, #16]
 8006908:	f000 f874 	bl	80069f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800690c:	4b07      	ldr	r3, [pc, #28]	@ (800692c <vPortFree+0xc4>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3301      	adds	r3, #1
 8006912:	4a06      	ldr	r2, [pc, #24]	@ (800692c <vPortFree+0xc4>)
 8006914:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006916:	f7fe fb73 	bl	8005000 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800691a:	bf00      	nop
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20001a2c 	.word	0x20001a2c
 8006928:	20001a1c 	.word	0x20001a1c
 800692c:	20001a28 	.word	0x20001a28

08006930 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006936:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800693a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800693c:	4b27      	ldr	r3, [pc, #156]	@ (80069dc <prvHeapInit+0xac>)
 800693e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00c      	beq.n	8006964 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3307      	adds	r3, #7
 800694e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0307 	bic.w	r3, r3, #7
 8006956:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	4a1f      	ldr	r2, [pc, #124]	@ (80069dc <prvHeapInit+0xac>)
 8006960:	4413      	add	r3, r2
 8006962:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006968:	4a1d      	ldr	r2, [pc, #116]	@ (80069e0 <prvHeapInit+0xb0>)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800696e:	4b1c      	ldr	r3, [pc, #112]	@ (80069e0 <prvHeapInit+0xb0>)
 8006970:	2200      	movs	r2, #0
 8006972:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	4413      	add	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800697c:	2208      	movs	r2, #8
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1a9b      	subs	r3, r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0307 	bic.w	r3, r3, #7
 800698a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a15      	ldr	r2, [pc, #84]	@ (80069e4 <prvHeapInit+0xb4>)
 8006990:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006992:	4b14      	ldr	r3, [pc, #80]	@ (80069e4 <prvHeapInit+0xb4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2200      	movs	r2, #0
 8006998:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800699a:	4b12      	ldr	r3, [pc, #72]	@ (80069e4 <prvHeapInit+0xb4>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	1ad2      	subs	r2, r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069b0:	4b0c      	ldr	r3, [pc, #48]	@ (80069e4 <prvHeapInit+0xb4>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	4a0a      	ldr	r2, [pc, #40]	@ (80069e8 <prvHeapInit+0xb8>)
 80069be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	4a09      	ldr	r2, [pc, #36]	@ (80069ec <prvHeapInit+0xbc>)
 80069c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069c8:	4b09      	ldr	r3, [pc, #36]	@ (80069f0 <prvHeapInit+0xc0>)
 80069ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80069ce:	601a      	str	r2, [r3, #0]
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20000e58 	.word	0x20000e58
 80069e0:	20001a10 	.word	0x20001a10
 80069e4:	20001a18 	.word	0x20001a18
 80069e8:	20001a20 	.word	0x20001a20
 80069ec:	20001a1c 	.word	0x20001a1c
 80069f0:	20001a2c 	.word	0x20001a2c

080069f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069fc:	4b28      	ldr	r3, [pc, #160]	@ (8006aa0 <prvInsertBlockIntoFreeList+0xac>)
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	e002      	b.n	8006a08 <prvInsertBlockIntoFreeList+0x14>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d8f7      	bhi.n	8006a02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d108      	bne.n	8006a36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	441a      	add	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	441a      	add	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d118      	bne.n	8006a7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	4b15      	ldr	r3, [pc, #84]	@ (8006aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d00d      	beq.n	8006a72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	441a      	add	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	e008      	b.n	8006a84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a72:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	e003      	b.n	8006a84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d002      	beq.n	8006a92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a92:	bf00      	nop
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	20001a10 	.word	0x20001a10
 8006aa4:	20001a18 	.word	0x20001a18

08006aa8 <std>:
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	4604      	mov	r4, r0
 8006aae:	e9c0 3300 	strd	r3, r3, [r0]
 8006ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ab6:	6083      	str	r3, [r0, #8]
 8006ab8:	8181      	strh	r1, [r0, #12]
 8006aba:	6643      	str	r3, [r0, #100]	@ 0x64
 8006abc:	81c2      	strh	r2, [r0, #14]
 8006abe:	6183      	str	r3, [r0, #24]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	2208      	movs	r2, #8
 8006ac4:	305c      	adds	r0, #92	@ 0x5c
 8006ac6:	f000 f9a8 	bl	8006e1a <memset>
 8006aca:	4b0d      	ldr	r3, [pc, #52]	@ (8006b00 <std+0x58>)
 8006acc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ace:	4b0d      	ldr	r3, [pc, #52]	@ (8006b04 <std+0x5c>)
 8006ad0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b08 <std+0x60>)
 8006ad4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b0c <std+0x64>)
 8006ad8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ada:	4b0d      	ldr	r3, [pc, #52]	@ (8006b10 <std+0x68>)
 8006adc:	6224      	str	r4, [r4, #32]
 8006ade:	429c      	cmp	r4, r3
 8006ae0:	d006      	beq.n	8006af0 <std+0x48>
 8006ae2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ae6:	4294      	cmp	r4, r2
 8006ae8:	d002      	beq.n	8006af0 <std+0x48>
 8006aea:	33d0      	adds	r3, #208	@ 0xd0
 8006aec:	429c      	cmp	r4, r3
 8006aee:	d105      	bne.n	8006afc <std+0x54>
 8006af0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006af8:	f000 ba08 	b.w	8006f0c <__retarget_lock_init_recursive>
 8006afc:	bd10      	pop	{r4, pc}
 8006afe:	bf00      	nop
 8006b00:	08006d95 	.word	0x08006d95
 8006b04:	08006db7 	.word	0x08006db7
 8006b08:	08006def 	.word	0x08006def
 8006b0c:	08006e13 	.word	0x08006e13
 8006b10:	20001a30 	.word	0x20001a30

08006b14 <stdio_exit_handler>:
 8006b14:	4a02      	ldr	r2, [pc, #8]	@ (8006b20 <stdio_exit_handler+0xc>)
 8006b16:	4903      	ldr	r1, [pc, #12]	@ (8006b24 <stdio_exit_handler+0x10>)
 8006b18:	4803      	ldr	r0, [pc, #12]	@ (8006b28 <stdio_exit_handler+0x14>)
 8006b1a:	f000 b869 	b.w	8006bf0 <_fwalk_sglue>
 8006b1e:	bf00      	nop
 8006b20:	20000010 	.word	0x20000010
 8006b24:	08007239 	.word	0x08007239
 8006b28:	20000020 	.word	0x20000020

08006b2c <cleanup_stdio>:
 8006b2c:	6841      	ldr	r1, [r0, #4]
 8006b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b60 <cleanup_stdio+0x34>)
 8006b30:	4299      	cmp	r1, r3
 8006b32:	b510      	push	{r4, lr}
 8006b34:	4604      	mov	r4, r0
 8006b36:	d001      	beq.n	8006b3c <cleanup_stdio+0x10>
 8006b38:	f000 fb7e 	bl	8007238 <_fflush_r>
 8006b3c:	68a1      	ldr	r1, [r4, #8]
 8006b3e:	4b09      	ldr	r3, [pc, #36]	@ (8006b64 <cleanup_stdio+0x38>)
 8006b40:	4299      	cmp	r1, r3
 8006b42:	d002      	beq.n	8006b4a <cleanup_stdio+0x1e>
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 fb77 	bl	8007238 <_fflush_r>
 8006b4a:	68e1      	ldr	r1, [r4, #12]
 8006b4c:	4b06      	ldr	r3, [pc, #24]	@ (8006b68 <cleanup_stdio+0x3c>)
 8006b4e:	4299      	cmp	r1, r3
 8006b50:	d004      	beq.n	8006b5c <cleanup_stdio+0x30>
 8006b52:	4620      	mov	r0, r4
 8006b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b58:	f000 bb6e 	b.w	8007238 <_fflush_r>
 8006b5c:	bd10      	pop	{r4, pc}
 8006b5e:	bf00      	nop
 8006b60:	20001a30 	.word	0x20001a30
 8006b64:	20001a98 	.word	0x20001a98
 8006b68:	20001b00 	.word	0x20001b00

08006b6c <global_stdio_init.part.0>:
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b9c <global_stdio_init.part.0+0x30>)
 8006b70:	4c0b      	ldr	r4, [pc, #44]	@ (8006ba0 <global_stdio_init.part.0+0x34>)
 8006b72:	4a0c      	ldr	r2, [pc, #48]	@ (8006ba4 <global_stdio_init.part.0+0x38>)
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	4620      	mov	r0, r4
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2104      	movs	r1, #4
 8006b7c:	f7ff ff94 	bl	8006aa8 <std>
 8006b80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b84:	2201      	movs	r2, #1
 8006b86:	2109      	movs	r1, #9
 8006b88:	f7ff ff8e 	bl	8006aa8 <std>
 8006b8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b90:	2202      	movs	r2, #2
 8006b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b96:	2112      	movs	r1, #18
 8006b98:	f7ff bf86 	b.w	8006aa8 <std>
 8006b9c:	20001b68 	.word	0x20001b68
 8006ba0:	20001a30 	.word	0x20001a30
 8006ba4:	08006b15 	.word	0x08006b15

08006ba8 <__sfp_lock_acquire>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	@ (8006bb0 <__sfp_lock_acquire+0x8>)
 8006baa:	f000 b9b0 	b.w	8006f0e <__retarget_lock_acquire_recursive>
 8006bae:	bf00      	nop
 8006bb0:	20001b71 	.word	0x20001b71

08006bb4 <__sfp_lock_release>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	@ (8006bbc <__sfp_lock_release+0x8>)
 8006bb6:	f000 b9ab 	b.w	8006f10 <__retarget_lock_release_recursive>
 8006bba:	bf00      	nop
 8006bbc:	20001b71 	.word	0x20001b71

08006bc0 <__sinit>:
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	f7ff fff0 	bl	8006ba8 <__sfp_lock_acquire>
 8006bc8:	6a23      	ldr	r3, [r4, #32]
 8006bca:	b11b      	cbz	r3, 8006bd4 <__sinit+0x14>
 8006bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bd0:	f7ff bff0 	b.w	8006bb4 <__sfp_lock_release>
 8006bd4:	4b04      	ldr	r3, [pc, #16]	@ (8006be8 <__sinit+0x28>)
 8006bd6:	6223      	str	r3, [r4, #32]
 8006bd8:	4b04      	ldr	r3, [pc, #16]	@ (8006bec <__sinit+0x2c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1f5      	bne.n	8006bcc <__sinit+0xc>
 8006be0:	f7ff ffc4 	bl	8006b6c <global_stdio_init.part.0>
 8006be4:	e7f2      	b.n	8006bcc <__sinit+0xc>
 8006be6:	bf00      	nop
 8006be8:	08006b2d 	.word	0x08006b2d
 8006bec:	20001b68 	.word	0x20001b68

08006bf0 <_fwalk_sglue>:
 8006bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	4688      	mov	r8, r1
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	2600      	movs	r6, #0
 8006bfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c00:	f1b9 0901 	subs.w	r9, r9, #1
 8006c04:	d505      	bpl.n	8006c12 <_fwalk_sglue+0x22>
 8006c06:	6824      	ldr	r4, [r4, #0]
 8006c08:	2c00      	cmp	r4, #0
 8006c0a:	d1f7      	bne.n	8006bfc <_fwalk_sglue+0xc>
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c12:	89ab      	ldrh	r3, [r5, #12]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d907      	bls.n	8006c28 <_fwalk_sglue+0x38>
 8006c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	d003      	beq.n	8006c28 <_fwalk_sglue+0x38>
 8006c20:	4629      	mov	r1, r5
 8006c22:	4638      	mov	r0, r7
 8006c24:	47c0      	blx	r8
 8006c26:	4306      	orrs	r6, r0
 8006c28:	3568      	adds	r5, #104	@ 0x68
 8006c2a:	e7e9      	b.n	8006c00 <_fwalk_sglue+0x10>

08006c2c <setvbuf>:
 8006c2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c30:	461d      	mov	r5, r3
 8006c32:	4b57      	ldr	r3, [pc, #348]	@ (8006d90 <setvbuf+0x164>)
 8006c34:	681f      	ldr	r7, [r3, #0]
 8006c36:	4604      	mov	r4, r0
 8006c38:	460e      	mov	r6, r1
 8006c3a:	4690      	mov	r8, r2
 8006c3c:	b127      	cbz	r7, 8006c48 <setvbuf+0x1c>
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	b913      	cbnz	r3, 8006c48 <setvbuf+0x1c>
 8006c42:	4638      	mov	r0, r7
 8006c44:	f7ff ffbc 	bl	8006bc0 <__sinit>
 8006c48:	f1b8 0f02 	cmp.w	r8, #2
 8006c4c:	d006      	beq.n	8006c5c <setvbuf+0x30>
 8006c4e:	f1b8 0f01 	cmp.w	r8, #1
 8006c52:	f200 809a 	bhi.w	8006d8a <setvbuf+0x15e>
 8006c56:	2d00      	cmp	r5, #0
 8006c58:	f2c0 8097 	blt.w	8006d8a <setvbuf+0x15e>
 8006c5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c5e:	07d9      	lsls	r1, r3, #31
 8006c60:	d405      	bmi.n	8006c6e <setvbuf+0x42>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	059a      	lsls	r2, r3, #22
 8006c66:	d402      	bmi.n	8006c6e <setvbuf+0x42>
 8006c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c6a:	f000 f950 	bl	8006f0e <__retarget_lock_acquire_recursive>
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4638      	mov	r0, r7
 8006c72:	f000 fae1 	bl	8007238 <_fflush_r>
 8006c76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c78:	b141      	cbz	r1, 8006c8c <setvbuf+0x60>
 8006c7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c7e:	4299      	cmp	r1, r3
 8006c80:	d002      	beq.n	8006c88 <setvbuf+0x5c>
 8006c82:	4638      	mov	r0, r7
 8006c84:	f000 f954 	bl	8006f30 <_free_r>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61a3      	str	r3, [r4, #24]
 8006c90:	6063      	str	r3, [r4, #4]
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	061b      	lsls	r3, r3, #24
 8006c96:	d503      	bpl.n	8006ca0 <setvbuf+0x74>
 8006c98:	6921      	ldr	r1, [r4, #16]
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	f000 f948 	bl	8006f30 <_free_r>
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8006ca6:	f023 0303 	bic.w	r3, r3, #3
 8006caa:	f1b8 0f02 	cmp.w	r8, #2
 8006cae:	81a3      	strh	r3, [r4, #12]
 8006cb0:	d061      	beq.n	8006d76 <setvbuf+0x14a>
 8006cb2:	ab01      	add	r3, sp, #4
 8006cb4:	466a      	mov	r2, sp
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f000 fae5 	bl	8007288 <__swhatbuf_r>
 8006cbe:	89a3      	ldrh	r3, [r4, #12]
 8006cc0:	4318      	orrs	r0, r3
 8006cc2:	81a0      	strh	r0, [r4, #12]
 8006cc4:	bb2d      	cbnz	r5, 8006d12 <setvbuf+0xe6>
 8006cc6:	9d00      	ldr	r5, [sp, #0]
 8006cc8:	4628      	mov	r0, r5
 8006cca:	f000 f97b 	bl	8006fc4 <malloc>
 8006cce:	4606      	mov	r6, r0
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d152      	bne.n	8006d7a <setvbuf+0x14e>
 8006cd4:	f8dd 9000 	ldr.w	r9, [sp]
 8006cd8:	45a9      	cmp	r9, r5
 8006cda:	d140      	bne.n	8006d5e <setvbuf+0x132>
 8006cdc:	f04f 35ff 	mov.w	r5, #4294967295
 8006ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce4:	f043 0202 	orr.w	r2, r3, #2
 8006ce8:	81a2      	strh	r2, [r4, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	60a2      	str	r2, [r4, #8]
 8006cee:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8006cf2:	6022      	str	r2, [r4, #0]
 8006cf4:	6122      	str	r2, [r4, #16]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	6162      	str	r2, [r4, #20]
 8006cfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006cfc:	07d6      	lsls	r6, r2, #31
 8006cfe:	d404      	bmi.n	8006d0a <setvbuf+0xde>
 8006d00:	0598      	lsls	r0, r3, #22
 8006d02:	d402      	bmi.n	8006d0a <setvbuf+0xde>
 8006d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d06:	f000 f903 	bl	8006f10 <__retarget_lock_release_recursive>
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	b003      	add	sp, #12
 8006d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d12:	2e00      	cmp	r6, #0
 8006d14:	d0d8      	beq.n	8006cc8 <setvbuf+0x9c>
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	b913      	cbnz	r3, 8006d20 <setvbuf+0xf4>
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	f7ff ff50 	bl	8006bc0 <__sinit>
 8006d20:	f1b8 0f01 	cmp.w	r8, #1
 8006d24:	bf08      	it	eq
 8006d26:	89a3      	ldrheq	r3, [r4, #12]
 8006d28:	6026      	str	r6, [r4, #0]
 8006d2a:	bf04      	itt	eq
 8006d2c:	f043 0301 	orreq.w	r3, r3, #1
 8006d30:	81a3      	strheq	r3, [r4, #12]
 8006d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d36:	f013 0208 	ands.w	r2, r3, #8
 8006d3a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006d3e:	d01e      	beq.n	8006d7e <setvbuf+0x152>
 8006d40:	07d9      	lsls	r1, r3, #31
 8006d42:	bf41      	itttt	mi
 8006d44:	2200      	movmi	r2, #0
 8006d46:	426d      	negmi	r5, r5
 8006d48:	60a2      	strmi	r2, [r4, #8]
 8006d4a:	61a5      	strmi	r5, [r4, #24]
 8006d4c:	bf58      	it	pl
 8006d4e:	60a5      	strpl	r5, [r4, #8]
 8006d50:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d52:	07d2      	lsls	r2, r2, #31
 8006d54:	d401      	bmi.n	8006d5a <setvbuf+0x12e>
 8006d56:	059b      	lsls	r3, r3, #22
 8006d58:	d513      	bpl.n	8006d82 <setvbuf+0x156>
 8006d5a:	2500      	movs	r5, #0
 8006d5c:	e7d5      	b.n	8006d0a <setvbuf+0xde>
 8006d5e:	4648      	mov	r0, r9
 8006d60:	f000 f930 	bl	8006fc4 <malloc>
 8006d64:	4606      	mov	r6, r0
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d0b8      	beq.n	8006cdc <setvbuf+0xb0>
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d70:	81a3      	strh	r3, [r4, #12]
 8006d72:	464d      	mov	r5, r9
 8006d74:	e7cf      	b.n	8006d16 <setvbuf+0xea>
 8006d76:	2500      	movs	r5, #0
 8006d78:	e7b2      	b.n	8006ce0 <setvbuf+0xb4>
 8006d7a:	46a9      	mov	r9, r5
 8006d7c:	e7f5      	b.n	8006d6a <setvbuf+0x13e>
 8006d7e:	60a2      	str	r2, [r4, #8]
 8006d80:	e7e6      	b.n	8006d50 <setvbuf+0x124>
 8006d82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d84:	f000 f8c4 	bl	8006f10 <__retarget_lock_release_recursive>
 8006d88:	e7e7      	b.n	8006d5a <setvbuf+0x12e>
 8006d8a:	f04f 35ff 	mov.w	r5, #4294967295
 8006d8e:	e7bc      	b.n	8006d0a <setvbuf+0xde>
 8006d90:	2000001c 	.word	0x2000001c

08006d94 <__sread>:
 8006d94:	b510      	push	{r4, lr}
 8006d96:	460c      	mov	r4, r1
 8006d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d9c:	f000 f868 	bl	8006e70 <_read_r>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	bfab      	itete	ge
 8006da4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006da6:	89a3      	ldrhlt	r3, [r4, #12]
 8006da8:	181b      	addge	r3, r3, r0
 8006daa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006dae:	bfac      	ite	ge
 8006db0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006db2:	81a3      	strhlt	r3, [r4, #12]
 8006db4:	bd10      	pop	{r4, pc}

08006db6 <__swrite>:
 8006db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dba:	461f      	mov	r7, r3
 8006dbc:	898b      	ldrh	r3, [r1, #12]
 8006dbe:	05db      	lsls	r3, r3, #23
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	4616      	mov	r6, r2
 8006dc6:	d505      	bpl.n	8006dd4 <__swrite+0x1e>
 8006dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dcc:	2302      	movs	r3, #2
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f000 f83c 	bl	8006e4c <_lseek_r>
 8006dd4:	89a3      	ldrh	r3, [r4, #12]
 8006dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dde:	81a3      	strh	r3, [r4, #12]
 8006de0:	4632      	mov	r2, r6
 8006de2:	463b      	mov	r3, r7
 8006de4:	4628      	mov	r0, r5
 8006de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dea:	f000 b853 	b.w	8006e94 <_write_r>

08006dee <__sseek>:
 8006dee:	b510      	push	{r4, lr}
 8006df0:	460c      	mov	r4, r1
 8006df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df6:	f000 f829 	bl	8006e4c <_lseek_r>
 8006dfa:	1c43      	adds	r3, r0, #1
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	bf15      	itete	ne
 8006e00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e0a:	81a3      	strheq	r3, [r4, #12]
 8006e0c:	bf18      	it	ne
 8006e0e:	81a3      	strhne	r3, [r4, #12]
 8006e10:	bd10      	pop	{r4, pc}

08006e12 <__sclose>:
 8006e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e16:	f000 b809 	b.w	8006e2c <_close_r>

08006e1a <memset>:
 8006e1a:	4402      	add	r2, r0
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d100      	bne.n	8006e24 <memset+0xa>
 8006e22:	4770      	bx	lr
 8006e24:	f803 1b01 	strb.w	r1, [r3], #1
 8006e28:	e7f9      	b.n	8006e1e <memset+0x4>
	...

08006e2c <_close_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4d06      	ldr	r5, [pc, #24]	@ (8006e48 <_close_r+0x1c>)
 8006e30:	2300      	movs	r3, #0
 8006e32:	4604      	mov	r4, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	602b      	str	r3, [r5, #0]
 8006e38:	f7f9 fcd8 	bl	80007ec <_close>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_close_r+0x1a>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_close_r+0x1a>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	20001b6c 	.word	0x20001b6c

08006e4c <_lseek_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4d07      	ldr	r5, [pc, #28]	@ (8006e6c <_lseek_r+0x20>)
 8006e50:	4604      	mov	r4, r0
 8006e52:	4608      	mov	r0, r1
 8006e54:	4611      	mov	r1, r2
 8006e56:	2200      	movs	r2, #0
 8006e58:	602a      	str	r2, [r5, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f7f9 fdce 	bl	80009fc <_lseek>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_lseek_r+0x1e>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_lseek_r+0x1e>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	20001b6c 	.word	0x20001b6c

08006e70 <_read_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4d07      	ldr	r5, [pc, #28]	@ (8006e90 <_read_r+0x20>)
 8006e74:	4604      	mov	r4, r0
 8006e76:	4608      	mov	r0, r1
 8006e78:	4611      	mov	r1, r2
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	602a      	str	r2, [r5, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f7f9 fccc 	bl	800081c <_read>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	d102      	bne.n	8006e8e <_read_r+0x1e>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	b103      	cbz	r3, 8006e8e <_read_r+0x1e>
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	20001b6c 	.word	0x20001b6c

08006e94 <_write_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4d07      	ldr	r5, [pc, #28]	@ (8006eb4 <_write_r+0x20>)
 8006e98:	4604      	mov	r4, r0
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	602a      	str	r2, [r5, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f7f9 fc76 	bl	8000794 <_write>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_write_r+0x1e>
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_write_r+0x1e>
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	20001b6c 	.word	0x20001b6c

08006eb8 <__errno>:
 8006eb8:	4b01      	ldr	r3, [pc, #4]	@ (8006ec0 <__errno+0x8>)
 8006eba:	6818      	ldr	r0, [r3, #0]
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	2000001c 	.word	0x2000001c

08006ec4 <__libc_init_array>:
 8006ec4:	b570      	push	{r4, r5, r6, lr}
 8006ec6:	4d0d      	ldr	r5, [pc, #52]	@ (8006efc <__libc_init_array+0x38>)
 8006ec8:	4c0d      	ldr	r4, [pc, #52]	@ (8006f00 <__libc_init_array+0x3c>)
 8006eca:	1b64      	subs	r4, r4, r5
 8006ecc:	10a4      	asrs	r4, r4, #2
 8006ece:	2600      	movs	r6, #0
 8006ed0:	42a6      	cmp	r6, r4
 8006ed2:	d109      	bne.n	8006ee8 <__libc_init_array+0x24>
 8006ed4:	4d0b      	ldr	r5, [pc, #44]	@ (8006f04 <__libc_init_array+0x40>)
 8006ed6:	4c0c      	ldr	r4, [pc, #48]	@ (8006f08 <__libc_init_array+0x44>)
 8006ed8:	f000 fa1e 	bl	8007318 <_init>
 8006edc:	1b64      	subs	r4, r4, r5
 8006ede:	10a4      	asrs	r4, r4, #2
 8006ee0:	2600      	movs	r6, #0
 8006ee2:	42a6      	cmp	r6, r4
 8006ee4:	d105      	bne.n	8006ef2 <__libc_init_array+0x2e>
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
 8006ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eec:	4798      	blx	r3
 8006eee:	3601      	adds	r6, #1
 8006ef0:	e7ee      	b.n	8006ed0 <__libc_init_array+0xc>
 8006ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef6:	4798      	blx	r3
 8006ef8:	3601      	adds	r6, #1
 8006efa:	e7f2      	b.n	8006ee2 <__libc_init_array+0x1e>
 8006efc:	08007398 	.word	0x08007398
 8006f00:	08007398 	.word	0x08007398
 8006f04:	08007398 	.word	0x08007398
 8006f08:	0800739c 	.word	0x0800739c

08006f0c <__retarget_lock_init_recursive>:
 8006f0c:	4770      	bx	lr

08006f0e <__retarget_lock_acquire_recursive>:
 8006f0e:	4770      	bx	lr

08006f10 <__retarget_lock_release_recursive>:
 8006f10:	4770      	bx	lr

08006f12 <memcpy>:
 8006f12:	440a      	add	r2, r1
 8006f14:	4291      	cmp	r1, r2
 8006f16:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f1a:	d100      	bne.n	8006f1e <memcpy+0xc>
 8006f1c:	4770      	bx	lr
 8006f1e:	b510      	push	{r4, lr}
 8006f20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f28:	4291      	cmp	r1, r2
 8006f2a:	d1f9      	bne.n	8006f20 <memcpy+0xe>
 8006f2c:	bd10      	pop	{r4, pc}
	...

08006f30 <_free_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4605      	mov	r5, r0
 8006f34:	2900      	cmp	r1, #0
 8006f36:	d041      	beq.n	8006fbc <_free_r+0x8c>
 8006f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f3c:	1f0c      	subs	r4, r1, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	bfb8      	it	lt
 8006f42:	18e4      	addlt	r4, r4, r3
 8006f44:	f000 f8e8 	bl	8007118 <__malloc_lock>
 8006f48:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc0 <_free_r+0x90>)
 8006f4a:	6813      	ldr	r3, [r2, #0]
 8006f4c:	b933      	cbnz	r3, 8006f5c <_free_r+0x2c>
 8006f4e:	6063      	str	r3, [r4, #4]
 8006f50:	6014      	str	r4, [r2, #0]
 8006f52:	4628      	mov	r0, r5
 8006f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f58:	f000 b8e4 	b.w	8007124 <__malloc_unlock>
 8006f5c:	42a3      	cmp	r3, r4
 8006f5e:	d908      	bls.n	8006f72 <_free_r+0x42>
 8006f60:	6820      	ldr	r0, [r4, #0]
 8006f62:	1821      	adds	r1, r4, r0
 8006f64:	428b      	cmp	r3, r1
 8006f66:	bf01      	itttt	eq
 8006f68:	6819      	ldreq	r1, [r3, #0]
 8006f6a:	685b      	ldreq	r3, [r3, #4]
 8006f6c:	1809      	addeq	r1, r1, r0
 8006f6e:	6021      	streq	r1, [r4, #0]
 8006f70:	e7ed      	b.n	8006f4e <_free_r+0x1e>
 8006f72:	461a      	mov	r2, r3
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	b10b      	cbz	r3, 8006f7c <_free_r+0x4c>
 8006f78:	42a3      	cmp	r3, r4
 8006f7a:	d9fa      	bls.n	8006f72 <_free_r+0x42>
 8006f7c:	6811      	ldr	r1, [r2, #0]
 8006f7e:	1850      	adds	r0, r2, r1
 8006f80:	42a0      	cmp	r0, r4
 8006f82:	d10b      	bne.n	8006f9c <_free_r+0x6c>
 8006f84:	6820      	ldr	r0, [r4, #0]
 8006f86:	4401      	add	r1, r0
 8006f88:	1850      	adds	r0, r2, r1
 8006f8a:	4283      	cmp	r3, r0
 8006f8c:	6011      	str	r1, [r2, #0]
 8006f8e:	d1e0      	bne.n	8006f52 <_free_r+0x22>
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	6053      	str	r3, [r2, #4]
 8006f96:	4408      	add	r0, r1
 8006f98:	6010      	str	r0, [r2, #0]
 8006f9a:	e7da      	b.n	8006f52 <_free_r+0x22>
 8006f9c:	d902      	bls.n	8006fa4 <_free_r+0x74>
 8006f9e:	230c      	movs	r3, #12
 8006fa0:	602b      	str	r3, [r5, #0]
 8006fa2:	e7d6      	b.n	8006f52 <_free_r+0x22>
 8006fa4:	6820      	ldr	r0, [r4, #0]
 8006fa6:	1821      	adds	r1, r4, r0
 8006fa8:	428b      	cmp	r3, r1
 8006faa:	bf04      	itt	eq
 8006fac:	6819      	ldreq	r1, [r3, #0]
 8006fae:	685b      	ldreq	r3, [r3, #4]
 8006fb0:	6063      	str	r3, [r4, #4]
 8006fb2:	bf04      	itt	eq
 8006fb4:	1809      	addeq	r1, r1, r0
 8006fb6:	6021      	streq	r1, [r4, #0]
 8006fb8:	6054      	str	r4, [r2, #4]
 8006fba:	e7ca      	b.n	8006f52 <_free_r+0x22>
 8006fbc:	bd38      	pop	{r3, r4, r5, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20001b78 	.word	0x20001b78

08006fc4 <malloc>:
 8006fc4:	4b02      	ldr	r3, [pc, #8]	@ (8006fd0 <malloc+0xc>)
 8006fc6:	4601      	mov	r1, r0
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	f000 b825 	b.w	8007018 <_malloc_r>
 8006fce:	bf00      	nop
 8006fd0:	2000001c 	.word	0x2000001c

08006fd4 <sbrk_aligned>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	4e0f      	ldr	r6, [pc, #60]	@ (8007014 <sbrk_aligned+0x40>)
 8006fd8:	460c      	mov	r4, r1
 8006fda:	6831      	ldr	r1, [r6, #0]
 8006fdc:	4605      	mov	r5, r0
 8006fde:	b911      	cbnz	r1, 8006fe6 <sbrk_aligned+0x12>
 8006fe0:	f000 f98a 	bl	80072f8 <_sbrk_r>
 8006fe4:	6030      	str	r0, [r6, #0]
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f000 f985 	bl	80072f8 <_sbrk_r>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	d103      	bne.n	8006ffa <sbrk_aligned+0x26>
 8006ff2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	bd70      	pop	{r4, r5, r6, pc}
 8006ffa:	1cc4      	adds	r4, r0, #3
 8006ffc:	f024 0403 	bic.w	r4, r4, #3
 8007000:	42a0      	cmp	r0, r4
 8007002:	d0f8      	beq.n	8006ff6 <sbrk_aligned+0x22>
 8007004:	1a21      	subs	r1, r4, r0
 8007006:	4628      	mov	r0, r5
 8007008:	f000 f976 	bl	80072f8 <_sbrk_r>
 800700c:	3001      	adds	r0, #1
 800700e:	d1f2      	bne.n	8006ff6 <sbrk_aligned+0x22>
 8007010:	e7ef      	b.n	8006ff2 <sbrk_aligned+0x1e>
 8007012:	bf00      	nop
 8007014:	20001b74 	.word	0x20001b74

08007018 <_malloc_r>:
 8007018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800701c:	1ccd      	adds	r5, r1, #3
 800701e:	f025 0503 	bic.w	r5, r5, #3
 8007022:	3508      	adds	r5, #8
 8007024:	2d0c      	cmp	r5, #12
 8007026:	bf38      	it	cc
 8007028:	250c      	movcc	r5, #12
 800702a:	2d00      	cmp	r5, #0
 800702c:	4606      	mov	r6, r0
 800702e:	db01      	blt.n	8007034 <_malloc_r+0x1c>
 8007030:	42a9      	cmp	r1, r5
 8007032:	d904      	bls.n	800703e <_malloc_r+0x26>
 8007034:	230c      	movs	r3, #12
 8007036:	6033      	str	r3, [r6, #0]
 8007038:	2000      	movs	r0, #0
 800703a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800703e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007114 <_malloc_r+0xfc>
 8007042:	f000 f869 	bl	8007118 <__malloc_lock>
 8007046:	f8d8 3000 	ldr.w	r3, [r8]
 800704a:	461c      	mov	r4, r3
 800704c:	bb44      	cbnz	r4, 80070a0 <_malloc_r+0x88>
 800704e:	4629      	mov	r1, r5
 8007050:	4630      	mov	r0, r6
 8007052:	f7ff ffbf 	bl	8006fd4 <sbrk_aligned>
 8007056:	1c43      	adds	r3, r0, #1
 8007058:	4604      	mov	r4, r0
 800705a:	d158      	bne.n	800710e <_malloc_r+0xf6>
 800705c:	f8d8 4000 	ldr.w	r4, [r8]
 8007060:	4627      	mov	r7, r4
 8007062:	2f00      	cmp	r7, #0
 8007064:	d143      	bne.n	80070ee <_malloc_r+0xd6>
 8007066:	2c00      	cmp	r4, #0
 8007068:	d04b      	beq.n	8007102 <_malloc_r+0xea>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	4639      	mov	r1, r7
 800706e:	4630      	mov	r0, r6
 8007070:	eb04 0903 	add.w	r9, r4, r3
 8007074:	f000 f940 	bl	80072f8 <_sbrk_r>
 8007078:	4581      	cmp	r9, r0
 800707a:	d142      	bne.n	8007102 <_malloc_r+0xea>
 800707c:	6821      	ldr	r1, [r4, #0]
 800707e:	1a6d      	subs	r5, r5, r1
 8007080:	4629      	mov	r1, r5
 8007082:	4630      	mov	r0, r6
 8007084:	f7ff ffa6 	bl	8006fd4 <sbrk_aligned>
 8007088:	3001      	adds	r0, #1
 800708a:	d03a      	beq.n	8007102 <_malloc_r+0xea>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	442b      	add	r3, r5
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	f8d8 3000 	ldr.w	r3, [r8]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	bb62      	cbnz	r2, 80070f4 <_malloc_r+0xdc>
 800709a:	f8c8 7000 	str.w	r7, [r8]
 800709e:	e00f      	b.n	80070c0 <_malloc_r+0xa8>
 80070a0:	6822      	ldr	r2, [r4, #0]
 80070a2:	1b52      	subs	r2, r2, r5
 80070a4:	d420      	bmi.n	80070e8 <_malloc_r+0xd0>
 80070a6:	2a0b      	cmp	r2, #11
 80070a8:	d917      	bls.n	80070da <_malloc_r+0xc2>
 80070aa:	1961      	adds	r1, r4, r5
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	6025      	str	r5, [r4, #0]
 80070b0:	bf18      	it	ne
 80070b2:	6059      	strne	r1, [r3, #4]
 80070b4:	6863      	ldr	r3, [r4, #4]
 80070b6:	bf08      	it	eq
 80070b8:	f8c8 1000 	streq.w	r1, [r8]
 80070bc:	5162      	str	r2, [r4, r5]
 80070be:	604b      	str	r3, [r1, #4]
 80070c0:	4630      	mov	r0, r6
 80070c2:	f000 f82f 	bl	8007124 <__malloc_unlock>
 80070c6:	f104 000b 	add.w	r0, r4, #11
 80070ca:	1d23      	adds	r3, r4, #4
 80070cc:	f020 0007 	bic.w	r0, r0, #7
 80070d0:	1ac2      	subs	r2, r0, r3
 80070d2:	bf1c      	itt	ne
 80070d4:	1a1b      	subne	r3, r3, r0
 80070d6:	50a3      	strne	r3, [r4, r2]
 80070d8:	e7af      	b.n	800703a <_malloc_r+0x22>
 80070da:	6862      	ldr	r2, [r4, #4]
 80070dc:	42a3      	cmp	r3, r4
 80070de:	bf0c      	ite	eq
 80070e0:	f8c8 2000 	streq.w	r2, [r8]
 80070e4:	605a      	strne	r2, [r3, #4]
 80070e6:	e7eb      	b.n	80070c0 <_malloc_r+0xa8>
 80070e8:	4623      	mov	r3, r4
 80070ea:	6864      	ldr	r4, [r4, #4]
 80070ec:	e7ae      	b.n	800704c <_malloc_r+0x34>
 80070ee:	463c      	mov	r4, r7
 80070f0:	687f      	ldr	r7, [r7, #4]
 80070f2:	e7b6      	b.n	8007062 <_malloc_r+0x4a>
 80070f4:	461a      	mov	r2, r3
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	42a3      	cmp	r3, r4
 80070fa:	d1fb      	bne.n	80070f4 <_malloc_r+0xdc>
 80070fc:	2300      	movs	r3, #0
 80070fe:	6053      	str	r3, [r2, #4]
 8007100:	e7de      	b.n	80070c0 <_malloc_r+0xa8>
 8007102:	230c      	movs	r3, #12
 8007104:	6033      	str	r3, [r6, #0]
 8007106:	4630      	mov	r0, r6
 8007108:	f000 f80c 	bl	8007124 <__malloc_unlock>
 800710c:	e794      	b.n	8007038 <_malloc_r+0x20>
 800710e:	6005      	str	r5, [r0, #0]
 8007110:	e7d6      	b.n	80070c0 <_malloc_r+0xa8>
 8007112:	bf00      	nop
 8007114:	20001b78 	.word	0x20001b78

08007118 <__malloc_lock>:
 8007118:	4801      	ldr	r0, [pc, #4]	@ (8007120 <__malloc_lock+0x8>)
 800711a:	f7ff bef8 	b.w	8006f0e <__retarget_lock_acquire_recursive>
 800711e:	bf00      	nop
 8007120:	20001b70 	.word	0x20001b70

08007124 <__malloc_unlock>:
 8007124:	4801      	ldr	r0, [pc, #4]	@ (800712c <__malloc_unlock+0x8>)
 8007126:	f7ff bef3 	b.w	8006f10 <__retarget_lock_release_recursive>
 800712a:	bf00      	nop
 800712c:	20001b70 	.word	0x20001b70

08007130 <__sflush_r>:
 8007130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007138:	0716      	lsls	r6, r2, #28
 800713a:	4605      	mov	r5, r0
 800713c:	460c      	mov	r4, r1
 800713e:	d454      	bmi.n	80071ea <__sflush_r+0xba>
 8007140:	684b      	ldr	r3, [r1, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	dc02      	bgt.n	800714c <__sflush_r+0x1c>
 8007146:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	dd48      	ble.n	80071de <__sflush_r+0xae>
 800714c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800714e:	2e00      	cmp	r6, #0
 8007150:	d045      	beq.n	80071de <__sflush_r+0xae>
 8007152:	2300      	movs	r3, #0
 8007154:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007158:	682f      	ldr	r7, [r5, #0]
 800715a:	6a21      	ldr	r1, [r4, #32]
 800715c:	602b      	str	r3, [r5, #0]
 800715e:	d030      	beq.n	80071c2 <__sflush_r+0x92>
 8007160:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	0759      	lsls	r1, r3, #29
 8007166:	d505      	bpl.n	8007174 <__sflush_r+0x44>
 8007168:	6863      	ldr	r3, [r4, #4]
 800716a:	1ad2      	subs	r2, r2, r3
 800716c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800716e:	b10b      	cbz	r3, 8007174 <__sflush_r+0x44>
 8007170:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007172:	1ad2      	subs	r2, r2, r3
 8007174:	2300      	movs	r3, #0
 8007176:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007178:	6a21      	ldr	r1, [r4, #32]
 800717a:	4628      	mov	r0, r5
 800717c:	47b0      	blx	r6
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	d106      	bne.n	8007192 <__sflush_r+0x62>
 8007184:	6829      	ldr	r1, [r5, #0]
 8007186:	291d      	cmp	r1, #29
 8007188:	d82b      	bhi.n	80071e2 <__sflush_r+0xb2>
 800718a:	4a2a      	ldr	r2, [pc, #168]	@ (8007234 <__sflush_r+0x104>)
 800718c:	410a      	asrs	r2, r1
 800718e:	07d6      	lsls	r6, r2, #31
 8007190:	d427      	bmi.n	80071e2 <__sflush_r+0xb2>
 8007192:	2200      	movs	r2, #0
 8007194:	6062      	str	r2, [r4, #4]
 8007196:	04d9      	lsls	r1, r3, #19
 8007198:	6922      	ldr	r2, [r4, #16]
 800719a:	6022      	str	r2, [r4, #0]
 800719c:	d504      	bpl.n	80071a8 <__sflush_r+0x78>
 800719e:	1c42      	adds	r2, r0, #1
 80071a0:	d101      	bne.n	80071a6 <__sflush_r+0x76>
 80071a2:	682b      	ldr	r3, [r5, #0]
 80071a4:	b903      	cbnz	r3, 80071a8 <__sflush_r+0x78>
 80071a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80071a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071aa:	602f      	str	r7, [r5, #0]
 80071ac:	b1b9      	cbz	r1, 80071de <__sflush_r+0xae>
 80071ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071b2:	4299      	cmp	r1, r3
 80071b4:	d002      	beq.n	80071bc <__sflush_r+0x8c>
 80071b6:	4628      	mov	r0, r5
 80071b8:	f7ff feba 	bl	8006f30 <_free_r>
 80071bc:	2300      	movs	r3, #0
 80071be:	6363      	str	r3, [r4, #52]	@ 0x34
 80071c0:	e00d      	b.n	80071de <__sflush_r+0xae>
 80071c2:	2301      	movs	r3, #1
 80071c4:	4628      	mov	r0, r5
 80071c6:	47b0      	blx	r6
 80071c8:	4602      	mov	r2, r0
 80071ca:	1c50      	adds	r0, r2, #1
 80071cc:	d1c9      	bne.n	8007162 <__sflush_r+0x32>
 80071ce:	682b      	ldr	r3, [r5, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0c6      	beq.n	8007162 <__sflush_r+0x32>
 80071d4:	2b1d      	cmp	r3, #29
 80071d6:	d001      	beq.n	80071dc <__sflush_r+0xac>
 80071d8:	2b16      	cmp	r3, #22
 80071da:	d11e      	bne.n	800721a <__sflush_r+0xea>
 80071dc:	602f      	str	r7, [r5, #0]
 80071de:	2000      	movs	r0, #0
 80071e0:	e022      	b.n	8007228 <__sflush_r+0xf8>
 80071e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071e6:	b21b      	sxth	r3, r3
 80071e8:	e01b      	b.n	8007222 <__sflush_r+0xf2>
 80071ea:	690f      	ldr	r7, [r1, #16]
 80071ec:	2f00      	cmp	r7, #0
 80071ee:	d0f6      	beq.n	80071de <__sflush_r+0xae>
 80071f0:	0793      	lsls	r3, r2, #30
 80071f2:	680e      	ldr	r6, [r1, #0]
 80071f4:	bf08      	it	eq
 80071f6:	694b      	ldreq	r3, [r1, #20]
 80071f8:	600f      	str	r7, [r1, #0]
 80071fa:	bf18      	it	ne
 80071fc:	2300      	movne	r3, #0
 80071fe:	eba6 0807 	sub.w	r8, r6, r7
 8007202:	608b      	str	r3, [r1, #8]
 8007204:	f1b8 0f00 	cmp.w	r8, #0
 8007208:	dde9      	ble.n	80071de <__sflush_r+0xae>
 800720a:	6a21      	ldr	r1, [r4, #32]
 800720c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800720e:	4643      	mov	r3, r8
 8007210:	463a      	mov	r2, r7
 8007212:	4628      	mov	r0, r5
 8007214:	47b0      	blx	r6
 8007216:	2800      	cmp	r0, #0
 8007218:	dc08      	bgt.n	800722c <__sflush_r+0xfc>
 800721a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800721e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800722c:	4407      	add	r7, r0
 800722e:	eba8 0800 	sub.w	r8, r8, r0
 8007232:	e7e7      	b.n	8007204 <__sflush_r+0xd4>
 8007234:	dfbffffe 	.word	0xdfbffffe

08007238 <_fflush_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	690b      	ldr	r3, [r1, #16]
 800723c:	4605      	mov	r5, r0
 800723e:	460c      	mov	r4, r1
 8007240:	b913      	cbnz	r3, 8007248 <_fflush_r+0x10>
 8007242:	2500      	movs	r5, #0
 8007244:	4628      	mov	r0, r5
 8007246:	bd38      	pop	{r3, r4, r5, pc}
 8007248:	b118      	cbz	r0, 8007252 <_fflush_r+0x1a>
 800724a:	6a03      	ldr	r3, [r0, #32]
 800724c:	b90b      	cbnz	r3, 8007252 <_fflush_r+0x1a>
 800724e:	f7ff fcb7 	bl	8006bc0 <__sinit>
 8007252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0f3      	beq.n	8007242 <_fflush_r+0xa>
 800725a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800725c:	07d0      	lsls	r0, r2, #31
 800725e:	d404      	bmi.n	800726a <_fflush_r+0x32>
 8007260:	0599      	lsls	r1, r3, #22
 8007262:	d402      	bmi.n	800726a <_fflush_r+0x32>
 8007264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007266:	f7ff fe52 	bl	8006f0e <__retarget_lock_acquire_recursive>
 800726a:	4628      	mov	r0, r5
 800726c:	4621      	mov	r1, r4
 800726e:	f7ff ff5f 	bl	8007130 <__sflush_r>
 8007272:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007274:	07da      	lsls	r2, r3, #31
 8007276:	4605      	mov	r5, r0
 8007278:	d4e4      	bmi.n	8007244 <_fflush_r+0xc>
 800727a:	89a3      	ldrh	r3, [r4, #12]
 800727c:	059b      	lsls	r3, r3, #22
 800727e:	d4e1      	bmi.n	8007244 <_fflush_r+0xc>
 8007280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007282:	f7ff fe45 	bl	8006f10 <__retarget_lock_release_recursive>
 8007286:	e7dd      	b.n	8007244 <_fflush_r+0xc>

08007288 <__swhatbuf_r>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	460c      	mov	r4, r1
 800728c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007290:	2900      	cmp	r1, #0
 8007292:	b096      	sub	sp, #88	@ 0x58
 8007294:	4615      	mov	r5, r2
 8007296:	461e      	mov	r6, r3
 8007298:	da0d      	bge.n	80072b6 <__swhatbuf_r+0x2e>
 800729a:	89a3      	ldrh	r3, [r4, #12]
 800729c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072a0:	f04f 0100 	mov.w	r1, #0
 80072a4:	bf14      	ite	ne
 80072a6:	2340      	movne	r3, #64	@ 0x40
 80072a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072ac:	2000      	movs	r0, #0
 80072ae:	6031      	str	r1, [r6, #0]
 80072b0:	602b      	str	r3, [r5, #0]
 80072b2:	b016      	add	sp, #88	@ 0x58
 80072b4:	bd70      	pop	{r4, r5, r6, pc}
 80072b6:	466a      	mov	r2, sp
 80072b8:	f000 f80c 	bl	80072d4 <_fstat_r>
 80072bc:	2800      	cmp	r0, #0
 80072be:	dbec      	blt.n	800729a <__swhatbuf_r+0x12>
 80072c0:	9901      	ldr	r1, [sp, #4]
 80072c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80072ca:	4259      	negs	r1, r3
 80072cc:	4159      	adcs	r1, r3
 80072ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072d2:	e7eb      	b.n	80072ac <__swhatbuf_r+0x24>

080072d4 <_fstat_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4d07      	ldr	r5, [pc, #28]	@ (80072f4 <_fstat_r+0x20>)
 80072d8:	2300      	movs	r3, #0
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	4611      	mov	r1, r2
 80072e0:	602b      	str	r3, [r5, #0]
 80072e2:	f7f9 fac3 	bl	800086c <_fstat>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d102      	bne.n	80072f0 <_fstat_r+0x1c>
 80072ea:	682b      	ldr	r3, [r5, #0]
 80072ec:	b103      	cbz	r3, 80072f0 <_fstat_r+0x1c>
 80072ee:	6023      	str	r3, [r4, #0]
 80072f0:	bd38      	pop	{r3, r4, r5, pc}
 80072f2:	bf00      	nop
 80072f4:	20001b6c 	.word	0x20001b6c

080072f8 <_sbrk_r>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4d06      	ldr	r5, [pc, #24]	@ (8007314 <_sbrk_r+0x1c>)
 80072fc:	2300      	movs	r3, #0
 80072fe:	4604      	mov	r4, r0
 8007300:	4608      	mov	r0, r1
 8007302:	602b      	str	r3, [r5, #0]
 8007304:	f7f9 fb88 	bl	8000a18 <_sbrk>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d102      	bne.n	8007312 <_sbrk_r+0x1a>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	b103      	cbz	r3, 8007312 <_sbrk_r+0x1a>
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	20001b6c 	.word	0x20001b6c

08007318 <_init>:
 8007318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731a:	bf00      	nop
 800731c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731e:	bc08      	pop	{r3}
 8007320:	469e      	mov	lr, r3
 8007322:	4770      	bx	lr

08007324 <_fini>:
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007326:	bf00      	nop
 8007328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732a:	bc08      	pop	{r3}
 800732c:	469e      	mov	lr, r3
 800732e:	4770      	bx	lr
