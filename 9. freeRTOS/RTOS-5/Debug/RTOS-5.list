
RTOS-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ee0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007070  08007070  00008070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070d0  080070d0  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  080070d0  080070d0  000080d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070d8  080070d8  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070d8  080070d8  000080d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070dc  080070dc  000080dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080070e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b10  2000006c  0800714c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b7c  0800714c  00009b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001685b  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034bf  00000000  00000000  0001f8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00022db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dff  00000000  00000000  00024010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051de  00000000  00000000  00024e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151b1  00000000  00000000  00029fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f46c6  00000000  00000000  0003f19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133864  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050dc  00000000  00000000  001338a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00138984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007058 	.word	0x08007058

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007058 	.word	0x08007058

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  HAL_Init();
 80004c4:	f000 fb60 	bl	8000b88 <HAL_Init>
  RetargetInit(&huart2);
 80004c8:	4812      	ldr	r0, [pc, #72]	@ (8000514 <main+0x54>)
 80004ca:	f000 f989 	bl	80007e0 <RetargetInit>
  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f891 	bl	80005f4 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f911 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d6:	f000 f8df 	bl	8000698 <MX_USART2_UART_Init>
  /* Init scheduler */
  osKernelInitialize();
 80004da:	f003 f89f 	bl	800361c <osKernelInitialize>

  /* Creation of a event flag */
  evtID = osEventFlagsNew(NULL);
 80004de:	2000      	movs	r0, #0
 80004e0:	f003 f978 	bl	80037d4 <osEventFlagsNew>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <main+0x58>)
 80004e8:	6013      	str	r3, [r2, #0]
  /* Creation of blinkThread */
  blinkThreadID = osThreadNew(blinkThread, NULL, NULL);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	480b      	ldr	r0, [pc, #44]	@ (800051c <main+0x5c>)
 80004f0:	f003 f8de 	bl	80036b0 <osThreadNew>
 80004f4:	4603      	mov	r3, r0
 80004f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000520 <main+0x60>)
 80004f8:	6013      	str	r3, [r2, #0]
  /* Creation of UARTThread */
  delayThreadID = osThreadNew(delayThread, NULL, NULL);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	4809      	ldr	r0, [pc, #36]	@ (8000524 <main+0x64>)
 8000500:	f003 f8d6 	bl	80036b0 <osThreadNew>
 8000504:	4603      	mov	r3, r0
 8000506:	4a08      	ldr	r2, [pc, #32]	@ (8000528 <main+0x68>)
 8000508:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 800050a:	f003 f8ab 	bl	8003664 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1);
 800050e:	bf00      	nop
 8000510:	e7fd      	b.n	800050e <main+0x4e>
 8000512:	bf00      	nop
 8000514:	20000088 	.word	0x20000088
 8000518:	20000118 	.word	0x20000118
 800051c:	0800052d 	.word	0x0800052d
 8000520:	20000110 	.word	0x20000110
 8000524:	08000559 	.word	0x08000559
 8000528:	20000114 	.word	0x20000114

0800052c <blinkThread>:
}

void blinkThread(void *argument) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  while(1) {
    osEventFlagsWait(evtID, FLAG_LED_BLINK, osFlagsWaitAll, osWaitForever);
 8000534:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <blinkThread+0x28>)
 8000536:	6818      	ldr	r0, [r3, #0]
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
 800053c:	2201      	movs	r2, #1
 800053e:	2101      	movs	r1, #1
 8000540:	f003 f9ca 	bl	80038d8 <osEventFlagsWait>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000544:	2120      	movs	r1, #32
 8000546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800054a:	f000 fe6d 	bl	8001228 <HAL_GPIO_TogglePin>
    osEventFlagsWait(evtID, FLAG_LED_BLINK, osFlagsWaitAll, osWaitForever);
 800054e:	bf00      	nop
 8000550:	e7f0      	b.n	8000534 <blinkThread+0x8>
 8000552:	bf00      	nop
 8000554:	20000118 	.word	0x20000118

08000558 <delayThread>:
  }
}

void delayThread(void *argument) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  uint8_t step = 100;
 8000560:	2364      	movs	r3, #100	@ 0x64
 8000562:	73fb      	strb	r3, [r7, #15]
  uint16_t delay = 500;
 8000564:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000568:	81bb      	strh	r3, [r7, #12]

  while(1) {
    osEventFlagsSet(evtID, FLAG_LED_BLINK);
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <delayThread+0x6c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2101      	movs	r1, #1
 8000570:	4618      	mov	r0, r3
 8000572:	f003 f96f 	bl	8003854 <osEventFlagsSet>

    if(osEventFlagsWait(evtID, FLAG_CHANGE_FREQUENCY, osFlagsWaitAll, delay) != osFlagsErrorTimeout ) {
 8000576:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <delayThread+0x6c>)
 8000578:	6818      	ldr	r0, [r3, #0]
 800057a:	89bb      	ldrh	r3, [r7, #12]
 800057c:	2201      	movs	r2, #1
 800057e:	2110      	movs	r1, #16
 8000580:	f003 f9aa 	bl	80038d8 <osEventFlagsWait>
 8000584:	4603      	mov	r3, r0
 8000586:	f113 0f02 	cmn.w	r3, #2
 800058a:	d0ee      	beq.n	800056a <delayThread+0x12>
      delay -= step;
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	b29b      	uxth	r3, r3
 8000590:	89ba      	ldrh	r2, [r7, #12]
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	81bb      	strh	r3, [r7, #12]
      switch(delay) {
 8000596:	89bb      	ldrh	r3, [r7, #12]
 8000598:	2b64      	cmp	r3, #100	@ 0x64
 800059a:	d006      	beq.n	80005aa <delayThread+0x52>
 800059c:	2b64      	cmp	r3, #100	@ 0x64
 800059e:	dce4      	bgt.n	800056a <delayThread+0x12>
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d008      	beq.n	80005b6 <delayThread+0x5e>
 80005a4:	2b32      	cmp	r3, #50	@ 0x32
 80005a6:	d003      	beq.n	80005b0 <delayThread+0x58>
 80005a8:	e00b      	b.n	80005c2 <delayThread+0x6a>
      case 100:
        step = 50;
 80005aa:	2332      	movs	r3, #50	@ 0x32
 80005ac:	73fb      	strb	r3, [r7, #15]
        break;
 80005ae:	e008      	b.n	80005c2 <delayThread+0x6a>
      case 50:
        step = 25;
 80005b0:	2319      	movs	r3, #25
 80005b2:	73fb      	strb	r3, [r7, #15]
        break;
 80005b4:	e005      	b.n	80005c2 <delayThread+0x6a>
      case 0:
        step = 100;
 80005b6:	2364      	movs	r3, #100	@ 0x64
 80005b8:	73fb      	strb	r3, [r7, #15]
        delay = 500;
 80005ba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005be:	81bb      	strh	r3, [r7, #12]
        break;
 80005c0:	bf00      	nop
    osEventFlagsSet(evtID, FLAG_LED_BLINK);
 80005c2:	e7d2      	b.n	800056a <delayThread+0x12>
 80005c4:	20000118 	.word	0x20000118

080005c8 <HAL_GPIO_EXTI_Callback>:
      }
    }
  }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13)
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005d8:	d105      	bne.n	80005e6 <HAL_GPIO_EXTI_Callback+0x1e>
    osEventFlagsSet(evtID, FLAG_CHANGE_FREQUENCY);
 80005da:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <HAL_GPIO_EXTI_Callback+0x28>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2110      	movs	r1, #16
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 f937 	bl	8003854 <osEventFlagsSet>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000118 	.word	0x20000118

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b096      	sub	sp, #88	@ 0x58
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2244      	movs	r2, #68	@ 0x44
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f006 faa9 	bl	8006b5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	463b      	mov	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000616:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061a:	f000 fe45 	bl	80012a8 <HAL_PWREx_ControlVoltageScaling>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000624:	f000 f8d6 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000630:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000632:	2310      	movs	r3, #16
 8000634:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063a:	2302      	movs	r3, #2
 800063c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063e:	2301      	movs	r3, #1
 8000640:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000642:	230a      	movs	r3, #10
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000646:	2307      	movs	r3, #7
 8000648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fe7c 	bl	8001354 <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000662:	f000 f8b7 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2303      	movs	r3, #3
 800066c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	2104      	movs	r1, #4
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fa44 	bl	8001b0c <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068a:	f000 f8a3 	bl	80007d4 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3758      	adds	r7, #88	@ 0x58
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 800069e:	4a15      	ldr	r2, [pc, #84]	@ (80006f4 <MX_USART2_UART_Init+0x5c>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006dc:	f002 f8f6 	bl	80028cc <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006e6:	f000 f875 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000088 	.word	0x20000088
 80006f4:	40004400 	.word	0x40004400

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b2f      	ldr	r3, [pc, #188]	@ (80007cc <MX_GPIO_Init+0xd4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	4a2e      	ldr	r2, [pc, #184]	@ (80007cc <MX_GPIO_Init+0xd4>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071a:	4b2c      	ldr	r3, [pc, #176]	@ (80007cc <MX_GPIO_Init+0xd4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	4b29      	ldr	r3, [pc, #164]	@ (80007cc <MX_GPIO_Init+0xd4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a28      	ldr	r2, [pc, #160]	@ (80007cc <MX_GPIO_Init+0xd4>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b26      	ldr	r3, [pc, #152]	@ (80007cc <MX_GPIO_Init+0xd4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b23      	ldr	r3, [pc, #140]	@ (80007cc <MX_GPIO_Init+0xd4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a22      	ldr	r2, [pc, #136]	@ (80007cc <MX_GPIO_Init+0xd4>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <MX_GPIO_Init+0xd4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <MX_GPIO_Init+0xd4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	4a1c      	ldr	r2, [pc, #112]	@ (80007cc <MX_GPIO_Init+0xd4>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000762:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <MX_GPIO_Init+0xd4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2120      	movs	r1, #32
 8000772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000776:	f000 fd3f 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800077a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000780:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	480f      	ldr	r0, [pc, #60]	@ (80007d0 <MX_GPIO_Init+0xd8>)
 8000792:	f000 fb87 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000796:	2320      	movs	r3, #32
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b0:	f000 fb78 	bl	8000ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2105      	movs	r1, #5
 80007b8:	2028      	movs	r0, #40	@ 0x28
 80007ba:	f000 fb3c 	bl	8000e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007be:	2028      	movs	r0, #40	@ 0x28
 80007c0:	f000 fb55 	bl	8000e6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	@ 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000800 	.word	0x48000800

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <Error_Handler+0x8>

080007e0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80007e8:	4a07      	ldr	r2, [pc, #28]	@ (8000808 <RetargetInit+0x28>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80007ee:	4b07      	ldr	r3, [pc, #28]	@ (800080c <RetargetInit+0x2c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6898      	ldr	r0, [r3, #8]
 80007f4:	2300      	movs	r3, #0
 80007f6:	2202      	movs	r2, #2
 80007f8:	2100      	movs	r1, #0
 80007fa:	f006 f8b7 	bl	800696c <setvbuf>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000011c 	.word	0x2000011c
 800080c:	2000001c 	.word	0x2000001c

08000810 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d002      	beq.n	8000828 <_write+0x18>
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d111      	bne.n	800084c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <_write+0x54>)
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	b29a      	uxth	r2, r3
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	68b9      	ldr	r1, [r7, #8]
 8000836:	f002 f897 	bl	8002968 <HAL_UART_Transmit>
 800083a:	4603      	mov	r3, r0
 800083c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800083e:	7dfb      	ldrb	r3, [r7, #23]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <_write+0x38>
      return len;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	e008      	b.n	800085a <_write+0x4a>
    else
      return EIO;
 8000848:	2305      	movs	r3, #5
 800084a:	e006      	b.n	800085a <_write+0x4a>
  }
  errno = EBADF;
 800084c:	f006 f9d4 	bl	8006bf8 <__errno>
 8000850:	4603      	mov	r3, r0
 8000852:	2209      	movs	r2, #9
 8000854:	601a      	str	r2, [r3, #0]
  return -1;
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800085a:	4618      	mov	r0, r3
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000011c 	.word	0x2000011c

08000868 <_close>:

int _close(int fd) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	db04      	blt.n	8000880 <_close+0x18>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b02      	cmp	r3, #2
 800087a:	dc01      	bgt.n	8000880 <_close+0x18>
    return 0;
 800087c:	2300      	movs	r3, #0
 800087e:	e006      	b.n	800088e <_close+0x26>

  errno = EBADF;
 8000880:	f006 f9ba 	bl	8006bf8 <__errno>
 8000884:	4603      	mov	r3, r0
 8000886:	2209      	movs	r2, #9
 8000888:	601a      	str	r2, [r3, #0]
  return -1;
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <_read>:

int _read(int fd, char* ptr, int len) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d110      	bne.n	80008cc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <_read+0x4c>)
 80008ac:	6818      	ldr	r0, [r3, #0]
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	2201      	movs	r2, #1
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	f002 f8e0 	bl	8002a7a <HAL_UART_Receive>
 80008ba:	4603      	mov	r3, r0
 80008bc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008be:	7dfb      	ldrb	r3, [r7, #23]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d101      	bne.n	80008c8 <_read+0x30>
      return 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	e008      	b.n	80008da <_read+0x42>
    else
      return EIO;
 80008c8:	2305      	movs	r3, #5
 80008ca:	e006      	b.n	80008da <_read+0x42>
  }
  errno = EBADF;
 80008cc:	f006 f994 	bl	8006bf8 <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2209      	movs	r2, #9
 80008d4:	601a      	str	r2, [r3, #0]
  return -1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000011c 	.word	0x2000011c

080008e8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db08      	blt.n	800090a <_fstat+0x22>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	dc05      	bgt.n	800090a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000904:	605a      	str	r2, [r3, #4]
    return 0;
 8000906:	2300      	movs	r3, #0
 8000908:	e005      	b.n	8000916 <_fstat+0x2e>
  }

  errno = EBADF;
 800090a:	f006 f975 	bl	8006bf8 <__errno>
 800090e:	4603      	mov	r3, r0
 8000910:	2209      	movs	r2, #9
 8000912:	601a      	str	r2, [r3, #0]
  return 0;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <HAL_MspInit+0x4c>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092a:	4a10      	ldr	r2, [pc, #64]	@ (800096c <HAL_MspInit+0x4c>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6613      	str	r3, [r2, #96]	@ 0x60
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <HAL_MspInit+0x4c>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <HAL_MspInit+0x4c>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <HAL_MspInit+0x4c>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000948:	6593      	str	r3, [r2, #88]	@ 0x58
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <HAL_MspInit+0x4c>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	210f      	movs	r1, #15
 800095a:	f06f 0001 	mvn.w	r0, #1
 800095e:	f000 fa6a 	bl	8000e36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0ac      	sub	sp, #176	@ 0xb0
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2288      	movs	r2, #136	@ 0x88
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f006 f8e2 	bl	8006b5a <memset>
  if(huart->Instance==USART2)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a21      	ldr	r2, [pc, #132]	@ (8000a20 <HAL_UART_MspInit+0xb0>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d13b      	bne.n	8000a18 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fad1 	bl	8001f54 <HAL_RCCEx_PeriphCLKConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009b8:	f7ff ff0c 	bl	80007d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009bc:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <HAL_UART_MspInit+0xb4>)
 80009be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c0:	4a18      	ldr	r2, [pc, #96]	@ (8000a24 <HAL_UART_MspInit+0xb4>)
 80009c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <HAL_UART_MspInit+0xb4>)
 80009ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <HAL_UART_MspInit+0xb4>)
 80009d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d8:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <HAL_UART_MspInit+0xb4>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e0:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <HAL_UART_MspInit+0xb4>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ec:	230c      	movs	r3, #12
 80009ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a04:	2307      	movs	r3, #7
 8000a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a14:	f000 fa46 	bl	8000ea4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a18:	bf00      	nop
 8000a1a:	37b0      	adds	r7, #176	@ 0xb0
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40021000 	.word	0x40021000

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <NMI_Handler+0x4>

08000a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <MemManage_Handler+0x4>

08000a40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a62:	f000 f8ed 	bl	8000c40 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a66:	f004 fe0b 	bl	8005680 <xTaskGetSchedulerState>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d001      	beq.n	8000a74 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a70:	f005 fc3a 	bl	80062e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a7c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a80:	f000 fbec 	bl	800125c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_lseek>:
  }
  return len;
}

int _lseek(int file, int ptr, int dir)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	@ (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f006 f890 	bl	8006bf8 <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20018000 	.word	0x20018000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	20000120 	.word	0x20000120
 8000b0c:	20001b80 	.word	0x20001b80

08000b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b38:	f7ff ffea 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	@ (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	@ (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b62:	f006 f84f 	bl	8006c04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b66:	f7ff fcab 	bl	80004c0 <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b78:	080070e0 	.word	0x080070e0
  ldr r2, =_sbss
 8000b7c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b80:	20001b7c 	.word	0x20001b7c

08000b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_2_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b92:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <HAL_Init+0x3c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc4 <HAL_Init+0x3c>)
 8000b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9e:	2003      	movs	r0, #3
 8000ba0:	f000 f93e 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba4:	200f      	movs	r0, #15
 8000ba6:	f000 f80f 	bl	8000bc8 <HAL_InitTick>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d002      	beq.n	8000bb6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	e001      	b.n	8000bba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb6:	f7ff feb3 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bba:	79fb      	ldrb	r3, [r7, #7]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd4:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <HAL_InitTick+0x6c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d023      	beq.n	8000c24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <HAL_InitTick+0x70>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <HAL_InitTick+0x6c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f949 	bl	8000e8a <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d10f      	bne.n	8000c1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d809      	bhi.n	8000c18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f000 f913 	bl	8000e36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c10:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <HAL_InitTick+0x74>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e007      	b.n	8000c28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e004      	b.n	8000c28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	73fb      	strb	r3, [r7, #15]
 8000c22:	e001      	b.n	8000c28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000004 	.word	0x20000004

08000c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_IncTick+0x20>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000124 	.word	0x20000124

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000124 	.word	0x20000124

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db0b      	blt.n	8000d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	4907      	ldr	r1, [pc, #28]	@ (8000d1c <__NVIC_EnableIRQ+0x38>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	@ (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	@ (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	@ 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	@ 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dec:	d301      	bcc.n	8000df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00f      	b.n	8000e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <SysTick_Config+0x40>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f7ff ff8e 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <SysTick_Config+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <SysTick_Config+0x40>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff29 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff3e 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff8e 	bl	8000d74 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5d 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff31 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffa2 	bl	8000ddc <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e17f      	b.n	80011b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8171 	beq.w	80011ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d005      	beq.n	8000ee4 <HAL_GPIO_Init+0x40>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d130      	bne.n	8000f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	f003 0201 	and.w	r2, r3, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d118      	bne.n	8000f84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	08db      	lsrs	r3, r3, #3
 8000f6e:	f003 0201 	and.w	r2, r3, #1
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d017      	beq.n	8000fc0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d123      	bne.n	8001014 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0203 	and.w	r2, r3, #3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80ac 	beq.w	80011ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	4b5f      	ldr	r3, [pc, #380]	@ (80011d4 <HAL_GPIO_Init+0x330>)
 8001058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105a:	4a5e      	ldr	r2, [pc, #376]	@ (80011d4 <HAL_GPIO_Init+0x330>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6613      	str	r3, [r2, #96]	@ 0x60
 8001062:	4b5c      	ldr	r3, [pc, #368]	@ (80011d4 <HAL_GPIO_Init+0x330>)
 8001064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800106e:	4a5a      	ldr	r2, [pc, #360]	@ (80011d8 <HAL_GPIO_Init+0x334>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001098:	d025      	beq.n	80010e6 <HAL_GPIO_Init+0x242>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4f      	ldr	r2, [pc, #316]	@ (80011dc <HAL_GPIO_Init+0x338>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01f      	beq.n	80010e2 <HAL_GPIO_Init+0x23e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4e      	ldr	r2, [pc, #312]	@ (80011e0 <HAL_GPIO_Init+0x33c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0x23a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4d      	ldr	r2, [pc, #308]	@ (80011e4 <HAL_GPIO_Init+0x340>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0x236>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4c      	ldr	r2, [pc, #304]	@ (80011e8 <HAL_GPIO_Init+0x344>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x232>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	@ (80011ec <HAL_GPIO_Init+0x348>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x22e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4a      	ldr	r2, [pc, #296]	@ (80011f0 <HAL_GPIO_Init+0x34c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x22a>
 80010ca:	2306      	movs	r3, #6
 80010cc:	e00c      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010ce:	2307      	movs	r3, #7
 80010d0:	e00a      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010d2:	2305      	movs	r3, #5
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010d6:	2304      	movs	r3, #4
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010e6:	2300      	movs	r3, #0
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f8:	4937      	ldr	r1, [pc, #220]	@ (80011d8 <HAL_GPIO_Init+0x334>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001106:	4b3b      	ldr	r3, [pc, #236]	@ (80011f4 <HAL_GPIO_Init+0x350>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800112a:	4a32      	ldr	r2, [pc, #200]	@ (80011f4 <HAL_GPIO_Init+0x350>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001130:	4b30      	ldr	r3, [pc, #192]	@ (80011f4 <HAL_GPIO_Init+0x350>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001154:	4a27      	ldr	r2, [pc, #156]	@ (80011f4 <HAL_GPIO_Init+0x350>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800115a:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <HAL_GPIO_Init+0x350>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800117e:	4a1d      	ldr	r2, [pc, #116]	@ (80011f4 <HAL_GPIO_Init+0x350>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HAL_GPIO_Init+0x350>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a8:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <HAL_GPIO_Init+0x350>)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa22 f303 	lsr.w	r3, r2, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f47f ae78 	bne.w	8000eb4 <HAL_GPIO_Init+0x10>
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010000 	.word	0x40010000
 80011dc:	48000400 	.word	0x48000400
 80011e0:	48000800 	.word	0x48000800
 80011e4:	48000c00 	.word	0x48000c00
 80011e8:	48001000 	.word	0x48001000
 80011ec:	48001400 	.word	0x48001400
 80011f0:	48001800 	.word	0x48001800
 80011f4:	40010400 	.word	0x40010400

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001214:	e002      	b.n	800121c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4013      	ands	r3, r2
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43d9      	mvns	r1, r3
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	400b      	ands	r3, r1
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001268:	695a      	ldr	r2, [r3, #20]
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f9a4 	bl	80005c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40010400 	.word	0x40010400

0800128c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001290:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40007000 	.word	0x40007000

080012a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012b6:	d130      	bne.n	800131a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012b8:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012c4:	d038      	beq.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2232      	movs	r2, #50	@ 0x32
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001350 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	0c9b      	lsrs	r3, r3, #18
 80012e8:	3301      	adds	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ec:	e002      	b.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001300:	d102      	bne.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f2      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001314:	d110      	bne.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e00f      	b.n	800133a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001326:	d007      	beq.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001330:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001332:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001336:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40007000 	.word	0x40007000
 800134c:	20000000 	.word	0x20000000
 8001350:	431bde83 	.word	0x431bde83

08001354 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e3ca      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001366:	4b97      	ldr	r3, [pc, #604]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001370:	4b94      	ldr	r3, [pc, #592]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 80e4 	beq.w	8001550 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d007      	beq.n	800139e <HAL_RCC_OscConfig+0x4a>
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2b0c      	cmp	r3, #12
 8001392:	f040 808b 	bne.w	80014ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2b01      	cmp	r3, #1
 800139a:	f040 8087 	bne.w	80014ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800139e:	4b89      	ldr	r3, [pc, #548]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <HAL_RCC_OscConfig+0x62>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e3a2      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1a      	ldr	r2, [r3, #32]
 80013ba:	4b82      	ldr	r3, [pc, #520]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <HAL_RCC_OscConfig+0x7c>
 80013c6:	4b7f      	ldr	r3, [pc, #508]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013ce:	e005      	b.n	80013dc <HAL_RCC_OscConfig+0x88>
 80013d0:	4b7c      	ldr	r3, [pc, #496]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80013d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013d6:	091b      	lsrs	r3, r3, #4
 80013d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013dc:	4293      	cmp	r3, r2
 80013de:	d223      	bcs.n	8001428 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 fd55 	bl	8001e94 <RCC_SetFlashLatencyFromMSIRange>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e383      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f4:	4b73      	ldr	r3, [pc, #460]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a72      	ldr	r2, [pc, #456]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80013fa:	f043 0308 	orr.w	r3, r3, #8
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b70      	ldr	r3, [pc, #448]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	496d      	ldr	r1, [pc, #436]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001412:	4b6c      	ldr	r3, [pc, #432]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	4968      	ldr	r1, [pc, #416]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
 8001426:	e025      	b.n	8001474 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001428:	4b66      	ldr	r3, [pc, #408]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a65      	ldr	r2, [pc, #404]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b63      	ldr	r3, [pc, #396]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4960      	ldr	r1, [pc, #384]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001446:	4b5f      	ldr	r3, [pc, #380]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	495b      	ldr	r1, [pc, #364]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fd15 	bl	8001e94 <RCC_SetFlashLatencyFromMSIRange>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e343      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001474:	f000 fc4a 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001478:	4602      	mov	r2, r0
 800147a:	4b52      	ldr	r3, [pc, #328]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	4950      	ldr	r1, [pc, #320]	@ (80015c8 <HAL_RCC_OscConfig+0x274>)
 8001486:	5ccb      	ldrb	r3, [r1, r3]
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
 8001490:	4a4e      	ldr	r2, [pc, #312]	@ (80015cc <HAL_RCC_OscConfig+0x278>)
 8001492:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001494:	4b4e      	ldr	r3, [pc, #312]	@ (80015d0 <HAL_RCC_OscConfig+0x27c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fb95 	bl	8000bc8 <HAL_InitTick>
 800149e:	4603      	mov	r3, r0
 80014a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d052      	beq.n	800154e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	e327      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d032      	beq.n	800151a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014b4:	4b43      	ldr	r3, [pc, #268]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a42      	ldr	r2, [pc, #264]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fbd2 	bl	8000c68 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c8:	f7ff fbce 	bl	8000c68 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e310      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014da:	4b3a      	ldr	r3, [pc, #232]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e6:	4b37      	ldr	r3, [pc, #220]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a36      	ldr	r2, [pc, #216]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b34      	ldr	r3, [pc, #208]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4931      	ldr	r1, [pc, #196]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001504:	4b2f      	ldr	r3, [pc, #188]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	492c      	ldr	r1, [pc, #176]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
 8001518:	e01a      	b.n	8001550 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800151a:	4b2a      	ldr	r3, [pc, #168]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a29      	ldr	r2, [pc, #164]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001526:	f7ff fb9f 	bl	8000c68 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800152e:	f7ff fb9b 	bl	8000c68 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e2dd      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001540:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f0      	bne.n	800152e <HAL_RCC_OscConfig+0x1da>
 800154c:	e000      	b.n	8001550 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800154e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d074      	beq.n	8001646 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b08      	cmp	r3, #8
 8001560:	d005      	beq.n	800156e <HAL_RCC_OscConfig+0x21a>
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b0c      	cmp	r3, #12
 8001566:	d10e      	bne.n	8001586 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d10b      	bne.n	8001586 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d064      	beq.n	8001644 <HAL_RCC_OscConfig+0x2f0>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d160      	bne.n	8001644 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e2ba      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800158e:	d106      	bne.n	800159e <HAL_RCC_OscConfig+0x24a>
 8001590:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0b      	ldr	r2, [pc, #44]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 8001596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e026      	b.n	80015ec <HAL_RCC_OscConfig+0x298>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015a6:	d115      	bne.n	80015d4 <HAL_RCC_OscConfig+0x280>
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a05      	ldr	r2, [pc, #20]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80015ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a02      	ldr	r2, [pc, #8]	@ (80015c4 <HAL_RCC_OscConfig+0x270>)
 80015ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	e014      	b.n	80015ec <HAL_RCC_OscConfig+0x298>
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	08007088 	.word	0x08007088
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000004 	.word	0x20000004
 80015d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a9f      	ldr	r2, [pc, #636]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80015da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a9c      	ldr	r2, [pc, #624]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fb38 	bl	8000c68 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fb34 	bl	8000c68 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	@ 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e276      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160e:	4b92      	ldr	r3, [pc, #584]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x2a8>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff fb24 	bl	8000c68 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fb20 	bl	8000c68 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	@ 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e262      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001636:	4b88      	ldr	r3, [pc, #544]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x2d0>
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d060      	beq.n	8001714 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b04      	cmp	r3, #4
 8001656:	d005      	beq.n	8001664 <HAL_RCC_OscConfig+0x310>
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2b0c      	cmp	r3, #12
 800165c:	d119      	bne.n	8001692 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d116      	bne.n	8001692 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001664:	4b7c      	ldr	r3, [pc, #496]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_OscConfig+0x328>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e23f      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167c:	4b76      	ldr	r3, [pc, #472]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	061b      	lsls	r3, r3, #24
 800168a:	4973      	ldr	r1, [pc, #460]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001690:	e040      	b.n	8001714 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d023      	beq.n	80016e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169a:	4b6f      	ldr	r3, [pc, #444]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a6e      	ldr	r2, [pc, #440]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a6:	f7ff fadf 	bl	8000c68 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ae:	f7ff fadb 	bl	8000c68 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e21d      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016c0:	4b65      	ldr	r3, [pc, #404]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b62      	ldr	r3, [pc, #392]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	495f      	ldr	r1, [pc, #380]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
 80016e0:	e018      	b.n	8001714 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80016e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff fabb 	bl	8000c68 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff fab7 	bl	8000c68 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1f9      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001708:	4b53      	ldr	r3, [pc, #332]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d03c      	beq.n	800179a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d01c      	beq.n	8001762 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001728:	4b4b      	ldr	r3, [pc, #300]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 800172a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800172e:	4a4a      	ldr	r2, [pc, #296]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff fa96 	bl	8000c68 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001740:	f7ff fa92 	bl	8000c68 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e1d4      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001752:	4b41      	ldr	r3, [pc, #260]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 8001754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ef      	beq.n	8001740 <HAL_RCC_OscConfig+0x3ec>
 8001760:	e01b      	b.n	800179a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001762:	4b3d      	ldr	r3, [pc, #244]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 8001764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001768:	4a3b      	ldr	r2, [pc, #236]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001772:	f7ff fa79 	bl	8000c68 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177a:	f7ff fa75 	bl	8000c68 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e1b7      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800178c:	4b32      	ldr	r3, [pc, #200]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ef      	bne.n	800177a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80a6 	beq.w	80018f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10d      	bne.n	80017d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b8:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	4a26      	ldr	r2, [pc, #152]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80017be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017d0:	2301      	movs	r3, #1
 80017d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d4:	4b21      	ldr	r3, [pc, #132]	@ (800185c <HAL_RCC_OscConfig+0x508>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d118      	bne.n	8001812 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017e0:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <HAL_RCC_OscConfig+0x508>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a1d      	ldr	r2, [pc, #116]	@ (800185c <HAL_RCC_OscConfig+0x508>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ec:	f7ff fa3c 	bl	8000c68 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f4:	f7ff fa38 	bl	8000c68 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e17a      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <HAL_RCC_OscConfig+0x508>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d108      	bne.n	800182c <HAL_RCC_OscConfig+0x4d8>
 800181a:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 800181c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800182a:	e029      	b.n	8001880 <HAL_RCC_OscConfig+0x52c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d115      	bne.n	8001860 <HAL_RCC_OscConfig+0x50c>
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183a:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001844:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 8001846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800184a:	4a03      	ldr	r2, [pc, #12]	@ (8001858 <HAL_RCC_OscConfig+0x504>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001854:	e014      	b.n	8001880 <HAL_RCC_OscConfig+0x52c>
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000
 800185c:	40007000 	.word	0x40007000
 8001860:	4b9c      	ldr	r3, [pc, #624]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001866:	4a9b      	ldr	r2, [pc, #620]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001870:	4b98      	ldr	r3, [pc, #608]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001876:	4a97      	ldr	r2, [pc, #604]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001878:	f023 0304 	bic.w	r3, r3, #4
 800187c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d016      	beq.n	80018b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001888:	f7ff f9ee 	bl	8000c68 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001890:	f7ff f9ea 	bl	8000c68 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e12a      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018a6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 80018a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0ed      	beq.n	8001890 <HAL_RCC_OscConfig+0x53c>
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b6:	f7ff f9d7 	bl	8000c68 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff f9d3 	bl	8000c68 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e113      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018d4:	4b7f      	ldr	r3, [pc, #508]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ed      	bne.n	80018be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018e2:	7ffb      	ldrb	r3, [r7, #31]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d105      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e8:	4b7a      	ldr	r3, [pc, #488]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ec:	4a79      	ldr	r2, [pc, #484]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 80018ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80fe 	beq.w	8001afa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	2b02      	cmp	r3, #2
 8001904:	f040 80d0 	bne.w	8001aa8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001908:	4b72      	ldr	r3, [pc, #456]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001918:	429a      	cmp	r2, r3
 800191a:	d130      	bne.n	800197e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	3b01      	subs	r3, #1
 8001928:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d127      	bne.n	800197e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001938:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d11f      	bne.n	800197e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001948:	2a07      	cmp	r2, #7
 800194a:	bf14      	ite	ne
 800194c:	2201      	movne	r2, #1
 800194e:	2200      	moveq	r2, #0
 8001950:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001952:	4293      	cmp	r3, r2
 8001954:	d113      	bne.n	800197e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001960:	085b      	lsrs	r3, r3, #1
 8001962:	3b01      	subs	r3, #1
 8001964:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d109      	bne.n	800197e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	085b      	lsrs	r3, r3, #1
 8001976:	3b01      	subs	r3, #1
 8001978:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800197a:	429a      	cmp	r2, r3
 800197c:	d06e      	beq.n	8001a5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d069      	beq.n	8001a58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001984:	4b53      	ldr	r3, [pc, #332]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001990:	4b50      	ldr	r3, [pc, #320]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0ad      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019a0:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 80019a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019ac:	f7ff f95c 	bl	8000c68 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff f958 	bl	8000c68 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e09a      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c6:	4b43      	ldr	r3, [pc, #268]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d2:	4b40      	ldr	r3, [pc, #256]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	4b40      	ldr	r3, [pc, #256]	@ (8001ad8 <HAL_RCC_OscConfig+0x784>)
 80019d8:	4013      	ands	r3, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019e2:	3a01      	subs	r2, #1
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	4311      	orrs	r1, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019ec:	0212      	lsls	r2, r2, #8
 80019ee:	4311      	orrs	r1, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019f4:	0852      	lsrs	r2, r2, #1
 80019f6:	3a01      	subs	r2, #1
 80019f8:	0552      	lsls	r2, r2, #21
 80019fa:	4311      	orrs	r1, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a00:	0852      	lsrs	r2, r2, #1
 8001a02:	3a01      	subs	r2, #1
 8001a04:	0652      	lsls	r2, r2, #25
 8001a06:	4311      	orrs	r1, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a0c:	0912      	lsrs	r2, r2, #4
 8001a0e:	0452      	lsls	r2, r2, #17
 8001a10:	430a      	orrs	r2, r1
 8001a12:	4930      	ldr	r1, [pc, #192]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a18:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4a2a      	ldr	r2, [pc, #168]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a30:	f7ff f91a 	bl	8000c68 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff f916 	bl	8000c68 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e058      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a56:	e050      	b.n	8001afa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e04f      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d148      	bne.n	8001afa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a74:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4a16      	ldr	r2, [pc, #88]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a80:	f7ff f8f2 	bl	8000c68 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff f8ee 	bl	8000c68 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e030      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x734>
 8001aa6:	e028      	b.n	8001afa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d023      	beq.n	8001af6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a08      	ldr	r2, [pc, #32]	@ (8001ad4 <HAL_RCC_OscConfig+0x780>)
 8001ab4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff f8d5 	bl	8000c68 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac0:	e00c      	b.n	8001adc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff f8d1 	bl	8000c68 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d905      	bls.n	8001adc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e013      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <HAL_RCC_OscConfig+0x7b0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1ec      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_RCC_OscConfig+0x7b0>)
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	4905      	ldr	r1, [pc, #20]	@ (8001b04 <HAL_RCC_OscConfig+0x7b0>)
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_RCC_OscConfig+0x7b4>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	60cb      	str	r3, [r1, #12]
 8001af4:	e001      	b.n	8001afa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	feeefffc 	.word	0xfeeefffc

08001b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0e7      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b20:	4b75      	ldr	r3, [pc, #468]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d910      	bls.n	8001b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b72      	ldr	r3, [pc, #456]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 0207 	bic.w	r2, r3, #7
 8001b36:	4970      	ldr	r1, [pc, #448]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b6e      	ldr	r3, [pc, #440]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0cf      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d010      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	4b66      	ldr	r3, [pc, #408]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d908      	bls.n	8001b7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b6c:	4b63      	ldr	r3, [pc, #396]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4960      	ldr	r1, [pc, #384]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d04c      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d107      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b92:	4b5a      	ldr	r3, [pc, #360]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d121      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0a6      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d107      	bne.n	8001bba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001baa:	4b54      	ldr	r3, [pc, #336]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d115      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e09a      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e08e      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e086      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001be2:	4b46      	ldr	r3, [pc, #280]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f023 0203 	bic.w	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4943      	ldr	r1, [pc, #268]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bf4:	f7ff f838 	bl	8000c68 <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7ff f834 	bl	8000c68 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e06e      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	4b3a      	ldr	r3, [pc, #232]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 020c 	and.w	r2, r3, #12
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d1eb      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d010      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	4b31      	ldr	r3, [pc, #196]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d208      	bcs.n	8001c52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b2e      	ldr	r3, [pc, #184]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	492b      	ldr	r1, [pc, #172]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c52:	4b29      	ldr	r3, [pc, #164]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d210      	bcs.n	8001c82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c60:	4b25      	ldr	r3, [pc, #148]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 0207 	bic.w	r2, r3, #7
 8001c68:	4923      	ldr	r1, [pc, #140]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c70:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e036      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	4918      	ldr	r1, [pc, #96]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d009      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cac:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4910      	ldr	r1, [pc, #64]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cc0:	f000 f824 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	490b      	ldr	r1, [pc, #44]	@ (8001d00 <HAL_RCC_ClockConfig+0x1f4>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cdc:	4a09      	ldr	r2, [pc, #36]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f8>)
 8001cde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ce0:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_RCC_ClockConfig+0x1fc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe ff6f 	bl	8000bc8 <HAL_InitTick>
 8001cea:	4603      	mov	r3, r0
 8001cec:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cee:	7afb      	ldrb	r3, [r7, #11]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40022000 	.word	0x40022000
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	08007088 	.word	0x08007088
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	@ 0x24
 8001d10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d24:	4b3b      	ldr	r3, [pc, #236]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x34>
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d121      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d11e      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d40:	4b34      	ldr	r3, [pc, #208]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d4c:	4b31      	ldr	r3, [pc, #196]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	e005      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d68:	4a2b      	ldr	r2, [pc, #172]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10d      	bne.n	8001d94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d102      	bne.n	8001d8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d84:	4b25      	ldr	r3, [pc, #148]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	e004      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d90:	4b23      	ldr	r3, [pc, #140]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d134      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d003      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d003      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0xac>
 8001db0:	e005      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001db4:	617b      	str	r3, [r7, #20]
      break;
 8001db6:	e005      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001db8:	4b19      	ldr	r3, [pc, #100]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dba:	617b      	str	r3, [r7, #20]
      break;
 8001dbc:	e002      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	617b      	str	r3, [r7, #20]
      break;
 8001dc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	3301      	adds	r3, #1
 8001dd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	fb03 f202 	mul.w	r2, r3, r2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	0e5b      	lsrs	r3, r3, #25
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	3301      	adds	r3, #1
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e04:	69bb      	ldr	r3, [r7, #24]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	@ 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	080070a0 	.word	0x080070a0
 8001e1c:	00f42400 	.word	0x00f42400
 8001e20:	007a1200 	.word	0x007a1200

08001e24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e40:	f7ff fff0 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	4904      	ldr	r1, [pc, #16]	@ (8001e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08007098 	.word	0x08007098

08001e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e6c:	f7ff ffda 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	0adb      	lsrs	r3, r3, #11
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	4904      	ldr	r1, [pc, #16]	@ (8001e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e7e:	5ccb      	ldrb	r3, [r1, r3]
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	08007098 	.word	0x08007098

08001e94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001eac:	f7ff f9ee 	bl	800128c <HAL_PWREx_GetVoltageRange>
 8001eb0:	6178      	str	r0, [r7, #20]
 8001eb2:	e014      	b.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb4:	4b25      	ldr	r3, [pc, #148]	@ (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb8:	4a24      	ldr	r2, [pc, #144]	@ (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ec0:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ecc:	f7ff f9de 	bl	800128c <HAL_PWREx_GetVoltageRange>
 8001ed0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ee4:	d10b      	bne.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b80      	cmp	r3, #128	@ 0x80
 8001eea:	d919      	bls.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ef0:	d902      	bls.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	e013      	b.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef8:	2301      	movs	r3, #1
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	e010      	b.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b80      	cmp	r3, #128	@ 0x80
 8001f02:	d902      	bls.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f04:	2303      	movs	r3, #3
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e00a      	b.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b80      	cmp	r3, #128	@ 0x80
 8001f0e:	d102      	bne.n	8001f16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f10:	2302      	movs	r3, #2
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	e004      	b.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b70      	cmp	r3, #112	@ 0x70
 8001f1a:	d101      	bne.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f20:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 0207 	bic.w	r2, r3, #7
 8001f28:	4909      	ldr	r1, [pc, #36]	@ (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f30:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d001      	beq.n	8001f42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40022000 	.word	0x40022000

08001f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f60:	2300      	movs	r3, #0
 8001f62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d041      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f78:	d02a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f7e:	d824      	bhi.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f84:	d008      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f8a:	d81e      	bhi.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f94:	d010      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f96:	e018      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f98:	4b86      	ldr	r3, [pc, #536]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4a85      	ldr	r2, [pc, #532]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fa4:	e015      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fabb 	bl	8002528 <RCCEx_PLLSAI1_Config>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb6:	e00c      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3320      	adds	r3, #32
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fba6 	bl	8002710 <RCCEx_PLLSAI2_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fc8:	e003      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	74fb      	strb	r3, [r7, #19]
      break;
 8001fce:	e000      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fd2:	7cfb      	ldrb	r3, [r7, #19]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fd8:	4b76      	ldr	r3, [pc, #472]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fde:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fe6:	4973      	ldr	r1, [pc, #460]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fee:	e001      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d041      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002004:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002008:	d02a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800200a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800200e:	d824      	bhi.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002010:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002014:	d008      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002016:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800201a:	d81e      	bhi.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002024:	d010      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002026:	e018      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002028:	4b62      	ldr	r3, [pc, #392]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4a61      	ldr	r2, [pc, #388]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002032:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002034:	e015      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3304      	adds	r3, #4
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fa73 	bl	8002528 <RCCEx_PLLSAI1_Config>
 8002042:	4603      	mov	r3, r0
 8002044:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002046:	e00c      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3320      	adds	r3, #32
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fb5e 	bl	8002710 <RCCEx_PLLSAI2_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002058:	e003      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	74fb      	strb	r3, [r7, #19]
      break;
 800205e:	e000      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002062:	7cfb      	ldrb	r3, [r7, #19]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10b      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002068:	4b52      	ldr	r3, [pc, #328]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002076:	494f      	ldr	r1, [pc, #316]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800207e:	e001      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a0 	beq.w	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002096:	4b47      	ldr	r3, [pc, #284]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020a6:	2300      	movs	r3, #0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ac:	4b41      	ldr	r3, [pc, #260]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b0:	4a40      	ldr	r2, [pc, #256]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020b8:	4b3e      	ldr	r3, [pc, #248]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c4:	2301      	movs	r3, #1
 80020c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c8:	4b3b      	ldr	r3, [pc, #236]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a3a      	ldr	r2, [pc, #232]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020d4:	f7fe fdc8 	bl	8000c68 <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020da:	e009      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020dc:	f7fe fdc4 	bl	8000c68 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d902      	bls.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	74fb      	strb	r3, [r7, #19]
        break;
 80020ee:	e005      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020f0:	4b31      	ldr	r3, [pc, #196]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ef      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d15c      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002102:	4b2c      	ldr	r3, [pc, #176]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002108:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800210c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01f      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	429a      	cmp	r2, r3
 800211e:	d019      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002120:	4b24      	ldr	r3, [pc, #144]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800212a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800212c:	4b21      	ldr	r3, [pc, #132]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002132:	4a20      	ldr	r2, [pc, #128]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800213c:	4b1d      	ldr	r3, [pc, #116]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002142:	4a1c      	ldr	r2, [pc, #112]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800214c:	4a19      	ldr	r2, [pc, #100]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d016      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7fe fd83 	bl	8000c68 <HAL_GetTick>
 8002162:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002164:	e00b      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7fe fd7f 	bl	8000c68 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d902      	bls.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	74fb      	strb	r3, [r7, #19]
            break;
 800217c:	e006      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0ec      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800218c:	7cfb      	ldrb	r3, [r7, #19]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021a2:	4904      	ldr	r1, [pc, #16]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021aa:	e009      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021ac:	7cfb      	ldrb	r3, [r7, #19]
 80021ae:	74bb      	strb	r3, [r7, #18]
 80021b0:	e006      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c0:	7c7b      	ldrb	r3, [r7, #17]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b9e      	ldr	r3, [pc, #632]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ca:	4a9d      	ldr	r2, [pc, #628]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021de:	4b98      	ldr	r3, [pc, #608]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e4:	f023 0203 	bic.w	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ec:	4994      	ldr	r1, [pc, #592]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002200:	4b8f      	ldr	r3, [pc, #572]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002206:	f023 020c 	bic.w	r2, r3, #12
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220e:	498c      	ldr	r1, [pc, #560]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002222:	4b87      	ldr	r3, [pc, #540]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002228:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	4983      	ldr	r1, [pc, #524]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002244:	4b7e      	ldr	r3, [pc, #504]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	497b      	ldr	r1, [pc, #492]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002266:	4b76      	ldr	r3, [pc, #472]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002274:	4972      	ldr	r1, [pc, #456]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002288:	4b6d      	ldr	r3, [pc, #436]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	496a      	ldr	r1, [pc, #424]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022aa:	4b65      	ldr	r3, [pc, #404]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b8:	4961      	ldr	r1, [pc, #388]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022da:	4959      	ldr	r1, [pc, #356]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ee:	4b54      	ldr	r3, [pc, #336]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022fc:	4950      	ldr	r1, [pc, #320]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002310:	4b4b      	ldr	r3, [pc, #300]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002316:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231e:	4948      	ldr	r1, [pc, #288]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002332:	4b43      	ldr	r3, [pc, #268]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002338:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	493f      	ldr	r1, [pc, #252]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d028      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002354:	4b3a      	ldr	r3, [pc, #232]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002362:	4937      	ldr	r1, [pc, #220]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800236e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002372:	d106      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002374:	4b32      	ldr	r3, [pc, #200]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a31      	ldr	r2, [pc, #196]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800237e:	60d3      	str	r3, [r2, #12]
 8002380:	e011      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002386:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800238a:	d10c      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3304      	adds	r3, #4
 8002390:	2101      	movs	r1, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f8c8 	bl	8002528 <RCCEx_PLLSAI1_Config>
 8002398:	4603      	mov	r3, r0
 800239a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023a2:	7cfb      	ldrb	r3, [r7, #19]
 80023a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d028      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023b2:	4b23      	ldr	r3, [pc, #140]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c0:	491f      	ldr	r1, [pc, #124]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023d0:	d106      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023dc:	60d3      	str	r3, [r2, #12]
 80023de:	e011      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023e8:	d10c      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2101      	movs	r1, #1
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f899 	bl	8002528 <RCCEx_PLLSAI1_Config>
 80023f6:	4603      	mov	r3, r0
 80023f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d02b      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002410:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002416:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241e:	4908      	ldr	r1, [pc, #32]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800242a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800242e:	d109      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002430:	4b03      	ldr	r3, [pc, #12]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a02      	ldr	r2, [pc, #8]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800243a:	60d3      	str	r3, [r2, #12]
 800243c:	e014      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002448:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800244c:	d10c      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3304      	adds	r3, #4
 8002452:	2101      	movs	r1, #1
 8002454:	4618      	mov	r0, r3
 8002456:	f000 f867 	bl	8002528 <RCCEx_PLLSAI1_Config>
 800245a:	4603      	mov	r3, r0
 800245c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d02f      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002474:	4b2b      	ldr	r3, [pc, #172]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002482:	4928      	ldr	r1, [pc, #160]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800248e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002492:	d10d      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3304      	adds	r3, #4
 8002498:	2102      	movs	r1, #2
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f844 	bl	8002528 <RCCEx_PLLSAI1_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d014      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024aa:	7cfb      	ldrb	r3, [r7, #19]
 80024ac:	74bb      	strb	r3, [r7, #18]
 80024ae:	e011      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3320      	adds	r3, #32
 80024be:	2102      	movs	r1, #2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f925 	bl	8002710 <RCCEx_PLLSAI2_Config>
 80024c6:	4603      	mov	r3, r0
 80024c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ca:	7cfb      	ldrb	r3, [r7, #19]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024e0:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024ee:	490d      	ldr	r1, [pc, #52]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002502:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002508:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002512:	4904      	ldr	r1, [pc, #16]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800251a:	7cbb      	ldrb	r3, [r7, #18]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000

08002528 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002536:	4b75      	ldr	r3, [pc, #468]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d018      	beq.n	8002574 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002542:	4b72      	ldr	r3, [pc, #456]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0203 	and.w	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d10d      	bne.n	800256e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
       ||
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800255a:	4b6c      	ldr	r3, [pc, #432]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
       ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d047      	beq.n	80025fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e044      	b.n	80025fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d018      	beq.n	80025ae <RCCEx_PLLSAI1_Config+0x86>
 800257c:	2b03      	cmp	r3, #3
 800257e:	d825      	bhi.n	80025cc <RCCEx_PLLSAI1_Config+0xa4>
 8002580:	2b01      	cmp	r3, #1
 8002582:	d002      	beq.n	800258a <RCCEx_PLLSAI1_Config+0x62>
 8002584:	2b02      	cmp	r3, #2
 8002586:	d009      	beq.n	800259c <RCCEx_PLLSAI1_Config+0x74>
 8002588:	e020      	b.n	80025cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800258a:	4b60      	ldr	r3, [pc, #384]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11d      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259a:	e01a      	b.n	80025d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800259c:	4b5b      	ldr	r3, [pc, #364]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d116      	bne.n	80025d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ac:	e013      	b.n	80025d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025ae:	4b57      	ldr	r3, [pc, #348]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ba:	4b54      	ldr	r3, [pc, #336]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025ca:	e006      	b.n	80025da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
      break;
 80025d0:	e004      	b.n	80025dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025d2:	bf00      	nop
 80025d4:	e002      	b.n	80025dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025d6:	bf00      	nop
 80025d8:	e000      	b.n	80025dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025da:	bf00      	nop
    }

    if(status == HAL_OK)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10d      	bne.n	80025fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025e2:	4b4a      	ldr	r3, [pc, #296]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	430b      	orrs	r3, r1
 80025f8:	4944      	ldr	r1, [pc, #272]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d17d      	bne.n	8002700 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002604:	4b41      	ldr	r3, [pc, #260]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a40      	ldr	r2, [pc, #256]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 800260a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800260e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002610:	f7fe fb2a 	bl	8000c68 <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002616:	e009      	b.n	800262c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002618:	f7fe fb26 	bl	8000c68 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d902      	bls.n	800262c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	73fb      	strb	r3, [r7, #15]
        break;
 800262a:	e005      	b.n	8002638 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800262c:	4b37      	ldr	r3, [pc, #220]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ef      	bne.n	8002618 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d160      	bne.n	8002700 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d111      	bne.n	8002668 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002644:	4b31      	ldr	r3, [pc, #196]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800264c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6892      	ldr	r2, [r2, #8]
 8002654:	0211      	lsls	r1, r2, #8
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	0912      	lsrs	r2, r2, #4
 800265c:	0452      	lsls	r2, r2, #17
 800265e:	430a      	orrs	r2, r1
 8002660:	492a      	ldr	r1, [pc, #168]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	610b      	str	r3, [r1, #16]
 8002666:	e027      	b.n	80026b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d112      	bne.n	8002694 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800266e:	4b27      	ldr	r3, [pc, #156]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002676:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6892      	ldr	r2, [r2, #8]
 800267e:	0211      	lsls	r1, r2, #8
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6912      	ldr	r2, [r2, #16]
 8002684:	0852      	lsrs	r2, r2, #1
 8002686:	3a01      	subs	r2, #1
 8002688:	0552      	lsls	r2, r2, #21
 800268a:	430a      	orrs	r2, r1
 800268c:	491f      	ldr	r1, [pc, #124]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	610b      	str	r3, [r1, #16]
 8002692:	e011      	b.n	80026b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002694:	4b1d      	ldr	r3, [pc, #116]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800269c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6952      	ldr	r2, [r2, #20]
 80026aa:	0852      	lsrs	r2, r2, #1
 80026ac:	3a01      	subs	r2, #1
 80026ae:	0652      	lsls	r2, r2, #25
 80026b0:	430a      	orrs	r2, r1
 80026b2:	4916      	ldr	r1, [pc, #88]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026b8:	4b14      	ldr	r3, [pc, #80]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a13      	ldr	r2, [pc, #76]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe fad0 	bl	8000c68 <HAL_GetTick>
 80026c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ca:	e009      	b.n	80026e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026cc:	f7fe facc 	bl	8000c68 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d902      	bls.n	80026e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	73fb      	strb	r3, [r7, #15]
          break;
 80026de:	e005      	b.n	80026ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026e0:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026f2:	4b06      	ldr	r3, [pc, #24]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	4904      	ldr	r1, [pc, #16]	@ (800270c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800271e:	4b6a      	ldr	r3, [pc, #424]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d018      	beq.n	800275c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800272a:	4b67      	ldr	r3, [pc, #412]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0203 	and.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d10d      	bne.n	8002756 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
       ||
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002742:	4b61      	ldr	r3, [pc, #388]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
       ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d047      	beq.n	80027e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	e044      	b.n	80027e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d018      	beq.n	8002796 <RCCEx_PLLSAI2_Config+0x86>
 8002764:	2b03      	cmp	r3, #3
 8002766:	d825      	bhi.n	80027b4 <RCCEx_PLLSAI2_Config+0xa4>
 8002768:	2b01      	cmp	r3, #1
 800276a:	d002      	beq.n	8002772 <RCCEx_PLLSAI2_Config+0x62>
 800276c:	2b02      	cmp	r3, #2
 800276e:	d009      	beq.n	8002784 <RCCEx_PLLSAI2_Config+0x74>
 8002770:	e020      	b.n	80027b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002772:	4b55      	ldr	r3, [pc, #340]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d11d      	bne.n	80027ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002782:	e01a      	b.n	80027ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002784:	4b50      	ldr	r3, [pc, #320]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800278c:	2b00      	cmp	r3, #0
 800278e:	d116      	bne.n	80027be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002794:	e013      	b.n	80027be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002796:	4b4c      	ldr	r3, [pc, #304]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10f      	bne.n	80027c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027a2:	4b49      	ldr	r3, [pc, #292]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027b2:	e006      	b.n	80027c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      break;
 80027b8:	e004      	b.n	80027c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ba:	bf00      	nop
 80027bc:	e002      	b.n	80027c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027be:	bf00      	nop
 80027c0:	e000      	b.n	80027c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10d      	bne.n	80027e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ca:	4b3f      	ldr	r3, [pc, #252]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6819      	ldr	r1, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	430b      	orrs	r3, r1
 80027e0:	4939      	ldr	r1, [pc, #228]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d167      	bne.n	80028bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027ec:	4b36      	ldr	r3, [pc, #216]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a35      	ldr	r2, [pc, #212]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f8:	f7fe fa36 	bl	8000c68 <HAL_GetTick>
 80027fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027fe:	e009      	b.n	8002814 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002800:	f7fe fa32 	bl	8000c68 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d902      	bls.n	8002814 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	73fb      	strb	r3, [r7, #15]
        break;
 8002812:	e005      	b.n	8002820 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002814:	4b2c      	ldr	r3, [pc, #176]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1ef      	bne.n	8002800 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d14a      	bne.n	80028bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d111      	bne.n	8002850 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800282c:	4b26      	ldr	r3, [pc, #152]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002834:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6892      	ldr	r2, [r2, #8]
 800283c:	0211      	lsls	r1, r2, #8
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68d2      	ldr	r2, [r2, #12]
 8002842:	0912      	lsrs	r2, r2, #4
 8002844:	0452      	lsls	r2, r2, #17
 8002846:	430a      	orrs	r2, r1
 8002848:	491f      	ldr	r1, [pc, #124]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284a:	4313      	orrs	r3, r2
 800284c:	614b      	str	r3, [r1, #20]
 800284e:	e011      	b.n	8002874 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002850:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002858:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6892      	ldr	r2, [r2, #8]
 8002860:	0211      	lsls	r1, r2, #8
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6912      	ldr	r2, [r2, #16]
 8002866:	0852      	lsrs	r2, r2, #1
 8002868:	3a01      	subs	r2, #1
 800286a:	0652      	lsls	r2, r2, #25
 800286c:	430a      	orrs	r2, r1
 800286e:	4916      	ldr	r1, [pc, #88]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002870:	4313      	orrs	r3, r2
 8002872:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002874:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a13      	ldr	r2, [pc, #76]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800287e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7fe f9f2 	bl	8000c68 <HAL_GetTick>
 8002884:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002886:	e009      	b.n	800289c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002888:	f7fe f9ee 	bl	8000c68 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d902      	bls.n	800289c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	73fb      	strb	r3, [r7, #15]
          break;
 800289a:	e005      	b.n	80028a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800289c:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ef      	beq.n	8002888 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	4904      	ldr	r1, [pc, #16]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e040      	b.n	8002960 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe f83e 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	@ 0x24
 80028f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fc32 	bl	800317c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f977 	bl	8002c0c <UART_SetConfig>
 800291e:	4603      	mov	r3, r0
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e01b      	b.n	8002960 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fcb1 	bl	80032c0 <UART_CheckIdleState>
 800295e:	4603      	mov	r3, r0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	@ 0x28
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800297c:	2b20      	cmp	r3, #32
 800297e:	d177      	bne.n	8002a70 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_UART_Transmit+0x24>
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e070      	b.n	8002a72 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2221      	movs	r2, #33	@ 0x21
 800299c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800299e:	f7fe f963 	bl	8000c68 <HAL_GetTick>
 80029a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	88fa      	ldrh	r2, [r7, #6]
 80029a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	88fa      	ldrh	r2, [r7, #6]
 80029b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029bc:	d108      	bne.n	80029d0 <HAL_UART_Transmit+0x68>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d104      	bne.n	80029d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e003      	b.n	80029d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029d8:	e02f      	b.n	8002a3a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2180      	movs	r1, #128	@ 0x80
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fd13 	bl	8003410 <UART_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e03b      	b.n	8002a72 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	881a      	ldrh	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a0c:	b292      	uxth	r2, r2
 8002a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	3302      	adds	r3, #2
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	e007      	b.n	8002a28 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	781a      	ldrb	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3301      	adds	r3, #1
 8002a26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1c9      	bne.n	80029da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2140      	movs	r1, #64	@ 0x40
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fcdd 	bl	8003410 <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d004      	beq.n	8002a66 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e005      	b.n	8002a72 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b08a      	sub	sp, #40	@ 0x28
 8002a7e:	af02      	add	r7, sp, #8
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	4613      	mov	r3, r2
 8002a88:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	f040 80b6 	bne.w	8002c02 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_UART_Receive+0x28>
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0ae      	b.n	8002c04 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2222      	movs	r2, #34	@ 0x22
 8002ab2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002abc:	f7fe f8d4 	bl	8000c68 <HAL_GetTick>
 8002ac0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	88fa      	ldrh	r2, [r7, #6]
 8002ace:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ada:	d10e      	bne.n	8002afa <HAL_UART_Receive+0x80>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <HAL_UART_Receive+0x76>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002aea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002aee:	e02d      	b.n	8002b4c <HAL_UART_Receive+0xd2>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	22ff      	movs	r2, #255	@ 0xff
 8002af4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002af8:	e028      	b.n	8002b4c <HAL_UART_Receive+0xd2>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10d      	bne.n	8002b1e <HAL_UART_Receive+0xa4>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <HAL_UART_Receive+0x9a>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	22ff      	movs	r2, #255	@ 0xff
 8002b0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b12:	e01b      	b.n	8002b4c <HAL_UART_Receive+0xd2>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	227f      	movs	r2, #127	@ 0x7f
 8002b18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b1c:	e016      	b.n	8002b4c <HAL_UART_Receive+0xd2>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b26:	d10d      	bne.n	8002b44 <HAL_UART_Receive+0xca>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <HAL_UART_Receive+0xc0>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	227f      	movs	r2, #127	@ 0x7f
 8002b34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b38:	e008      	b.n	8002b4c <HAL_UART_Receive+0xd2>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	223f      	movs	r2, #63	@ 0x3f
 8002b3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b42:	e003      	b.n	8002b4c <HAL_UART_Receive+0xd2>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002b52:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b5c:	d108      	bne.n	8002b70 <HAL_UART_Receive+0xf6>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d104      	bne.n	8002b70 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	e003      	b.n	8002b78 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b78:	e037      	b.n	8002bea <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2200      	movs	r2, #0
 8002b82:	2120      	movs	r1, #32
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fc43 	bl	8003410 <UART_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e033      	b.n	8002c04 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10c      	bne.n	8002bbc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	8a7b      	ldrh	r3, [r7, #18]
 8002bac:	4013      	ands	r3, r2
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	e00d      	b.n	8002bd8 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	8a7b      	ldrh	r3, [r7, #18]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	4013      	ands	r3, r2
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1c1      	bne.n	8002b7a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c10:	b08a      	sub	sp, #40	@ 0x28
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4ba4      	ldr	r3, [pc, #656]	@ (8002ecc <UART_SetConfig+0x2c0>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a99      	ldr	r2, [pc, #612]	@ (8002ed0 <UART_SetConfig+0x2c4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d004      	beq.n	8002c78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c74:	4313      	orrs	r3, r2
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a90      	ldr	r2, [pc, #576]	@ (8002ed4 <UART_SetConfig+0x2c8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d126      	bne.n	8002ce4 <UART_SetConfig+0xd8>
 8002c96:	4b90      	ldr	r3, [pc, #576]	@ (8002ed8 <UART_SetConfig+0x2cc>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d81b      	bhi.n	8002cdc <UART_SetConfig+0xd0>
 8002ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cac <UART_SetConfig+0xa0>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002ccd 	.word	0x08002ccd
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002cd5 	.word	0x08002cd5
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cc2:	e116      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cca:	e112      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cd2:	e10e      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cda:	e10a      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002cdc:	2310      	movs	r3, #16
 8002cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ce2:	e106      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a7c      	ldr	r2, [pc, #496]	@ (8002edc <UART_SetConfig+0x2d0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d138      	bne.n	8002d60 <UART_SetConfig+0x154>
 8002cee:	4b7a      	ldr	r3, [pc, #488]	@ (8002ed8 <UART_SetConfig+0x2cc>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b0c      	cmp	r3, #12
 8002cfa:	d82d      	bhi.n	8002d58 <UART_SetConfig+0x14c>
 8002cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002d04 <UART_SetConfig+0xf8>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d39 	.word	0x08002d39
 8002d08:	08002d59 	.word	0x08002d59
 8002d0c:	08002d59 	.word	0x08002d59
 8002d10:	08002d59 	.word	0x08002d59
 8002d14:	08002d49 	.word	0x08002d49
 8002d18:	08002d59 	.word	0x08002d59
 8002d1c:	08002d59 	.word	0x08002d59
 8002d20:	08002d59 	.word	0x08002d59
 8002d24:	08002d41 	.word	0x08002d41
 8002d28:	08002d59 	.word	0x08002d59
 8002d2c:	08002d59 	.word	0x08002d59
 8002d30:	08002d59 	.word	0x08002d59
 8002d34:	08002d51 	.word	0x08002d51
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d3e:	e0d8      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002d40:	2302      	movs	r3, #2
 8002d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d46:	e0d4      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002d48:	2304      	movs	r3, #4
 8002d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d4e:	e0d0      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002d50:	2308      	movs	r3, #8
 8002d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d56:	e0cc      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002d58:	2310      	movs	r3, #16
 8002d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d5e:	e0c8      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a5e      	ldr	r2, [pc, #376]	@ (8002ee0 <UART_SetConfig+0x2d4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d125      	bne.n	8002db6 <UART_SetConfig+0x1aa>
 8002d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ed8 <UART_SetConfig+0x2cc>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d74:	2b30      	cmp	r3, #48	@ 0x30
 8002d76:	d016      	beq.n	8002da6 <UART_SetConfig+0x19a>
 8002d78:	2b30      	cmp	r3, #48	@ 0x30
 8002d7a:	d818      	bhi.n	8002dae <UART_SetConfig+0x1a2>
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d00a      	beq.n	8002d96 <UART_SetConfig+0x18a>
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d814      	bhi.n	8002dae <UART_SetConfig+0x1a2>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <UART_SetConfig+0x182>
 8002d88:	2b10      	cmp	r3, #16
 8002d8a:	d008      	beq.n	8002d9e <UART_SetConfig+0x192>
 8002d8c:	e00f      	b.n	8002dae <UART_SetConfig+0x1a2>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d94:	e0ad      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002d96:	2302      	movs	r3, #2
 8002d98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d9c:	e0a9      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002d9e:	2304      	movs	r3, #4
 8002da0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002da4:	e0a5      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002da6:	2308      	movs	r3, #8
 8002da8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dac:	e0a1      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002dae:	2310      	movs	r3, #16
 8002db0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002db4:	e09d      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a4a      	ldr	r2, [pc, #296]	@ (8002ee4 <UART_SetConfig+0x2d8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d125      	bne.n	8002e0c <UART_SetConfig+0x200>
 8002dc0:	4b45      	ldr	r3, [pc, #276]	@ (8002ed8 <UART_SetConfig+0x2cc>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002dca:	2bc0      	cmp	r3, #192	@ 0xc0
 8002dcc:	d016      	beq.n	8002dfc <UART_SetConfig+0x1f0>
 8002dce:	2bc0      	cmp	r3, #192	@ 0xc0
 8002dd0:	d818      	bhi.n	8002e04 <UART_SetConfig+0x1f8>
 8002dd2:	2b80      	cmp	r3, #128	@ 0x80
 8002dd4:	d00a      	beq.n	8002dec <UART_SetConfig+0x1e0>
 8002dd6:	2b80      	cmp	r3, #128	@ 0x80
 8002dd8:	d814      	bhi.n	8002e04 <UART_SetConfig+0x1f8>
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <UART_SetConfig+0x1d8>
 8002dde:	2b40      	cmp	r3, #64	@ 0x40
 8002de0:	d008      	beq.n	8002df4 <UART_SetConfig+0x1e8>
 8002de2:	e00f      	b.n	8002e04 <UART_SetConfig+0x1f8>
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dea:	e082      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002dec:	2302      	movs	r3, #2
 8002dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002df2:	e07e      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002df4:	2304      	movs	r3, #4
 8002df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dfa:	e07a      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e02:	e076      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002e04:	2310      	movs	r3, #16
 8002e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e0a:	e072      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a35      	ldr	r2, [pc, #212]	@ (8002ee8 <UART_SetConfig+0x2dc>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d12a      	bne.n	8002e6c <UART_SetConfig+0x260>
 8002e16:	4b30      	ldr	r3, [pc, #192]	@ (8002ed8 <UART_SetConfig+0x2cc>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e24:	d01a      	beq.n	8002e5c <UART_SetConfig+0x250>
 8002e26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e2a:	d81b      	bhi.n	8002e64 <UART_SetConfig+0x258>
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e30:	d00c      	beq.n	8002e4c <UART_SetConfig+0x240>
 8002e32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e36:	d815      	bhi.n	8002e64 <UART_SetConfig+0x258>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <UART_SetConfig+0x238>
 8002e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e40:	d008      	beq.n	8002e54 <UART_SetConfig+0x248>
 8002e42:	e00f      	b.n	8002e64 <UART_SetConfig+0x258>
 8002e44:	2300      	movs	r3, #0
 8002e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e4a:	e052      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e52:	e04e      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002e54:	2304      	movs	r3, #4
 8002e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e5a:	e04a      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e62:	e046      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002e64:	2310      	movs	r3, #16
 8002e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e6a:	e042      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a17      	ldr	r2, [pc, #92]	@ (8002ed0 <UART_SetConfig+0x2c4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d13a      	bne.n	8002eec <UART_SetConfig+0x2e0>
 8002e76:	4b18      	ldr	r3, [pc, #96]	@ (8002ed8 <UART_SetConfig+0x2cc>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e84:	d01a      	beq.n	8002ebc <UART_SetConfig+0x2b0>
 8002e86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e8a:	d81b      	bhi.n	8002ec4 <UART_SetConfig+0x2b8>
 8002e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e90:	d00c      	beq.n	8002eac <UART_SetConfig+0x2a0>
 8002e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e96:	d815      	bhi.n	8002ec4 <UART_SetConfig+0x2b8>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <UART_SetConfig+0x298>
 8002e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea0:	d008      	beq.n	8002eb4 <UART_SetConfig+0x2a8>
 8002ea2:	e00f      	b.n	8002ec4 <UART_SetConfig+0x2b8>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eaa:	e022      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002eac:	2302      	movs	r3, #2
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb2:	e01e      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eba:	e01a      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002ebc:	2308      	movs	r3, #8
 8002ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ec2:	e016      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eca:	e012      	b.n	8002ef2 <UART_SetConfig+0x2e6>
 8002ecc:	efff69f3 	.word	0xefff69f3
 8002ed0:	40008000 	.word	0x40008000
 8002ed4:	40013800 	.word	0x40013800
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40004400 	.word	0x40004400
 8002ee0:	40004800 	.word	0x40004800
 8002ee4:	40004c00 	.word	0x40004c00
 8002ee8:	40005000 	.word	0x40005000
 8002eec:	2310      	movs	r3, #16
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a9f      	ldr	r2, [pc, #636]	@ (8003174 <UART_SetConfig+0x568>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d17a      	bne.n	8002ff2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002efc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d824      	bhi.n	8002f4e <UART_SetConfig+0x342>
 8002f04:	a201      	add	r2, pc, #4	@ (adr r2, 8002f0c <UART_SetConfig+0x300>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002f4f 	.word	0x08002f4f
 8002f14:	08002f39 	.word	0x08002f39
 8002f18:	08002f4f 	.word	0x08002f4f
 8002f1c:	08002f3f 	.word	0x08002f3f
 8002f20:	08002f4f 	.word	0x08002f4f
 8002f24:	08002f4f 	.word	0x08002f4f
 8002f28:	08002f4f 	.word	0x08002f4f
 8002f2c:	08002f47 	.word	0x08002f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f30:	f7fe ff84 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8002f34:	61f8      	str	r0, [r7, #28]
        break;
 8002f36:	e010      	b.n	8002f5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f38:	4b8f      	ldr	r3, [pc, #572]	@ (8003178 <UART_SetConfig+0x56c>)
 8002f3a:	61fb      	str	r3, [r7, #28]
        break;
 8002f3c:	e00d      	b.n	8002f5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f3e:	f7fe fee5 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8002f42:	61f8      	str	r0, [r7, #28]
        break;
 8002f44:	e009      	b.n	8002f5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f4a:	61fb      	str	r3, [r7, #28]
        break;
 8002f4c:	e005      	b.n	8002f5a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80fb 	beq.w	8003158 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d305      	bcc.n	8002f7e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d903      	bls.n	8002f86 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f84:	e0e8      	b.n	8003158 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	461c      	mov	r4, r3
 8002f8c:	4615      	mov	r5, r2
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	022b      	lsls	r3, r5, #8
 8002f98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f9c:	0222      	lsls	r2, r4, #8
 8002f9e:	68f9      	ldr	r1, [r7, #12]
 8002fa0:	6849      	ldr	r1, [r1, #4]
 8002fa2:	0849      	lsrs	r1, r1, #1
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	4688      	mov	r8, r1
 8002fa8:	4681      	mov	r9, r0
 8002faa:	eb12 0a08 	adds.w	sl, r2, r8
 8002fae:	eb43 0b09 	adc.w	fp, r3, r9
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fc0:	4650      	mov	r0, sl
 8002fc2:	4659      	mov	r1, fp
 8002fc4:	f7fd f904 	bl	80001d0 <__aeabi_uldivmod>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4613      	mov	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fd6:	d308      	bcc.n	8002fea <UART_SetConfig+0x3de>
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fde:	d204      	bcs.n	8002fea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	60da      	str	r2, [r3, #12]
 8002fe8:	e0b6      	b.n	8003158 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ff0:	e0b2      	b.n	8003158 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ffa:	d15e      	bne.n	80030ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003000:	2b08      	cmp	r3, #8
 8003002:	d828      	bhi.n	8003056 <UART_SetConfig+0x44a>
 8003004:	a201      	add	r2, pc, #4	@ (adr r2, 800300c <UART_SetConfig+0x400>)
 8003006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300a:	bf00      	nop
 800300c:	08003031 	.word	0x08003031
 8003010:	08003039 	.word	0x08003039
 8003014:	08003041 	.word	0x08003041
 8003018:	08003057 	.word	0x08003057
 800301c:	08003047 	.word	0x08003047
 8003020:	08003057 	.word	0x08003057
 8003024:	08003057 	.word	0x08003057
 8003028:	08003057 	.word	0x08003057
 800302c:	0800304f 	.word	0x0800304f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003030:	f7fe ff04 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8003034:	61f8      	str	r0, [r7, #28]
        break;
 8003036:	e014      	b.n	8003062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003038:	f7fe ff16 	bl	8001e68 <HAL_RCC_GetPCLK2Freq>
 800303c:	61f8      	str	r0, [r7, #28]
        break;
 800303e:	e010      	b.n	8003062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003040:	4b4d      	ldr	r3, [pc, #308]	@ (8003178 <UART_SetConfig+0x56c>)
 8003042:	61fb      	str	r3, [r7, #28]
        break;
 8003044:	e00d      	b.n	8003062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003046:	f7fe fe61 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 800304a:	61f8      	str	r0, [r7, #28]
        break;
 800304c:	e009      	b.n	8003062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800304e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003052:	61fb      	str	r3, [r7, #28]
        break;
 8003054:	e005      	b.n	8003062 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d077      	beq.n	8003158 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005a      	lsls	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	085b      	lsrs	r3, r3, #1
 8003072:	441a      	add	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b0f      	cmp	r3, #15
 8003082:	d916      	bls.n	80030b2 <UART_SetConfig+0x4a6>
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800308a:	d212      	bcs.n	80030b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	b29b      	uxth	r3, r3
 8003090:	f023 030f 	bic.w	r3, r3, #15
 8003094:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	b29b      	uxth	r3, r3
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	8afb      	ldrh	r3, [r7, #22]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	8afa      	ldrh	r2, [r7, #22]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	e052      	b.n	8003158 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030b8:	e04e      	b.n	8003158 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d827      	bhi.n	8003112 <UART_SetConfig+0x506>
 80030c2:	a201      	add	r2, pc, #4	@ (adr r2, 80030c8 <UART_SetConfig+0x4bc>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030ed 	.word	0x080030ed
 80030cc:	080030f5 	.word	0x080030f5
 80030d0:	080030fd 	.word	0x080030fd
 80030d4:	08003113 	.word	0x08003113
 80030d8:	08003103 	.word	0x08003103
 80030dc:	08003113 	.word	0x08003113
 80030e0:	08003113 	.word	0x08003113
 80030e4:	08003113 	.word	0x08003113
 80030e8:	0800310b 	.word	0x0800310b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ec:	f7fe fea6 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 80030f0:	61f8      	str	r0, [r7, #28]
        break;
 80030f2:	e014      	b.n	800311e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030f4:	f7fe feb8 	bl	8001e68 <HAL_RCC_GetPCLK2Freq>
 80030f8:	61f8      	str	r0, [r7, #28]
        break;
 80030fa:	e010      	b.n	800311e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003178 <UART_SetConfig+0x56c>)
 80030fe:	61fb      	str	r3, [r7, #28]
        break;
 8003100:	e00d      	b.n	800311e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003102:	f7fe fe03 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8003106:	61f8      	str	r0, [r7, #28]
        break;
 8003108:	e009      	b.n	800311e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800310a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800310e:	61fb      	str	r3, [r7, #28]
        break;
 8003110:	e005      	b.n	800311e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800311c:	bf00      	nop
    }

    if (pclk != 0U)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d019      	beq.n	8003158 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	085a      	lsrs	r2, r3, #1
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	441a      	add	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b0f      	cmp	r3, #15
 800313c:	d909      	bls.n	8003152 <UART_SetConfig+0x546>
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003144:	d205      	bcs.n	8003152 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	e002      	b.n	8003158 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003164:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003168:	4618      	mov	r0, r3
 800316a:	3728      	adds	r7, #40	@ 0x28
 800316c:	46bd      	mov	sp, r7
 800316e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003172:	bf00      	nop
 8003174:	40008000 	.word	0x40008000
 8003178:	00f42400 	.word	0x00f42400

0800317c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01a      	beq.n	8003292 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800327a:	d10a      	bne.n	8003292 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]
  }
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b098      	sub	sp, #96	@ 0x60
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032d0:	f7fd fcca 	bl	8000c68 <HAL_GetTick>
 80032d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d12e      	bne.n	8003342 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ec:	2200      	movs	r2, #0
 80032ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f88c 	bl	8003410 <UART_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d021      	beq.n	8003342 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003306:	e853 3f00 	ldrex	r3, [r3]
 800330a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800330c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003312:	653b      	str	r3, [r7, #80]	@ 0x50
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800331c:	647b      	str	r3, [r7, #68]	@ 0x44
 800331e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800332a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e6      	bne.n	80032fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e062      	b.n	8003408 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b04      	cmp	r3, #4
 800334e:	d149      	bne.n	80033e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003350:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003358:	2200      	movs	r2, #0
 800335a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f856 	bl	8003410 <UART_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d03c      	beq.n	80033e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	e853 3f00 	ldrex	r3, [r3]
 8003376:	623b      	str	r3, [r7, #32]
   return(result);
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800337e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003388:	633b      	str	r3, [r7, #48]	@ 0x30
 800338a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800338e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003390:	e841 2300 	strex	r3, r2, [r1]
 8003394:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e6      	bne.n	800336a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3308      	adds	r3, #8
 80033a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	e853 3f00 	ldrex	r3, [r3]
 80033aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3308      	adds	r3, #8
 80033ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033bc:	61fa      	str	r2, [r7, #28]
 80033be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	69b9      	ldr	r1, [r7, #24]
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	617b      	str	r3, [r7, #20]
   return(result);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e5      	bne.n	800339c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e011      	b.n	8003408 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3758      	adds	r7, #88	@ 0x58
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003420:	e04f      	b.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d04b      	beq.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fd fc1d 	bl	8000c68 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <UART_WaitOnFlagUntilTimeout+0x30>
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e04e      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d037      	beq.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b80      	cmp	r3, #128	@ 0x80
 8003456:	d034      	beq.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b40      	cmp	r3, #64	@ 0x40
 800345c:	d031      	beq.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b08      	cmp	r3, #8
 800346a:	d110      	bne.n	800348e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2208      	movs	r2, #8
 8003472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f838 	bl	80034ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2208      	movs	r2, #8
 800347e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e029      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800349c:	d111      	bne.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f81e 	bl	80034ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e00f      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69da      	ldr	r2, [r3, #28]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4013      	ands	r3, r2
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	bf0c      	ite	eq
 80034d2:	2301      	moveq	r3, #1
 80034d4:	2300      	movne	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d0a0      	beq.n	8003422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b095      	sub	sp, #84	@ 0x54
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fa:	e853 3f00 	ldrex	r3, [r3]
 80034fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003502:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003506:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003510:	643b      	str	r3, [r7, #64]	@ 0x40
 8003512:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003514:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003516:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003518:	e841 2300 	strex	r3, r2, [r1]
 800351c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800351e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e6      	bne.n	80034f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3308      	adds	r3, #8
 800352a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	e853 3f00 	ldrex	r3, [r3]
 8003532:	61fb      	str	r3, [r7, #28]
   return(result);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f023 0301 	bic.w	r3, r3, #1
 800353a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3308      	adds	r3, #8
 8003542:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003544:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003546:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003548:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800354a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800354c:	e841 2300 	strex	r3, r2, [r1]
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1e5      	bne.n	8003524 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355c:	2b01      	cmp	r3, #1
 800355e:	d118      	bne.n	8003592 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	e853 3f00 	ldrex	r3, [r3]
 800356c:	60bb      	str	r3, [r7, #8]
   return(result);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f023 0310 	bic.w	r3, r3, #16
 8003574:	647b      	str	r3, [r7, #68]	@ 0x44
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003582:	6979      	ldr	r1, [r7, #20]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	e841 2300 	strex	r3, r2, [r1]
 800358a:	613b      	str	r3, [r7, #16]
   return(result);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1e6      	bne.n	8003560 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035a6:	bf00      	nop
 80035a8:	3754      	adds	r7, #84	@ 0x54
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <__NVIC_SetPriority>:
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	db0a      	blt.n	80035de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	490c      	ldr	r1, [pc, #48]	@ (8003600 <__NVIC_SetPriority+0x4c>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	0112      	lsls	r2, r2, #4
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	440b      	add	r3, r1
 80035d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80035dc:	e00a      	b.n	80035f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4908      	ldr	r1, [pc, #32]	@ (8003604 <__NVIC_SetPriority+0x50>)
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	3b04      	subs	r3, #4
 80035ec:	0112      	lsls	r2, r2, #4
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	440b      	add	r3, r1
 80035f2:	761a      	strb	r2, [r3, #24]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000e100 	.word	0xe000e100
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800360c:	2100      	movs	r1, #0
 800360e:	f06f 0004 	mvn.w	r0, #4
 8003612:	f7ff ffcf 	bl	80035b4 <__NVIC_SetPriority>
#endif
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003622:	f3ef 8305 	mrs	r3, IPSR
 8003626:	603b      	str	r3, [r7, #0]
  return(result);
 8003628:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800362e:	f06f 0305 	mvn.w	r3, #5
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	e00c      	b.n	8003650 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003636:	4b0a      	ldr	r3, [pc, #40]	@ (8003660 <osKernelInitialize+0x44>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800363e:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <osKernelInitialize+0x44>)
 8003640:	2201      	movs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003644:	2300      	movs	r3, #0
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	e002      	b.n	8003650 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295
 800364e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003650:	687b      	ldr	r3, [r7, #4]
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000128 	.word	0x20000128

08003664 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800366a:	f3ef 8305 	mrs	r3, IPSR
 800366e:	603b      	str	r3, [r7, #0]
  return(result);
 8003670:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003676:	f06f 0305 	mvn.w	r3, #5
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	e010      	b.n	80036a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800367e:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <osKernelStart+0x48>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d109      	bne.n	800369a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003686:	f7ff ffbf 	bl	8003608 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800368a:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <osKernelStart+0x48>)
 800368c:	2202      	movs	r2, #2
 800368e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003690:	f001 fb06 	bl	8004ca0 <vTaskStartScheduler>
      stat = osOK;
 8003694:	2300      	movs	r3, #0
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	e002      	b.n	80036a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800369a:	f04f 33ff 	mov.w	r3, #4294967295
 800369e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036a0:	687b      	ldr	r3, [r7, #4]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000128 	.word	0x20000128

080036b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08e      	sub	sp, #56	@ 0x38
 80036b4:	af04      	add	r7, sp, #16
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036c0:	f3ef 8305 	mrs	r3, IPSR
 80036c4:	617b      	str	r3, [r7, #20]
  return(result);
 80036c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d17e      	bne.n	80037ca <osThreadNew+0x11a>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d07b      	beq.n	80037ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80036d2:	2380      	movs	r3, #128	@ 0x80
 80036d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80036d6:	2318      	movs	r3, #24
 80036d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d045      	beq.n	8003776 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <osThreadNew+0x48>
        name = attr->name;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <osThreadNew+0x6e>
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b38      	cmp	r3, #56	@ 0x38
 8003710:	d805      	bhi.n	800371e <osThreadNew+0x6e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <osThreadNew+0x72>
        return (NULL);
 800371e:	2300      	movs	r3, #0
 8003720:	e054      	b.n	80037cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	089b      	lsrs	r3, r3, #2
 8003730:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00e      	beq.n	8003758 <osThreadNew+0xa8>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b5b      	cmp	r3, #91	@ 0x5b
 8003740:	d90a      	bls.n	8003758 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003746:	2b00      	cmp	r3, #0
 8003748:	d006      	beq.n	8003758 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <osThreadNew+0xa8>
        mem = 1;
 8003752:	2301      	movs	r3, #1
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	e010      	b.n	800377a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10c      	bne.n	800377a <osThreadNew+0xca>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d108      	bne.n	800377a <osThreadNew+0xca>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <osThreadNew+0xca>
          mem = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	e001      	b.n	800377a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d110      	bne.n	80037a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003788:	9202      	str	r2, [sp, #8]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6a3a      	ldr	r2, [r7, #32]
 8003794:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f001 f8dc 	bl	8004954 <xTaskCreateStatic>
 800379c:	4603      	mov	r3, r0
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	e013      	b.n	80037ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d110      	bne.n	80037ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	f107 0310 	add.w	r3, r7, #16
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f001 f92a 	bl	8004a14 <xTaskCreate>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d001      	beq.n	80037ca <osThreadNew+0x11a>
            hTask = NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037ca:	693b      	ldr	r3, [r7, #16]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3728      	adds	r7, #40	@ 0x28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037e0:	f3ef 8305 	mrs	r3, IPSR
 80037e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80037e6:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d12d      	bne.n	8003848 <osEventFlagsNew+0x74>
    mem = -1;
 80037ec:	f04f 33ff 	mov.w	r3, #4294967295
 80037f0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d015      	beq.n	8003824 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d006      	beq.n	800380e <osEventFlagsNew+0x3a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b1f      	cmp	r3, #31
 8003806:	d902      	bls.n	800380e <osEventFlagsNew+0x3a>
        mem = 1;
 8003808:	2301      	movs	r3, #1
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	e00c      	b.n	8003828 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d108      	bne.n	8003828 <osEventFlagsNew+0x54>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <osEventFlagsNew+0x54>
          mem = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	e001      	b.n	8003828 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d106      	bne.n	800383c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f8ea 	bl	8003a0c <xEventGroupCreateStatic>
 8003838:	6178      	str	r0, [r7, #20]
 800383a:	e005      	b.n	8003848 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d102      	bne.n	8003848 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8003842:	f000 f91c 	bl	8003a7e <xEventGroupCreate>
 8003846:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003848:	697b      	ldr	r3, [r7, #20]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <osEventFlagsSet+0x1c>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800386e:	d303      	bcc.n	8003878 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8003870:	f06f 0303 	mvn.w	r3, #3
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	e028      	b.n	80038ca <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003878:	f3ef 8305 	mrs	r3, IPSR
 800387c:	60fb      	str	r3, [r7, #12]
  return(result);
 800387e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01d      	beq.n	80038c0 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8003884:	2300      	movs	r3, #0
 8003886:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8003888:	f107 0308 	add.w	r3, r7, #8
 800388c:	461a      	mov	r2, r3
 800388e:	6839      	ldr	r1, [r7, #0]
 8003890:	6938      	ldr	r0, [r7, #16]
 8003892:	f000 fa9d 	bl	8003dd0 <xEventGroupSetBitsFromISR>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 800389c:	f06f 0302 	mvn.w	r3, #2
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	e012      	b.n	80038ca <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00d      	beq.n	80038ca <osEventFlagsSet+0x76>
 80038ae:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <osEventFlagsSet+0x80>)
 80038b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	e004      	b.n	80038ca <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80038c0:	6839      	ldr	r1, [r7, #0]
 80038c2:	6938      	ldr	r0, [r7, #16]
 80038c4:	f000 f9c8 	bl	8003c58 <xEventGroupSetBits>
 80038c8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80038ca:	697b      	ldr	r3, [r7, #20]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08c      	sub	sp, #48	@ 0x30
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <osEventFlagsWait+0x20>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038f6:	d303      	bcc.n	8003900 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 80038f8:	f06f 0303 	mvn.w	r3, #3
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	e04b      	b.n	8003998 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003900:	f3ef 8305 	mrs	r3, IPSR
 8003904:	617b      	str	r3, [r7, #20]
  return(result);
 8003906:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 800390c:	f06f 0305 	mvn.w	r3, #5
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	e041      	b.n	8003998 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800391e:	2301      	movs	r3, #1
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
 8003922:	e001      	b.n	8003928 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8003924:	2300      	movs	r3, #0
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
 8003936:	e001      	b.n	800393c <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8003938:	2301      	movs	r3, #1
 800393a:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	6a3a      	ldr	r2, [r7, #32]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	69b8      	ldr	r0, [r7, #24]
 8003948:	f000 f8b4 	bl	8003ab4 <xEventGroupWaitBits>
 800394c:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d010      	beq.n	800397a <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4013      	ands	r3, r2
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	429a      	cmp	r2, r3
 8003962:	d019      	beq.n	8003998 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 800396a:	f06f 0301 	mvn.w	r3, #1
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	e012      	b.n	8003998 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003972:	f06f 0302 	mvn.w	r3, #2
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	e00e      	b.n	8003998 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 800398a:	f06f 0301 	mvn.w	r3, #1
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	e002      	b.n	8003998 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003992:	f06f 0302 	mvn.w	r3, #2
 8003996:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8003998:	69fb      	ldr	r3, [r7, #28]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3728      	adds	r7, #40	@ 0x28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a07      	ldr	r2, [pc, #28]	@ (80039d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80039b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4a06      	ldr	r2, [pc, #24]	@ (80039d4 <vApplicationGetIdleTaskMemory+0x30>)
 80039ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2280      	movs	r2, #128	@ 0x80
 80039c0:	601a      	str	r2, [r3, #0]
}
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	2000012c 	.word	0x2000012c
 80039d4:	20000188 	.word	0x20000188

080039d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a07      	ldr	r2, [pc, #28]	@ (8003a04 <vApplicationGetTimerTaskMemory+0x2c>)
 80039e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4a06      	ldr	r2, [pc, #24]	@ (8003a08 <vApplicationGetTimerTaskMemory+0x30>)
 80039ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039f6:	601a      	str	r2, [r3, #0]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	20000388 	.word	0x20000388
 8003a08:	200003e4 	.word	0x200003e4

08003a0c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10b      	bne.n	8003a32 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	e7fd      	b.n	8003a2e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003a32:	2320      	movs	r3, #32
 8003a34:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d00b      	beq.n	8003a54 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	60fb      	str	r3, [r7, #12]
}
 8003a4e:	bf00      	nop
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	3304      	adds	r3, #4
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 f9c5 	bl	8003df8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2201      	movs	r2, #1
 8003a72:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8003a74:	697b      	ldr	r3, [r7, #20]
	}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003a84:	2020      	movs	r0, #32
 8003a86:	f002 fcc1 	bl	800640c <pvPortMalloc>
 8003a8a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f9ab 	bl	8003df8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003aa8:	687b      	ldr	r3, [r7, #4]
	}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b090      	sub	sp, #64	@ 0x40
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10b      	bne.n	8003aec <xEventGroupWaitBits+0x38>
	__asm volatile
 8003ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	623b      	str	r3, [r7, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	bf00      	nop
 8003aea:	e7fd      	b.n	8003ae8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003af2:	d30b      	bcc.n	8003b0c <xEventGroupWaitBits+0x58>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	61fb      	str	r3, [r7, #28]
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10b      	bne.n	8003b2a <xEventGroupWaitBits+0x76>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	61bb      	str	r3, [r7, #24]
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	e7fd      	b.n	8003b26 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b2a:	f001 fda9 	bl	8005680 <xTaskGetSchedulerState>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <xEventGroupWaitBits+0x86>
 8003b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <xEventGroupWaitBits+0x8a>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <xEventGroupWaitBits+0x8c>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <xEventGroupWaitBits+0xa8>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	617b      	str	r3, [r7, #20]
}
 8003b56:	bf00      	nop
 8003b58:	bf00      	nop
 8003b5a:	e7fd      	b.n	8003b58 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8003b5c:	f001 f908 	bl	8004d70 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b6c:	f000 f90d 	bl	8003d8a <prvTestWaitCondition>
 8003b70:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8003b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d028      	beq.n	8003bd8 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	401a      	ands	r2, r3
 8003b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e020      	b.n	8003bd8 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d104      	bne.n	8003ba6 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ba4:	e018      	b.n	8003bd8 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bbc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc4:	1d18      	adds	r0, r3, #4
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f001 fac8 	bl	8005164 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003bd8:	f001 f8d8 	bl	8004d8c <xTaskResumeAll>
 8003bdc:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003bde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d031      	beq.n	8003c48 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d107      	bne.n	8003bfa <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8003bea:	4b1a      	ldr	r3, [pc, #104]	@ (8003c54 <xEventGroupWaitBits+0x1a0>)
 8003bec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003bfa:	f001 fdcf 	bl	800579c <uxTaskResetEventItemValue>
 8003bfe:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d11a      	bne.n	8003c40 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8003c0a:	f002 fadd 	bl	80061c8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003c1a:	f000 f8b6 	bl	8003d8a <prvTestWaitCondition>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d009      	beq.n	8003c38 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d006      	beq.n	8003c38 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	401a      	ands	r2, r3
 8003c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c36:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8003c3c:	f002 faf6 	bl	800622c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c42:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3740      	adds	r7, #64	@ 0x40
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	e000ed04 	.word	0xe000ed04

08003c58 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08e      	sub	sp, #56	@ 0x38
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003c62:	2300      	movs	r3, #0
 8003c64:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10b      	bne.n	8003c8c <xEventGroupSetBits+0x34>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	613b      	str	r3, [r7, #16]
}
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c92:	d30b      	bcc.n	8003cac <xEventGroupSetBits+0x54>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	60fb      	str	r3, [r7, #12]
}
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	e7fd      	b.n	8003ca8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cae:	3304      	adds	r3, #4
 8003cb0:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003cb8:	f001 f85a 	bl	8004d70 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003cce:	e03c      	b.n	8003d4a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003ce6:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003cee:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d108      	bne.n	8003d0c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00b      	beq.n	8003d1e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8003d06:	2301      	movs	r3, #1
 8003d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d0a:	e008      	b.n	8003d1e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d101      	bne.n	8003d1e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d010      	beq.n	8003d46 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003d42:	f001 fadd 	bl	8005300 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8003d4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d1be      	bne.n	8003cd0 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	401a      	ands	r2, r3
 8003d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8003d60:	f001 f814 	bl	8004d8c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8003d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3738      	adds	r7, #56	@ 0x38
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8003d7a:	6839      	ldr	r1, [r7, #0]
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff ff6b 	bl	8003c58 <xEventGroupSetBits>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b087      	sub	sp, #28
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003daa:	2301      	movs	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e007      	b.n	8003dc0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	4013      	ands	r3, r2
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d101      	bne.n	8003dc0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003dc0:	697b      	ldr	r3, [r7, #20]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	68f9      	ldr	r1, [r7, #12]
 8003de2:	4804      	ldr	r0, [pc, #16]	@ (8003df4 <xEventGroupSetBitsFromISR+0x24>)
 8003de4:	f002 f8a0 	bl	8005f28 <xTimerPendFunctionCallFromISR>
 8003de8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8003dea:	697b      	ldr	r3, [r7, #20]
	}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	08003d71 	.word	0x08003d71

08003df8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f103 0208 	add.w	r2, r3, #8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f103 0208 	add.w	r2, r3, #8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f103 0208 	add.w	r2, r3, #8
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	601a      	str	r2, [r3, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d103      	bne.n	8003eba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	e00c      	b.n	8003ed4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3308      	adds	r3, #8
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e002      	b.n	8003ec8 <vListInsert+0x2e>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d2f6      	bcs.n	8003ec2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	601a      	str	r2, [r3, #0]
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6892      	ldr	r2, [r2, #8]
 8003f22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6852      	ldr	r2, [r2, #4]
 8003f2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d103      	bne.n	8003f40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	1e5a      	subs	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10b      	bne.n	8003f8c <xQueueGenericReset+0x2c>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	60bb      	str	r3, [r7, #8]
}
 8003f86:	bf00      	nop
 8003f88:	bf00      	nop
 8003f8a:	e7fd      	b.n	8003f88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f8c:	f002 f91c 	bl	80061c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f98:	68f9      	ldr	r1, [r7, #12]
 8003f9a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	441a      	add	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	68f9      	ldr	r1, [r7, #12]
 8003fc0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	441a      	add	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	22ff      	movs	r2, #255	@ 0xff
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	22ff      	movs	r2, #255	@ 0xff
 8003fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d114      	bne.n	800400c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01a      	beq.n	8004020 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3310      	adds	r3, #16
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 f922 	bl	8005238 <xTaskRemoveFromEventList>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d012      	beq.n	8004020 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8004030 <xQueueGenericReset+0xd0>)
 8003ffc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	e009      	b.n	8004020 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3310      	adds	r3, #16
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fef1 	bl	8003df8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3324      	adds	r3, #36	@ 0x24
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff feec 	bl	8003df8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004020:	f002 f904 	bl	800622c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004024:	2301      	movs	r3, #1
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	e000ed04 	.word	0xe000ed04

08004034 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08e      	sub	sp, #56	@ 0x38
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	e7fd      	b.n	800405c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	e7fd      	b.n	800407a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <xQueueGenericCreateStatic+0x56>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <xQueueGenericCreateStatic+0x5a>
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <xQueueGenericCreateStatic+0x5c>
 800408e:	2300      	movs	r3, #0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10b      	bne.n	80040ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	623b      	str	r3, [r7, #32]
}
 80040a6:	bf00      	nop
 80040a8:	bf00      	nop
 80040aa:	e7fd      	b.n	80040a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <xQueueGenericCreateStatic+0x84>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <xQueueGenericCreateStatic+0x88>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <xQueueGenericCreateStatic+0x8a>
 80040bc:	2300      	movs	r3, #0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10b      	bne.n	80040da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	61fb      	str	r3, [r7, #28]
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	e7fd      	b.n	80040d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040da:	2350      	movs	r3, #80	@ 0x50
 80040dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b50      	cmp	r3, #80	@ 0x50
 80040e2:	d00b      	beq.n	80040fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	61bb      	str	r3, [r7, #24]
}
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	e7fd      	b.n	80040f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00d      	beq.n	8004124 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004110:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f805 	bl	800412e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004126:	4618      	mov	r0, r3
 8004128:	3730      	adds	r7, #48	@ 0x30
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e002      	b.n	8004150 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800415c:	2101      	movs	r1, #1
 800415e:	69b8      	ldr	r0, [r7, #24]
 8004160:	f7ff fefe 	bl	8003f60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08e      	sub	sp, #56	@ 0x38
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004182:	2300      	movs	r3, #0
 8004184:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800418a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10b      	bne.n	80041a8 <xQueueGenericSend+0x34>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80041a2:	bf00      	nop
 80041a4:	bf00      	nop
 80041a6:	e7fd      	b.n	80041a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <xQueueGenericSend+0x42>
 80041ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <xQueueGenericSend+0x46>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <xQueueGenericSend+0x48>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <xQueueGenericSend+0x64>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d103      	bne.n	80041e6 <xQueueGenericSend+0x72>
 80041de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <xQueueGenericSend+0x76>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <xQueueGenericSend+0x78>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <xQueueGenericSend+0x94>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	623b      	str	r3, [r7, #32]
}
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	e7fd      	b.n	8004204 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004208:	f001 fa3a 	bl	8005680 <xTaskGetSchedulerState>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d102      	bne.n	8004218 <xQueueGenericSend+0xa4>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <xQueueGenericSend+0xa8>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <xQueueGenericSend+0xaa>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <xQueueGenericSend+0xc6>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	61fb      	str	r3, [r7, #28]
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	e7fd      	b.n	8004236 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800423a:	f001 ffc5 	bl	80061c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <xQueueGenericSend+0xdc>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d129      	bne.n	80042a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004256:	f000 fa0f 	bl	8004678 <prvCopyDataToQueue>
 800425a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d010      	beq.n	8004286 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004266:	3324      	adds	r3, #36	@ 0x24
 8004268:	4618      	mov	r0, r3
 800426a:	f000 ffe5 	bl	8005238 <xTaskRemoveFromEventList>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004274:	4b3f      	ldr	r3, [pc, #252]	@ (8004374 <xQueueGenericSend+0x200>)
 8004276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	e00a      	b.n	800429c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800428c:	4b39      	ldr	r3, [pc, #228]	@ (8004374 <xQueueGenericSend+0x200>)
 800428e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800429c:	f001 ffc6 	bl	800622c <vPortExitCritical>
				return pdPASS;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e063      	b.n	800436c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042aa:	f001 ffbf 	bl	800622c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e05c      	b.n	800436c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d106      	bne.n	80042c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042b8:	f107 0314 	add.w	r3, r7, #20
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 f883 	bl	80053c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042c2:	2301      	movs	r3, #1
 80042c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042c6:	f001 ffb1 	bl	800622c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042ca:	f000 fd51 	bl	8004d70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042ce:	f001 ff7b 	bl	80061c8 <vPortEnterCritical>
 80042d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042d8:	b25b      	sxtb	r3, r3
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042de:	d103      	bne.n	80042e8 <xQueueGenericSend+0x174>
 80042e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042ee:	b25b      	sxtb	r3, r3
 80042f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f4:	d103      	bne.n	80042fe <xQueueGenericSend+0x18a>
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042fe:	f001 ff95 	bl	800622c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004302:	1d3a      	adds	r2, r7, #4
 8004304:	f107 0314 	add.w	r3, r7, #20
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f001 f872 	bl	80053f4 <xTaskCheckForTimeOut>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d124      	bne.n	8004360 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004316:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004318:	f000 faa6 	bl	8004868 <prvIsQueueFull>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d018      	beq.n	8004354 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004324:	3310      	adds	r3, #16
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fef4 	bl	8005118 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004332:	f000 fa31 	bl	8004798 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004336:	f000 fd29 	bl	8004d8c <xTaskResumeAll>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	f47f af7c 	bne.w	800423a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004342:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <xQueueGenericSend+0x200>)
 8004344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	e772      	b.n	800423a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004356:	f000 fa1f 	bl	8004798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800435a:	f000 fd17 	bl	8004d8c <xTaskResumeAll>
 800435e:	e76c      	b.n	800423a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004362:	f000 fa19 	bl	8004798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004366:	f000 fd11 	bl	8004d8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800436a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800436c:	4618      	mov	r0, r3
 800436e:	3738      	adds	r7, #56	@ 0x38
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b090      	sub	sp, #64	@ 0x40
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800438a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80043a2:	bf00      	nop
 80043a4:	bf00      	nop
 80043a6:	e7fd      	b.n	80043a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <xQueueGenericSendFromISR+0x3e>
 80043ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <xQueueGenericSendFromISR+0x42>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <xQueueGenericSendFromISR+0x44>
 80043ba:	2300      	movs	r3, #0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10b      	bne.n	80043d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	e7fd      	b.n	80043d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d103      	bne.n	80043e6 <xQueueGenericSendFromISR+0x6e>
 80043de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <xQueueGenericSendFromISR+0x72>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <xQueueGenericSendFromISR+0x74>
 80043ea:	2300      	movs	r3, #0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	623b      	str	r3, [r7, #32]
}
 8004402:	bf00      	nop
 8004404:	bf00      	nop
 8004406:	e7fd      	b.n	8004404 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004408:	f001 ffbe 	bl	8006388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800440c:	f3ef 8211 	mrs	r2, BASEPRI
 8004410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	61fa      	str	r2, [r7, #28]
 8004422:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004424:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004426:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800442c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004430:	429a      	cmp	r2, r3
 8004432:	d302      	bcc.n	800443a <xQueueGenericSendFromISR+0xc2>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d12f      	bne.n	800449a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800443a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004440:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004448:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004450:	f000 f912 	bl	8004678 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004454:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d112      	bne.n	8004484 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800445e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004468:	3324      	adds	r3, #36	@ 0x24
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fee4 	bl	8005238 <xTaskRemoveFromEventList>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00e      	beq.n	8004494 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00b      	beq.n	8004494 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e007      	b.n	8004494 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004484:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004488:	3301      	adds	r3, #1
 800448a:	b2db      	uxtb	r3, r3
 800448c:	b25a      	sxtb	r2, r3
 800448e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004494:	2301      	movs	r3, #1
 8004496:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004498:	e001      	b.n	800449e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800449a:	2300      	movs	r3, #0
 800449c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800449e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3740      	adds	r7, #64	@ 0x40
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08c      	sub	sp, #48	@ 0x30
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10b      	bne.n	80044e6 <xQueueReceive+0x32>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	623b      	str	r3, [r7, #32]
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	e7fd      	b.n	80044e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d103      	bne.n	80044f4 <xQueueReceive+0x40>
 80044ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <xQueueReceive+0x44>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <xQueueReceive+0x46>
 80044f8:	2300      	movs	r3, #0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <xQueueReceive+0x62>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	61fb      	str	r3, [r7, #28]
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	e7fd      	b.n	8004512 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004516:	f001 f8b3 	bl	8005680 <xTaskGetSchedulerState>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d102      	bne.n	8004526 <xQueueReceive+0x72>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <xQueueReceive+0x76>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <xQueueReceive+0x78>
 800452a:	2300      	movs	r3, #0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <xQueueReceive+0x94>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	61bb      	str	r3, [r7, #24]
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004548:	f001 fe3e 	bl	80061c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800454c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01f      	beq.n	8004598 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800455c:	f000 f8f6 	bl	800474c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004562:	1e5a      	subs	r2, r3, #1
 8004564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004566:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00f      	beq.n	8004590 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004572:	3310      	adds	r3, #16
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fe5f 	bl	8005238 <xTaskRemoveFromEventList>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004580:	4b3c      	ldr	r3, [pc, #240]	@ (8004674 <xQueueReceive+0x1c0>)
 8004582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004590:	f001 fe4c 	bl	800622c <vPortExitCritical>
				return pdPASS;
 8004594:	2301      	movs	r3, #1
 8004596:	e069      	b.n	800466c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d103      	bne.n	80045a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800459e:	f001 fe45 	bl	800622c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e062      	b.n	800466c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045ac:	f107 0310 	add.w	r3, r7, #16
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 ff09 	bl	80053c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045b6:	2301      	movs	r3, #1
 80045b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045ba:	f001 fe37 	bl	800622c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045be:	f000 fbd7 	bl	8004d70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045c2:	f001 fe01 	bl	80061c8 <vPortEnterCritical>
 80045c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045cc:	b25b      	sxtb	r3, r3
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d103      	bne.n	80045dc <xQueueReceive+0x128>
 80045d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045e2:	b25b      	sxtb	r3, r3
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d103      	bne.n	80045f2 <xQueueReceive+0x13e>
 80045ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045f2:	f001 fe1b 	bl	800622c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045f6:	1d3a      	adds	r2, r7, #4
 80045f8:	f107 0310 	add.w	r3, r7, #16
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fef8 	bl	80053f4 <xTaskCheckForTimeOut>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d123      	bne.n	8004652 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800460a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800460c:	f000 f916 	bl	800483c <prvIsQueueEmpty>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d017      	beq.n	8004646 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004618:	3324      	adds	r3, #36	@ 0x24
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4611      	mov	r1, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fd7a 	bl	8005118 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004624:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004626:	f000 f8b7 	bl	8004798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800462a:	f000 fbaf 	bl	8004d8c <xTaskResumeAll>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d189      	bne.n	8004548 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004634:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <xQueueReceive+0x1c0>)
 8004636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	e780      	b.n	8004548 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004648:	f000 f8a6 	bl	8004798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800464c:	f000 fb9e 	bl	8004d8c <xTaskResumeAll>
 8004650:	e77a      	b.n	8004548 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004654:	f000 f8a0 	bl	8004798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004658:	f000 fb98 	bl	8004d8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800465c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800465e:	f000 f8ed 	bl	800483c <prvIsQueueEmpty>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	f43f af6f 	beq.w	8004548 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800466a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800466c:	4618      	mov	r0, r3
 800466e:	3730      	adds	r7, #48	@ 0x30
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10d      	bne.n	80046b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d14d      	bne.n	800473a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 f80a 	bl	80056bc <xTaskPriorityDisinherit>
 80046a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	e043      	b.n	800473a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d119      	bne.n	80046ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6858      	ldr	r0, [r3, #4]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	461a      	mov	r2, r3
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	f002 fac5 	bl	8006c52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d0:	441a      	add	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d32b      	bcc.n	800473a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	e026      	b.n	800473a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	68d8      	ldr	r0, [r3, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	461a      	mov	r2, r3
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	f002 faab 	bl	8006c52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004704:	425b      	negs	r3, r3
 8004706:	441a      	add	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d207      	bcs.n	8004728 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	425b      	negs	r3, r3
 8004722:	441a      	add	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d105      	bne.n	800473a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	3b01      	subs	r3, #1
 8004738:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004742:	697b      	ldr	r3, [r7, #20]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d018      	beq.n	8004790 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	441a      	add	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	429a      	cmp	r2, r3
 8004776:	d303      	bcc.n	8004780 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68d9      	ldr	r1, [r3, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004788:	461a      	mov	r2, r3
 800478a:	6838      	ldr	r0, [r7, #0]
 800478c:	f002 fa61 	bl	8006c52 <memcpy>
	}
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047a0:	f001 fd12 	bl	80061c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047ac:	e011      	b.n	80047d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d012      	beq.n	80047dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3324      	adds	r3, #36	@ 0x24
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fd3c 	bl	8005238 <xTaskRemoveFromEventList>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047c6:	f000 fe79 	bl	80054bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	dce9      	bgt.n	80047ae <prvUnlockQueue+0x16>
 80047da:	e000      	b.n	80047de <prvUnlockQueue+0x46>
					break;
 80047dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	22ff      	movs	r2, #255	@ 0xff
 80047e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80047e6:	f001 fd21 	bl	800622c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047ea:	f001 fced 	bl	80061c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047f6:	e011      	b.n	800481c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d012      	beq.n	8004826 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3310      	adds	r3, #16
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fd17 	bl	8005238 <xTaskRemoveFromEventList>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004810:	f000 fe54 	bl	80054bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004814:	7bbb      	ldrb	r3, [r7, #14]
 8004816:	3b01      	subs	r3, #1
 8004818:	b2db      	uxtb	r3, r3
 800481a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800481c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004820:	2b00      	cmp	r3, #0
 8004822:	dce9      	bgt.n	80047f8 <prvUnlockQueue+0x60>
 8004824:	e000      	b.n	8004828 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004826:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	22ff      	movs	r2, #255	@ 0xff
 800482c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004830:	f001 fcfc 	bl	800622c <vPortExitCritical>
}
 8004834:	bf00      	nop
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004844:	f001 fcc0 	bl	80061c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004850:	2301      	movs	r3, #1
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	e001      	b.n	800485a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800485a:	f001 fce7 	bl	800622c <vPortExitCritical>

	return xReturn;
 800485e:	68fb      	ldr	r3, [r7, #12]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004870:	f001 fcaa 	bl	80061c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487c:	429a      	cmp	r2, r3
 800487e:	d102      	bne.n	8004886 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004880:	2301      	movs	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	e001      	b.n	800488a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800488a:	f001 fccf 	bl	800622c <vPortExitCritical>

	return xReturn;
 800488e:	68fb      	ldr	r3, [r7, #12]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	e014      	b.n	80048d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80048a8:	4a0f      	ldr	r2, [pc, #60]	@ (80048e8 <vQueueAddToRegistry+0x50>)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10b      	bne.n	80048cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80048b4:	490c      	ldr	r1, [pc, #48]	@ (80048e8 <vQueueAddToRegistry+0x50>)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80048be:	4a0a      	ldr	r2, [pc, #40]	@ (80048e8 <vQueueAddToRegistry+0x50>)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80048ca:	e006      	b.n	80048da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b07      	cmp	r3, #7
 80048d6:	d9e7      	bls.n	80048a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	200007e4 	.word	0x200007e4

080048ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048fc:	f001 fc64 	bl	80061c8 <vPortEnterCritical>
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004906:	b25b      	sxtb	r3, r3
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d103      	bne.n	8004916 <vQueueWaitForMessageRestricted+0x2a>
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800491c:	b25b      	sxtb	r3, r3
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	d103      	bne.n	800492c <vQueueWaitForMessageRestricted+0x40>
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800492c:	f001 fc7e 	bl	800622c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	3324      	adds	r3, #36	@ 0x24
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fc4d 	bl	80051e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004946:	6978      	ldr	r0, [r7, #20]
 8004948:	f7ff ff26 	bl	8004798 <prvUnlockQueue>
	}
 800494c:	bf00      	nop
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08e      	sub	sp, #56	@ 0x38
 8004958:	af04      	add	r7, sp, #16
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10b      	bne.n	8004980 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	623b      	str	r3, [r7, #32]
}
 800497a:	bf00      	nop
 800497c:	bf00      	nop
 800497e:	e7fd      	b.n	800497c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	61fb      	str	r3, [r7, #28]
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop
 800499c:	e7fd      	b.n	800499a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800499e:	235c      	movs	r3, #92	@ 0x5c
 80049a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80049a6:	d00b      	beq.n	80049c0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	61bb      	str	r3, [r7, #24]
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	e7fd      	b.n	80049bc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01e      	beq.n	8004a06 <xTaskCreateStatic+0xb2>
 80049c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01b      	beq.n	8004a06 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049d6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049e0:	2300      	movs	r3, #0
 80049e2:	9303      	str	r3, [sp, #12]
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	9302      	str	r3, [sp, #8]
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	9301      	str	r3, [sp, #4]
 80049ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f850 	bl	8004a9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a00:	f000 f8de 	bl	8004bc0 <prvAddNewTaskToReadyList>
 8004a04:	e001      	b.n	8004a0a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a0a:	697b      	ldr	r3, [r7, #20]
	}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3728      	adds	r7, #40	@ 0x28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08c      	sub	sp, #48	@ 0x30
 8004a18:	af04      	add	r7, sp, #16
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	4613      	mov	r3, r2
 8004a22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 fcef 	bl	800640c <pvPortMalloc>
 8004a2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00e      	beq.n	8004a54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a36:	205c      	movs	r0, #92	@ 0x5c
 8004a38:	f001 fce8 	bl	800640c <pvPortMalloc>
 8004a3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a4a:	e005      	b.n	8004a58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a4c:	6978      	ldr	r0, [r7, #20]
 8004a4e:	f001 fdab 	bl	80065a8 <vPortFree>
 8004a52:	e001      	b.n	8004a58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d017      	beq.n	8004a8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a66:	88fa      	ldrh	r2, [r7, #6]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	9303      	str	r3, [sp, #12]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	9302      	str	r3, [sp, #8]
 8004a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a72:	9301      	str	r3, [sp, #4]
 8004a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f80e 	bl	8004a9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a82:	69f8      	ldr	r0, [r7, #28]
 8004a84:	f000 f89c 	bl	8004bc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	e002      	b.n	8004a94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a94:	69bb      	ldr	r3, [r7, #24]
	}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b088      	sub	sp, #32
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	21a5      	movs	r1, #165	@ 0xa5
 8004ab8:	f002 f84f 	bl	8006b5a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	f023 0307 	bic.w	r3, r3, #7
 8004ad4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00b      	beq.n	8004af8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	617b      	str	r3, [r7, #20]
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	e7fd      	b.n	8004af4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01f      	beq.n	8004b3e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004afe:	2300      	movs	r3, #0
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	e012      	b.n	8004b2a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	7819      	ldrb	r1, [r3, #0]
 8004b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	4413      	add	r3, r2
 8004b12:	3334      	adds	r3, #52	@ 0x34
 8004b14:	460a      	mov	r2, r1
 8004b16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d006      	beq.n	8004b32 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	3301      	adds	r3, #1
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	2b0f      	cmp	r3, #15
 8004b2e:	d9e9      	bls.n	8004b04 <prvInitialiseNewTask+0x66>
 8004b30:	e000      	b.n	8004b34 <prvInitialiseNewTask+0x96>
			{
				break;
 8004b32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b3c:	e003      	b.n	8004b46 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b48:	2b37      	cmp	r3, #55	@ 0x37
 8004b4a:	d901      	bls.n	8004b50 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b4c:	2337      	movs	r3, #55	@ 0x37
 8004b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b54:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b5a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5e:	2200      	movs	r2, #0
 8004b60:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b64:	3304      	adds	r3, #4
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff f966 	bl	8003e38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6e:	3318      	adds	r3, #24
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff f961 	bl	8003e38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b8a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8e:	2200      	movs	r2, #0
 8004b90:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	68f9      	ldr	r1, [r7, #12]
 8004b9e:	69b8      	ldr	r0, [r7, #24]
 8004ba0:	f001 f9e2 	bl	8005f68 <pxPortInitialiseStack>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004bc8:	f001 fafe 	bl	80061c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8004c84 <prvAddNewTaskToReadyList+0xc4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c84 <prvAddNewTaskToReadyList+0xc4>)
 8004bd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8004c88 <prvAddNewTaskToReadyList+0xc8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bde:	4a2a      	ldr	r2, [pc, #168]	@ (8004c88 <prvAddNewTaskToReadyList+0xc8>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004be4:	4b27      	ldr	r3, [pc, #156]	@ (8004c84 <prvAddNewTaskToReadyList+0xc4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d110      	bne.n	8004c0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bec:	f000 fc8a 	bl	8005504 <prvInitialiseTaskLists>
 8004bf0:	e00d      	b.n	8004c0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bf2:	4b26      	ldr	r3, [pc, #152]	@ (8004c8c <prvAddNewTaskToReadyList+0xcc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bfa:	4b23      	ldr	r3, [pc, #140]	@ (8004c88 <prvAddNewTaskToReadyList+0xc8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d802      	bhi.n	8004c0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c08:	4a1f      	ldr	r2, [pc, #124]	@ (8004c88 <prvAddNewTaskToReadyList+0xc8>)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c0e:	4b20      	ldr	r3, [pc, #128]	@ (8004c90 <prvAddNewTaskToReadyList+0xd0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3301      	adds	r3, #1
 8004c14:	4a1e      	ldr	r2, [pc, #120]	@ (8004c90 <prvAddNewTaskToReadyList+0xd0>)
 8004c16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c18:	4b1d      	ldr	r3, [pc, #116]	@ (8004c90 <prvAddNewTaskToReadyList+0xd0>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c24:	4b1b      	ldr	r3, [pc, #108]	@ (8004c94 <prvAddNewTaskToReadyList+0xd4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d903      	bls.n	8004c34 <prvAddNewTaskToReadyList+0x74>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c30:	4a18      	ldr	r2, [pc, #96]	@ (8004c94 <prvAddNewTaskToReadyList+0xd4>)
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4a15      	ldr	r2, [pc, #84]	@ (8004c98 <prvAddNewTaskToReadyList+0xd8>)
 8004c42:	441a      	add	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f7ff f901 	bl	8003e52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c50:	f001 faec 	bl	800622c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c54:	4b0d      	ldr	r3, [pc, #52]	@ (8004c8c <prvAddNewTaskToReadyList+0xcc>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00e      	beq.n	8004c7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <prvAddNewTaskToReadyList+0xc8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d207      	bcs.n	8004c7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c9c <prvAddNewTaskToReadyList+0xdc>)
 8004c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000cf8 	.word	0x20000cf8
 8004c88:	20000824 	.word	0x20000824
 8004c8c:	20000d04 	.word	0x20000d04
 8004c90:	20000d14 	.word	0x20000d14
 8004c94:	20000d00 	.word	0x20000d00
 8004c98:	20000828 	.word	0x20000828
 8004c9c:	e000ed04 	.word	0xe000ed04

08004ca0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	@ 0x28
 8004ca4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cae:	463a      	mov	r2, r7
 8004cb0:	1d39      	adds	r1, r7, #4
 8004cb2:	f107 0308 	add.w	r3, r7, #8
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe fe74 	bl	80039a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cbc:	6839      	ldr	r1, [r7, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	9202      	str	r2, [sp, #8]
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	460a      	mov	r2, r1
 8004cce:	4922      	ldr	r1, [pc, #136]	@ (8004d58 <vTaskStartScheduler+0xb8>)
 8004cd0:	4822      	ldr	r0, [pc, #136]	@ (8004d5c <vTaskStartScheduler+0xbc>)
 8004cd2:	f7ff fe3f 	bl	8004954 <xTaskCreateStatic>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4a21      	ldr	r2, [pc, #132]	@ (8004d60 <vTaskStartScheduler+0xc0>)
 8004cda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cdc:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <vTaskStartScheduler+0xc0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e001      	b.n	8004cee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d102      	bne.n	8004cfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004cf4:	f000 fdbe 	bl	8005874 <xTimerCreateTimerTask>
 8004cf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d116      	bne.n	8004d2e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	613b      	str	r3, [r7, #16]
}
 8004d12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d14:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <vTaskStartScheduler+0xc4>)
 8004d16:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d1c:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <vTaskStartScheduler+0xc8>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d22:	4b12      	ldr	r3, [pc, #72]	@ (8004d6c <vTaskStartScheduler+0xcc>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d28:	f001 f9aa 	bl	8006080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d2c:	e00f      	b.n	8004d4e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d10b      	bne.n	8004d4e <vTaskStartScheduler+0xae>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	60fb      	str	r3, [r7, #12]
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	e7fd      	b.n	8004d4a <vTaskStartScheduler+0xaa>
}
 8004d4e:	bf00      	nop
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	08007070 	.word	0x08007070
 8004d5c:	080054d5 	.word	0x080054d5
 8004d60:	20000d1c 	.word	0x20000d1c
 8004d64:	20000d18 	.word	0x20000d18
 8004d68:	20000d04 	.word	0x20000d04
 8004d6c:	20000cfc 	.word	0x20000cfc

08004d70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d74:	4b04      	ldr	r3, [pc, #16]	@ (8004d88 <vTaskSuspendAll+0x18>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	4a03      	ldr	r2, [pc, #12]	@ (8004d88 <vTaskSuspendAll+0x18>)
 8004d7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d7e:	bf00      	nop
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	20000d20 	.word	0x20000d20

08004d8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d9a:	4b42      	ldr	r3, [pc, #264]	@ (8004ea4 <xTaskResumeAll+0x118>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10b      	bne.n	8004dba <xTaskResumeAll+0x2e>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	603b      	str	r3, [r7, #0]
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	e7fd      	b.n	8004db6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004dba:	f001 fa05 	bl	80061c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dbe:	4b39      	ldr	r3, [pc, #228]	@ (8004ea4 <xTaskResumeAll+0x118>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	4a37      	ldr	r2, [pc, #220]	@ (8004ea4 <xTaskResumeAll+0x118>)
 8004dc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dc8:	4b36      	ldr	r3, [pc, #216]	@ (8004ea4 <xTaskResumeAll+0x118>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d162      	bne.n	8004e96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dd0:	4b35      	ldr	r3, [pc, #212]	@ (8004ea8 <xTaskResumeAll+0x11c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05e      	beq.n	8004e96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dd8:	e02f      	b.n	8004e3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dda:	4b34      	ldr	r3, [pc, #208]	@ (8004eac <xTaskResumeAll+0x120>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3318      	adds	r3, #24
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff f890 	bl	8003f0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff f88b 	bl	8003f0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb0 <xTaskResumeAll+0x124>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d903      	bls.n	8004e0a <xTaskResumeAll+0x7e>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e06:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb0 <xTaskResumeAll+0x124>)
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4a27      	ldr	r2, [pc, #156]	@ (8004eb4 <xTaskResumeAll+0x128>)
 8004e18:	441a      	add	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4610      	mov	r0, r2
 8004e22:	f7ff f816 	bl	8003e52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2a:	4b23      	ldr	r3, [pc, #140]	@ (8004eb8 <xTaskResumeAll+0x12c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d302      	bcc.n	8004e3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004e34:	4b21      	ldr	r3, [pc, #132]	@ (8004ebc <xTaskResumeAll+0x130>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8004eac <xTaskResumeAll+0x120>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1cb      	bne.n	8004dda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e48:	f000 fbfa 	bl	8005640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec0 <xTaskResumeAll+0x134>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d010      	beq.n	8004e7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e58:	f000 f846 	bl	8004ee8 <xTaskIncrementTick>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004e62:	4b16      	ldr	r3, [pc, #88]	@ (8004ebc <xTaskResumeAll+0x130>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f1      	bne.n	8004e58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004e74:	4b12      	ldr	r3, [pc, #72]	@ (8004ec0 <xTaskResumeAll+0x134>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e7a:	4b10      	ldr	r3, [pc, #64]	@ (8004ebc <xTaskResumeAll+0x130>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e82:	2301      	movs	r3, #1
 8004e84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e86:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec4 <xTaskResumeAll+0x138>)
 8004e88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e96:	f001 f9c9 	bl	800622c <vPortExitCritical>

	return xAlreadyYielded;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20000d20 	.word	0x20000d20
 8004ea8:	20000cf8 	.word	0x20000cf8
 8004eac:	20000cb8 	.word	0x20000cb8
 8004eb0:	20000d00 	.word	0x20000d00
 8004eb4:	20000828 	.word	0x20000828
 8004eb8:	20000824 	.word	0x20000824
 8004ebc:	20000d0c 	.word	0x20000d0c
 8004ec0:	20000d08 	.word	0x20000d08
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004ece:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <xTaskGetTickCount+0x1c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ed4:	687b      	ldr	r3, [r7, #4]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000cfc 	.word	0x20000cfc

08004ee8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ef2:	4b4f      	ldr	r3, [pc, #316]	@ (8005030 <xTaskIncrementTick+0x148>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f040 8090 	bne.w	800501c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004efc:	4b4d      	ldr	r3, [pc, #308]	@ (8005034 <xTaskIncrementTick+0x14c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3301      	adds	r3, #1
 8004f02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f04:	4a4b      	ldr	r2, [pc, #300]	@ (8005034 <xTaskIncrementTick+0x14c>)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d121      	bne.n	8004f54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f10:	4b49      	ldr	r3, [pc, #292]	@ (8005038 <xTaskIncrementTick+0x150>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	603b      	str	r3, [r7, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <xTaskIncrementTick+0x46>
 8004f32:	4b41      	ldr	r3, [pc, #260]	@ (8005038 <xTaskIncrementTick+0x150>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	4b40      	ldr	r3, [pc, #256]	@ (800503c <xTaskIncrementTick+0x154>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a3e      	ldr	r2, [pc, #248]	@ (8005038 <xTaskIncrementTick+0x150>)
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	4a3e      	ldr	r2, [pc, #248]	@ (800503c <xTaskIncrementTick+0x154>)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	4b3e      	ldr	r3, [pc, #248]	@ (8005040 <xTaskIncrementTick+0x158>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005040 <xTaskIncrementTick+0x158>)
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	f000 fb76 	bl	8005640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f54:	4b3b      	ldr	r3, [pc, #236]	@ (8005044 <xTaskIncrementTick+0x15c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d349      	bcc.n	8004ff2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f5e:	4b36      	ldr	r3, [pc, #216]	@ (8005038 <xTaskIncrementTick+0x150>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d104      	bne.n	8004f72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f68:	4b36      	ldr	r3, [pc, #216]	@ (8005044 <xTaskIncrementTick+0x15c>)
 8004f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6e:	601a      	str	r2, [r3, #0]
					break;
 8004f70:	e03f      	b.n	8004ff2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f72:	4b31      	ldr	r3, [pc, #196]	@ (8005038 <xTaskIncrementTick+0x150>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d203      	bcs.n	8004f92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f8a:	4a2e      	ldr	r2, [pc, #184]	@ (8005044 <xTaskIncrementTick+0x15c>)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f90:	e02f      	b.n	8004ff2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	3304      	adds	r3, #4
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe ffb8 	bl	8003f0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d004      	beq.n	8004fae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	3318      	adds	r3, #24
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fe ffaf 	bl	8003f0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb2:	4b25      	ldr	r3, [pc, #148]	@ (8005048 <xTaskIncrementTick+0x160>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d903      	bls.n	8004fc2 <xTaskIncrementTick+0xda>
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbe:	4a22      	ldr	r2, [pc, #136]	@ (8005048 <xTaskIncrementTick+0x160>)
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4a1f      	ldr	r2, [pc, #124]	@ (800504c <xTaskIncrementTick+0x164>)
 8004fd0:	441a      	add	r2, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4610      	mov	r0, r2
 8004fda:	f7fe ff3a 	bl	8003e52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8005050 <xTaskIncrementTick+0x168>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d3b8      	bcc.n	8004f5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004fec:	2301      	movs	r3, #1
 8004fee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ff0:	e7b5      	b.n	8004f5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ff2:	4b17      	ldr	r3, [pc, #92]	@ (8005050 <xTaskIncrementTick+0x168>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff8:	4914      	ldr	r1, [pc, #80]	@ (800504c <xTaskIncrementTick+0x164>)
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d901      	bls.n	800500e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800500a:	2301      	movs	r3, #1
 800500c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800500e:	4b11      	ldr	r3, [pc, #68]	@ (8005054 <xTaskIncrementTick+0x16c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d007      	beq.n	8005026 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005016:	2301      	movs	r3, #1
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	e004      	b.n	8005026 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800501c:	4b0e      	ldr	r3, [pc, #56]	@ (8005058 <xTaskIncrementTick+0x170>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3301      	adds	r3, #1
 8005022:	4a0d      	ldr	r2, [pc, #52]	@ (8005058 <xTaskIncrementTick+0x170>)
 8005024:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005026:	697b      	ldr	r3, [r7, #20]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20000d20 	.word	0x20000d20
 8005034:	20000cfc 	.word	0x20000cfc
 8005038:	20000cb0 	.word	0x20000cb0
 800503c:	20000cb4 	.word	0x20000cb4
 8005040:	20000d10 	.word	0x20000d10
 8005044:	20000d18 	.word	0x20000d18
 8005048:	20000d00 	.word	0x20000d00
 800504c:	20000828 	.word	0x20000828
 8005050:	20000824 	.word	0x20000824
 8005054:	20000d0c 	.word	0x20000d0c
 8005058:	20000d08 	.word	0x20000d08

0800505c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005062:	4b28      	ldr	r3, [pc, #160]	@ (8005104 <vTaskSwitchContext+0xa8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800506a:	4b27      	ldr	r3, [pc, #156]	@ (8005108 <vTaskSwitchContext+0xac>)
 800506c:	2201      	movs	r2, #1
 800506e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005070:	e042      	b.n	80050f8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005072:	4b25      	ldr	r3, [pc, #148]	@ (8005108 <vTaskSwitchContext+0xac>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005078:	4b24      	ldr	r3, [pc, #144]	@ (800510c <vTaskSwitchContext+0xb0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	e011      	b.n	80050a4 <vTaskSwitchContext+0x48>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10b      	bne.n	800509e <vTaskSwitchContext+0x42>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	607b      	str	r3, [r7, #4]
}
 8005098:	bf00      	nop
 800509a:	bf00      	nop
 800509c:	e7fd      	b.n	800509a <vTaskSwitchContext+0x3e>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	491a      	ldr	r1, [pc, #104]	@ (8005110 <vTaskSwitchContext+0xb4>)
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0e3      	beq.n	8005080 <vTaskSwitchContext+0x24>
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4a13      	ldr	r2, [pc, #76]	@ (8005110 <vTaskSwitchContext+0xb4>)
 80050c4:	4413      	add	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	3308      	adds	r3, #8
 80050da:	429a      	cmp	r2, r3
 80050dc:	d104      	bne.n	80050e8 <vTaskSwitchContext+0x8c>
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	605a      	str	r2, [r3, #4]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	4a09      	ldr	r2, [pc, #36]	@ (8005114 <vTaskSwitchContext+0xb8>)
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	4a06      	ldr	r2, [pc, #24]	@ (800510c <vTaskSwitchContext+0xb0>)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6013      	str	r3, [r2, #0]
}
 80050f8:	bf00      	nop
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	20000d20 	.word	0x20000d20
 8005108:	20000d0c 	.word	0x20000d0c
 800510c:	20000d00 	.word	0x20000d00
 8005110:	20000828 	.word	0x20000828
 8005114:	20000824 	.word	0x20000824

08005118 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10b      	bne.n	8005140 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	60fb      	str	r3, [r7, #12]
}
 800513a:	bf00      	nop
 800513c:	bf00      	nop
 800513e:	e7fd      	b.n	800513c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005140:	4b07      	ldr	r3, [pc, #28]	@ (8005160 <vTaskPlaceOnEventList+0x48>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3318      	adds	r3, #24
 8005146:	4619      	mov	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7fe fea6 	bl	8003e9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800514e:	2101      	movs	r1, #1
 8005150:	6838      	ldr	r0, [r7, #0]
 8005152:	f000 fb3b 	bl	80057cc <prvAddCurrentTaskToDelayedList>
}
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000824 	.word	0x20000824

08005164 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10b      	bne.n	800518e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	617b      	str	r3, [r7, #20]
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	e7fd      	b.n	800518a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800518e:	4b12      	ldr	r3, [pc, #72]	@ (80051d8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10b      	bne.n	80051ae <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	613b      	str	r3, [r7, #16]
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	e7fd      	b.n	80051aa <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80051ae:	4b0b      	ldr	r3, [pc, #44]	@ (80051dc <vTaskPlaceOnUnorderedEventList+0x78>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80051b8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051ba:	4b08      	ldr	r3, [pc, #32]	@ (80051dc <vTaskPlaceOnUnorderedEventList+0x78>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3318      	adds	r3, #24
 80051c0:	4619      	mov	r1, r3
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f7fe fe45 	bl	8003e52 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051c8:	2101      	movs	r1, #1
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fafe 	bl	80057cc <prvAddCurrentTaskToDelayedList>
}
 80051d0:	bf00      	nop
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20000d20 	.word	0x20000d20
 80051dc:	20000824 	.word	0x20000824

080051e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10b      	bne.n	800520a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	617b      	str	r3, [r7, #20]
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	e7fd      	b.n	8005206 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800520a:	4b0a      	ldr	r3, [pc, #40]	@ (8005234 <vTaskPlaceOnEventListRestricted+0x54>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3318      	adds	r3, #24
 8005210:	4619      	mov	r1, r3
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7fe fe1d 	bl	8003e52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800521e:	f04f 33ff 	mov.w	r3, #4294967295
 8005222:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	68b8      	ldr	r0, [r7, #8]
 8005228:	f000 fad0 	bl	80057cc <prvAddCurrentTaskToDelayedList>
	}
 800522c:	bf00      	nop
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20000824 	.word	0x20000824

08005238 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	60fb      	str	r3, [r7, #12]
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	e7fd      	b.n	8005262 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	3318      	adds	r3, #24
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe fe4e 	bl	8003f0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005270:	4b1d      	ldr	r3, [pc, #116]	@ (80052e8 <xTaskRemoveFromEventList+0xb0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d11d      	bne.n	80052b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	3304      	adds	r3, #4
 800527c:	4618      	mov	r0, r3
 800527e:	f7fe fe45 	bl	8003f0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005286:	4b19      	ldr	r3, [pc, #100]	@ (80052ec <xTaskRemoveFromEventList+0xb4>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d903      	bls.n	8005296 <xTaskRemoveFromEventList+0x5e>
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	4a16      	ldr	r2, [pc, #88]	@ (80052ec <xTaskRemoveFromEventList+0xb4>)
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4a13      	ldr	r2, [pc, #76]	@ (80052f0 <xTaskRemoveFromEventList+0xb8>)
 80052a4:	441a      	add	r2, r3
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f7fe fdd0 	bl	8003e52 <vListInsertEnd>
 80052b2:	e005      	b.n	80052c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	3318      	adds	r3, #24
 80052b8:	4619      	mov	r1, r3
 80052ba:	480e      	ldr	r0, [pc, #56]	@ (80052f4 <xTaskRemoveFromEventList+0xbc>)
 80052bc:	f7fe fdc9 	bl	8003e52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c4:	4b0c      	ldr	r3, [pc, #48]	@ (80052f8 <xTaskRemoveFromEventList+0xc0>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d905      	bls.n	80052da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052ce:	2301      	movs	r3, #1
 80052d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052d2:	4b0a      	ldr	r3, [pc, #40]	@ (80052fc <xTaskRemoveFromEventList+0xc4>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	e001      	b.n	80052de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80052de:	697b      	ldr	r3, [r7, #20]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000d20 	.word	0x20000d20
 80052ec:	20000d00 	.word	0x20000d00
 80052f0:	20000828 	.word	0x20000828
 80052f4:	20000cb8 	.word	0x20000cb8
 80052f8:	20000824 	.word	0x20000824
 80052fc:	20000d0c 	.word	0x20000d0c

08005300 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800530a:	4b2a      	ldr	r3, [pc, #168]	@ (80053b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10b      	bne.n	800532a <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	613b      	str	r3, [r7, #16]
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop
 8005328:	e7fd      	b.n	8005326 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10b      	bne.n	8005358 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	60fb      	str	r3, [r7, #12]
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	e7fd      	b.n	8005354 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7fe fdd7 	bl	8003f0c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	3304      	adds	r3, #4
 8005362:	4618      	mov	r0, r3
 8005364:	f7fe fdd2 	bl	8003f0c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536c:	4b12      	ldr	r3, [pc, #72]	@ (80053b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d903      	bls.n	800537c <vTaskRemoveFromUnorderedEventList+0x7c>
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	4a0f      	ldr	r2, [pc, #60]	@ (80053b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4a0c      	ldr	r2, [pc, #48]	@ (80053bc <vTaskRemoveFromUnorderedEventList+0xbc>)
 800538a:	441a      	add	r2, r3
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	3304      	adds	r3, #4
 8005390:	4619      	mov	r1, r3
 8005392:	4610      	mov	r0, r2
 8005394:	f7fe fd5d 	bl	8003e52 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800539c:	4b08      	ldr	r3, [pc, #32]	@ (80053c0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d902      	bls.n	80053ac <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80053a6:	4b07      	ldr	r3, [pc, #28]	@ (80053c4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
	}
}
 80053ac:	bf00      	nop
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20000d20 	.word	0x20000d20
 80053b8:	20000d00 	.word	0x20000d00
 80053bc:	20000828 	.word	0x20000828
 80053c0:	20000824 	.word	0x20000824
 80053c4:	20000d0c 	.word	0x20000d0c

080053c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053d0:	4b06      	ldr	r3, [pc, #24]	@ (80053ec <vTaskInternalSetTimeOutState+0x24>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053d8:	4b05      	ldr	r3, [pc, #20]	@ (80053f0 <vTaskInternalSetTimeOutState+0x28>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	605a      	str	r2, [r3, #4]
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	20000d10 	.word	0x20000d10
 80053f0:	20000cfc 	.word	0x20000cfc

080053f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	613b      	str	r3, [r7, #16]
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10b      	bne.n	800543a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	60fb      	str	r3, [r7, #12]
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop
 8005438:	e7fd      	b.n	8005436 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800543a:	f000 fec5 	bl	80061c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800543e:	4b1d      	ldr	r3, [pc, #116]	@ (80054b4 <xTaskCheckForTimeOut+0xc0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005456:	d102      	bne.n	800545e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005458:	2300      	movs	r3, #0
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	e023      	b.n	80054a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4b15      	ldr	r3, [pc, #84]	@ (80054b8 <xTaskCheckForTimeOut+0xc4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d007      	beq.n	800547a <xTaskCheckForTimeOut+0x86>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	429a      	cmp	r2, r3
 8005472:	d302      	bcc.n	800547a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	61fb      	str	r3, [r7, #28]
 8005478:	e015      	b.n	80054a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	429a      	cmp	r2, r3
 8005482:	d20b      	bcs.n	800549c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	1ad2      	subs	r2, r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff ff99 	bl	80053c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e004      	b.n	80054a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054a2:	2301      	movs	r3, #1
 80054a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054a6:	f000 fec1 	bl	800622c <vPortExitCritical>

	return xReturn;
 80054aa:	69fb      	ldr	r3, [r7, #28]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000cfc 	.word	0x20000cfc
 80054b8:	20000d10 	.word	0x20000d10

080054bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054c0:	4b03      	ldr	r3, [pc, #12]	@ (80054d0 <vTaskMissedYield+0x14>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
}
 80054c6:	bf00      	nop
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20000d0c 	.word	0x20000d0c

080054d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054dc:	f000 f852 	bl	8005584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054e0:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <prvIdleTask+0x28>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d9f9      	bls.n	80054dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80054e8:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <prvIdleTask+0x2c>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054f8:	e7f0      	b.n	80054dc <prvIdleTask+0x8>
 80054fa:	bf00      	nop
 80054fc:	20000828 	.word	0x20000828
 8005500:	e000ed04 	.word	0xe000ed04

08005504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800550a:	2300      	movs	r3, #0
 800550c:	607b      	str	r3, [r7, #4]
 800550e:	e00c      	b.n	800552a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4a12      	ldr	r2, [pc, #72]	@ (8005564 <prvInitialiseTaskLists+0x60>)
 800551c:	4413      	add	r3, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fc6a 	bl	8003df8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3301      	adds	r3, #1
 8005528:	607b      	str	r3, [r7, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b37      	cmp	r3, #55	@ 0x37
 800552e:	d9ef      	bls.n	8005510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005530:	480d      	ldr	r0, [pc, #52]	@ (8005568 <prvInitialiseTaskLists+0x64>)
 8005532:	f7fe fc61 	bl	8003df8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005536:	480d      	ldr	r0, [pc, #52]	@ (800556c <prvInitialiseTaskLists+0x68>)
 8005538:	f7fe fc5e 	bl	8003df8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800553c:	480c      	ldr	r0, [pc, #48]	@ (8005570 <prvInitialiseTaskLists+0x6c>)
 800553e:	f7fe fc5b 	bl	8003df8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005542:	480c      	ldr	r0, [pc, #48]	@ (8005574 <prvInitialiseTaskLists+0x70>)
 8005544:	f7fe fc58 	bl	8003df8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005548:	480b      	ldr	r0, [pc, #44]	@ (8005578 <prvInitialiseTaskLists+0x74>)
 800554a:	f7fe fc55 	bl	8003df8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800554e:	4b0b      	ldr	r3, [pc, #44]	@ (800557c <prvInitialiseTaskLists+0x78>)
 8005550:	4a05      	ldr	r2, [pc, #20]	@ (8005568 <prvInitialiseTaskLists+0x64>)
 8005552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005554:	4b0a      	ldr	r3, [pc, #40]	@ (8005580 <prvInitialiseTaskLists+0x7c>)
 8005556:	4a05      	ldr	r2, [pc, #20]	@ (800556c <prvInitialiseTaskLists+0x68>)
 8005558:	601a      	str	r2, [r3, #0]
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000828 	.word	0x20000828
 8005568:	20000c88 	.word	0x20000c88
 800556c:	20000c9c 	.word	0x20000c9c
 8005570:	20000cb8 	.word	0x20000cb8
 8005574:	20000ccc 	.word	0x20000ccc
 8005578:	20000ce4 	.word	0x20000ce4
 800557c:	20000cb0 	.word	0x20000cb0
 8005580:	20000cb4 	.word	0x20000cb4

08005584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800558a:	e019      	b.n	80055c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800558c:	f000 fe1c 	bl	80061c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005590:	4b10      	ldr	r3, [pc, #64]	@ (80055d4 <prvCheckTasksWaitingTermination+0x50>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3304      	adds	r3, #4
 800559c:	4618      	mov	r0, r3
 800559e:	f7fe fcb5 	bl	8003f0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055a2:	4b0d      	ldr	r3, [pc, #52]	@ (80055d8 <prvCheckTasksWaitingTermination+0x54>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	4a0b      	ldr	r2, [pc, #44]	@ (80055d8 <prvCheckTasksWaitingTermination+0x54>)
 80055aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055ac:	4b0b      	ldr	r3, [pc, #44]	@ (80055dc <prvCheckTasksWaitingTermination+0x58>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	4a0a      	ldr	r2, [pc, #40]	@ (80055dc <prvCheckTasksWaitingTermination+0x58>)
 80055b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055b6:	f000 fe39 	bl	800622c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f810 	bl	80055e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055c0:	4b06      	ldr	r3, [pc, #24]	@ (80055dc <prvCheckTasksWaitingTermination+0x58>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e1      	bne.n	800558c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000ccc 	.word	0x20000ccc
 80055d8:	20000cf8 	.word	0x20000cf8
 80055dc:	20000ce0 	.word	0x20000ce0

080055e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d108      	bne.n	8005604 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 ffd6 	bl	80065a8 <vPortFree>
				vPortFree( pxTCB );
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 ffd3 	bl	80065a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005602:	e019      	b.n	8005638 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800560a:	2b01      	cmp	r3, #1
 800560c:	d103      	bne.n	8005616 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 ffca 	bl	80065a8 <vPortFree>
	}
 8005614:	e010      	b.n	8005638 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800561c:	2b02      	cmp	r3, #2
 800561e:	d00b      	beq.n	8005638 <prvDeleteTCB+0x58>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	60fb      	str	r3, [r7, #12]
}
 8005632:	bf00      	nop
 8005634:	bf00      	nop
 8005636:	e7fd      	b.n	8005634 <prvDeleteTCB+0x54>
	}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005646:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <prvResetNextTaskUnblockTime+0x38>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005650:	4b0a      	ldr	r3, [pc, #40]	@ (800567c <prvResetNextTaskUnblockTime+0x3c>)
 8005652:	f04f 32ff 	mov.w	r2, #4294967295
 8005656:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005658:	e008      	b.n	800566c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800565a:	4b07      	ldr	r3, [pc, #28]	@ (8005678 <prvResetNextTaskUnblockTime+0x38>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4a04      	ldr	r2, [pc, #16]	@ (800567c <prvResetNextTaskUnblockTime+0x3c>)
 800566a:	6013      	str	r3, [r2, #0]
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	20000cb0 	.word	0x20000cb0
 800567c:	20000d18 	.word	0x20000d18

08005680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005686:	4b0b      	ldr	r3, [pc, #44]	@ (80056b4 <xTaskGetSchedulerState+0x34>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d102      	bne.n	8005694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800568e:	2301      	movs	r3, #1
 8005690:	607b      	str	r3, [r7, #4]
 8005692:	e008      	b.n	80056a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005694:	4b08      	ldr	r3, [pc, #32]	@ (80056b8 <xTaskGetSchedulerState+0x38>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800569c:	2302      	movs	r3, #2
 800569e:	607b      	str	r3, [r7, #4]
 80056a0:	e001      	b.n	80056a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056a2:	2300      	movs	r3, #0
 80056a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056a6:	687b      	ldr	r3, [r7, #4]
	}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	20000d04 	.word	0x20000d04
 80056b8:	20000d20 	.word	0x20000d20

080056bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d058      	beq.n	8005784 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005790 <xTaskPriorityDisinherit+0xd4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d00b      	beq.n	80056f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	60fb      	str	r3, [r7, #12]
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	e7fd      	b.n	80056f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10b      	bne.n	8005714 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	60bb      	str	r3, [r7, #8]
}
 800570e:	bf00      	nop
 8005710:	bf00      	nop
 8005712:	e7fd      	b.n	8005710 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005718:	1e5a      	subs	r2, r3, #1
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005726:	429a      	cmp	r2, r3
 8005728:	d02c      	beq.n	8005784 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800572e:	2b00      	cmp	r3, #0
 8005730:	d128      	bne.n	8005784 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	3304      	adds	r3, #4
 8005736:	4618      	mov	r0, r3
 8005738:	f7fe fbe8 	bl	8003f0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005748:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005754:	4b0f      	ldr	r3, [pc, #60]	@ (8005794 <xTaskPriorityDisinherit+0xd8>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d903      	bls.n	8005764 <xTaskPriorityDisinherit+0xa8>
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	4a0c      	ldr	r2, [pc, #48]	@ (8005794 <xTaskPriorityDisinherit+0xd8>)
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4a09      	ldr	r2, [pc, #36]	@ (8005798 <xTaskPriorityDisinherit+0xdc>)
 8005772:	441a      	add	r2, r3
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	3304      	adds	r3, #4
 8005778:	4619      	mov	r1, r3
 800577a:	4610      	mov	r0, r2
 800577c:	f7fe fb69 	bl	8003e52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005780:	2301      	movs	r3, #1
 8005782:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005784:	697b      	ldr	r3, [r7, #20]
	}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000824 	.word	0x20000824
 8005794:	20000d00 	.word	0x20000d00
 8005798:	20000828 	.word	0x20000828

0800579c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80057a2:	4b09      	ldr	r3, [pc, #36]	@ (80057c8 <uxTaskResetEventItemValue+0x2c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057aa:	4b07      	ldr	r3, [pc, #28]	@ (80057c8 <uxTaskResetEventItemValue+0x2c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b0:	4b05      	ldr	r3, [pc, #20]	@ (80057c8 <uxTaskResetEventItemValue+0x2c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80057b8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80057ba:	687b      	ldr	r3, [r7, #4]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	20000824 	.word	0x20000824

080057cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057d6:	4b21      	ldr	r3, [pc, #132]	@ (800585c <prvAddCurrentTaskToDelayedList+0x90>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057dc:	4b20      	ldr	r3, [pc, #128]	@ (8005860 <prvAddCurrentTaskToDelayedList+0x94>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3304      	adds	r3, #4
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe fb92 	bl	8003f0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ee:	d10a      	bne.n	8005806 <prvAddCurrentTaskToDelayedList+0x3a>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005860 <prvAddCurrentTaskToDelayedList+0x94>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3304      	adds	r3, #4
 80057fc:	4619      	mov	r1, r3
 80057fe:	4819      	ldr	r0, [pc, #100]	@ (8005864 <prvAddCurrentTaskToDelayedList+0x98>)
 8005800:	f7fe fb27 	bl	8003e52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005804:	e026      	b.n	8005854 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4413      	add	r3, r2
 800580c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800580e:	4b14      	ldr	r3, [pc, #80]	@ (8005860 <prvAddCurrentTaskToDelayedList+0x94>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	429a      	cmp	r2, r3
 800581c:	d209      	bcs.n	8005832 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800581e:	4b12      	ldr	r3, [pc, #72]	@ (8005868 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b0f      	ldr	r3, [pc, #60]	@ (8005860 <prvAddCurrentTaskToDelayedList+0x94>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7fe fb35 	bl	8003e9a <vListInsert>
}
 8005830:	e010      	b.n	8005854 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005832:	4b0e      	ldr	r3, [pc, #56]	@ (800586c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	4b0a      	ldr	r3, [pc, #40]	@ (8005860 <prvAddCurrentTaskToDelayedList+0x94>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3304      	adds	r3, #4
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f7fe fb2b 	bl	8003e9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005844:	4b0a      	ldr	r3, [pc, #40]	@ (8005870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	429a      	cmp	r2, r3
 800584c:	d202      	bcs.n	8005854 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800584e:	4a08      	ldr	r2, [pc, #32]	@ (8005870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6013      	str	r3, [r2, #0]
}
 8005854:	bf00      	nop
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000cfc 	.word	0x20000cfc
 8005860:	20000824 	.word	0x20000824
 8005864:	20000ce4 	.word	0x20000ce4
 8005868:	20000cb4 	.word	0x20000cb4
 800586c:	20000cb0 	.word	0x20000cb0
 8005870:	20000d18 	.word	0x20000d18

08005874 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	@ 0x28
 8005878:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800587e:	f000 fb13 	bl	8005ea8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005882:	4b1d      	ldr	r3, [pc, #116]	@ (80058f8 <xTimerCreateTimerTask+0x84>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d021      	beq.n	80058ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005892:	1d3a      	adds	r2, r7, #4
 8005894:	f107 0108 	add.w	r1, r7, #8
 8005898:	f107 030c 	add.w	r3, r7, #12
 800589c:	4618      	mov	r0, r3
 800589e:	f7fe f89b 	bl	80039d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	9202      	str	r2, [sp, #8]
 80058aa:	9301      	str	r3, [sp, #4]
 80058ac:	2302      	movs	r3, #2
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	2300      	movs	r3, #0
 80058b2:	460a      	mov	r2, r1
 80058b4:	4911      	ldr	r1, [pc, #68]	@ (80058fc <xTimerCreateTimerTask+0x88>)
 80058b6:	4812      	ldr	r0, [pc, #72]	@ (8005900 <xTimerCreateTimerTask+0x8c>)
 80058b8:	f7ff f84c 	bl	8004954 <xTaskCreateStatic>
 80058bc:	4603      	mov	r3, r0
 80058be:	4a11      	ldr	r2, [pc, #68]	@ (8005904 <xTimerCreateTimerTask+0x90>)
 80058c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80058c2:	4b10      	ldr	r3, [pc, #64]	@ (8005904 <xTimerCreateTimerTask+0x90>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80058ca:	2301      	movs	r3, #1
 80058cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10b      	bne.n	80058ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	613b      	str	r3, [r7, #16]
}
 80058e6:	bf00      	nop
 80058e8:	bf00      	nop
 80058ea:	e7fd      	b.n	80058e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80058ec:	697b      	ldr	r3, [r7, #20]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000d54 	.word	0x20000d54
 80058fc:	08007078 	.word	0x08007078
 8005900:	08005a41 	.word	0x08005a41
 8005904:	20000d58 	.word	0x20000d58

08005908 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	@ 0x28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005916:	2300      	movs	r3, #0
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10b      	bne.n	8005938 <xTimerGenericCommand+0x30>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	623b      	str	r3, [r7, #32]
}
 8005932:	bf00      	nop
 8005934:	bf00      	nop
 8005936:	e7fd      	b.n	8005934 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005938:	4b19      	ldr	r3, [pc, #100]	@ (80059a0 <xTimerGenericCommand+0x98>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d02a      	beq.n	8005996 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b05      	cmp	r3, #5
 8005950:	dc18      	bgt.n	8005984 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005952:	f7ff fe95 	bl	8005680 <xTaskGetSchedulerState>
 8005956:	4603      	mov	r3, r0
 8005958:	2b02      	cmp	r3, #2
 800595a:	d109      	bne.n	8005970 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800595c:	4b10      	ldr	r3, [pc, #64]	@ (80059a0 <xTimerGenericCommand+0x98>)
 800595e:	6818      	ldr	r0, [r3, #0]
 8005960:	f107 0110 	add.w	r1, r7, #16
 8005964:	2300      	movs	r3, #0
 8005966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005968:	f7fe fc04 	bl	8004174 <xQueueGenericSend>
 800596c:	6278      	str	r0, [r7, #36]	@ 0x24
 800596e:	e012      	b.n	8005996 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005970:	4b0b      	ldr	r3, [pc, #44]	@ (80059a0 <xTimerGenericCommand+0x98>)
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	f107 0110 	add.w	r1, r7, #16
 8005978:	2300      	movs	r3, #0
 800597a:	2200      	movs	r2, #0
 800597c:	f7fe fbfa 	bl	8004174 <xQueueGenericSend>
 8005980:	6278      	str	r0, [r7, #36]	@ 0x24
 8005982:	e008      	b.n	8005996 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005984:	4b06      	ldr	r3, [pc, #24]	@ (80059a0 <xTimerGenericCommand+0x98>)
 8005986:	6818      	ldr	r0, [r3, #0]
 8005988:	f107 0110 	add.w	r1, r7, #16
 800598c:	2300      	movs	r3, #0
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	f7fe fcf2 	bl	8004378 <xQueueGenericSendFromISR>
 8005994:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005998:	4618      	mov	r0, r3
 800599a:	3728      	adds	r7, #40	@ 0x28
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000d54 	.word	0x20000d54

080059a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ae:	4b23      	ldr	r3, [pc, #140]	@ (8005a3c <prvProcessExpiredTimer+0x98>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	3304      	adds	r3, #4
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fe faa5 	bl	8003f0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d023      	beq.n	8005a18 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	699a      	ldr	r2, [r3, #24]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	18d1      	adds	r1, r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	6978      	ldr	r0, [r7, #20]
 80059de:	f000 f8d5 	bl	8005b8c <prvInsertTimerInActiveList>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d020      	beq.n	8005a2a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059e8:	2300      	movs	r3, #0
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	2300      	movs	r3, #0
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	2100      	movs	r1, #0
 80059f2:	6978      	ldr	r0, [r7, #20]
 80059f4:	f7ff ff88 	bl	8005908 <xTimerGenericCommand>
 80059f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d114      	bne.n	8005a2a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	60fb      	str	r3, [r7, #12]
}
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	e7fd      	b.n	8005a14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a1e:	f023 0301 	bic.w	r3, r3, #1
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	6978      	ldr	r0, [r7, #20]
 8005a30:	4798      	blx	r3
}
 8005a32:	bf00      	nop
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000d4c 	.word	0x20000d4c

08005a40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a48:	f107 0308 	add.w	r3, r7, #8
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 f859 	bl	8005b04 <prvGetNextExpireTime>
 8005a52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4619      	mov	r1, r3
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f805 	bl	8005a68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a5e:	f000 f8d7 	bl	8005c10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a62:	bf00      	nop
 8005a64:	e7f0      	b.n	8005a48 <prvTimerTask+0x8>
	...

08005a68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a72:	f7ff f97d 	bl	8004d70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a76:	f107 0308 	add.w	r3, r7, #8
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f866 	bl	8005b4c <prvSampleTimeNow>
 8005a80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d130      	bne.n	8005aea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <prvProcessTimerOrBlockTask+0x3c>
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d806      	bhi.n	8005aa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a96:	f7ff f979 	bl	8004d8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a9a:	68f9      	ldr	r1, [r7, #12]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff ff81 	bl	80059a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005aa2:	e024      	b.n	8005aee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005aaa:	4b13      	ldr	r3, [pc, #76]	@ (8005af8 <prvProcessTimerOrBlockTask+0x90>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <prvProcessTimerOrBlockTask+0x50>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <prvProcessTimerOrBlockTask+0x52>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005abc:	4b0f      	ldr	r3, [pc, #60]	@ (8005afc <prvProcessTimerOrBlockTask+0x94>)
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	f7fe ff0f 	bl	80048ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ace:	f7ff f95d 	bl	8004d8c <xTaskResumeAll>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ad8:	4b09      	ldr	r3, [pc, #36]	@ (8005b00 <prvProcessTimerOrBlockTask+0x98>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
}
 8005ae8:	e001      	b.n	8005aee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005aea:	f7ff f94f 	bl	8004d8c <xTaskResumeAll>
}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000d50 	.word	0x20000d50
 8005afc:	20000d54 	.word	0x20000d54
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005b48 <prvGetNextExpireTime+0x44>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <prvGetNextExpireTime+0x16>
 8005b16:	2201      	movs	r2, #1
 8005b18:	e000      	b.n	8005b1c <prvGetNextExpireTime+0x18>
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d105      	bne.n	8005b34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b28:	4b07      	ldr	r3, [pc, #28]	@ (8005b48 <prvGetNextExpireTime+0x44>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e001      	b.n	8005b38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b38:	68fb      	ldr	r3, [r7, #12]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	20000d4c 	.word	0x20000d4c

08005b4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b54:	f7ff f9b8 	bl	8004ec8 <xTaskGetTickCount>
 8005b58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b88 <prvSampleTimeNow+0x3c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d205      	bcs.n	8005b70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b64:	f000 f93a 	bl	8005ddc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	e002      	b.n	8005b76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b76:	4a04      	ldr	r2, [pc, #16]	@ (8005b88 <prvSampleTimeNow+0x3c>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000d5c 	.word	0x20000d5c

08005b8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d812      	bhi.n	8005bd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	1ad2      	subs	r2, r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d302      	bcc.n	8005bc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	e01b      	b.n	8005bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005bc6:	4b10      	ldr	r3, [pc, #64]	@ (8005c08 <prvInsertTimerInActiveList+0x7c>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f7fe f962 	bl	8003e9a <vListInsert>
 8005bd6:	e012      	b.n	8005bfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d206      	bcs.n	8005bee <prvInsertTimerInActiveList+0x62>
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d302      	bcc.n	8005bee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	e007      	b.n	8005bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bee:	4b07      	ldr	r3, [pc, #28]	@ (8005c0c <prvInsertTimerInActiveList+0x80>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f7fe f94e 	bl	8003e9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005bfe:	697b      	ldr	r3, [r7, #20]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	20000d50 	.word	0x20000d50
 8005c0c:	20000d4c 	.word	0x20000d4c

08005c10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08e      	sub	sp, #56	@ 0x38
 8005c14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c16:	e0ce      	b.n	8005db6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	da19      	bge.n	8005c52 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c1e:	1d3b      	adds	r3, r7, #4
 8005c20:	3304      	adds	r3, #4
 8005c22:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	61fb      	str	r3, [r7, #28]
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	e7fd      	b.n	8005c3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c48:	6850      	ldr	r0, [r2, #4]
 8005c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c4c:	6892      	ldr	r2, [r2, #8]
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f2c0 80ae 	blt.w	8005db6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d004      	beq.n	8005c70 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fe f94e 	bl	8003f0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c70:	463b      	mov	r3, r7
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff ff6a 	bl	8005b4c <prvSampleTimeNow>
 8005c78:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b09      	cmp	r3, #9
 8005c7e:	f200 8097 	bhi.w	8005db0 <prvProcessReceivedCommands+0x1a0>
 8005c82:	a201      	add	r2, pc, #4	@ (adr r2, 8005c88 <prvProcessReceivedCommands+0x78>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cb1 	.word	0x08005cb1
 8005c94:	08005d27 	.word	0x08005d27
 8005c98:	08005d3b 	.word	0x08005d3b
 8005c9c:	08005d87 	.word	0x08005d87
 8005ca0:	08005cb1 	.word	0x08005cb1
 8005ca4:	08005cb1 	.word	0x08005cb1
 8005ca8:	08005d27 	.word	0x08005d27
 8005cac:	08005d3b 	.word	0x08005d3b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cb6:	f043 0301 	orr.w	r3, r3, #1
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	18d1      	adds	r1, r2, r3
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cd0:	f7ff ff5c 	bl	8005b8c <prvInsertTimerInActiveList>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d06c      	beq.n	8005db4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ce0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d061      	beq.n	8005db4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	441a      	add	r2, r3
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2100      	movs	r1, #0
 8005d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d02:	f7ff fe01 	bl	8005908 <xTimerGenericCommand>
 8005d06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d152      	bne.n	8005db4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	61bb      	str	r3, [r7, #24]
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	e7fd      	b.n	8005d22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d2c:	f023 0301 	bic.w	r3, r3, #1
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005d38:	e03d      	b.n	8005db6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d40:	f043 0301 	orr.w	r3, r3, #1
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10b      	bne.n	8005d72 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	617b      	str	r3, [r7, #20]
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	e7fd      	b.n	8005d6e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	18d1      	adds	r1, r2, r3
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d80:	f7ff ff04 	bl	8005b8c <prvInsertTimerInActiveList>
					break;
 8005d84:	e017      	b.n	8005db6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005d94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d96:	f000 fc07 	bl	80065a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d9a:	e00c      	b.n	8005db6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005da2:	f023 0301 	bic.w	r3, r3, #1
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005daa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005dae:	e002      	b.n	8005db6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005db0:	bf00      	nop
 8005db2:	e000      	b.n	8005db6 <prvProcessReceivedCommands+0x1a6>
					break;
 8005db4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005db6:	4b08      	ldr	r3, [pc, #32]	@ (8005dd8 <prvProcessReceivedCommands+0x1c8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	1d39      	adds	r1, r7, #4
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe fb78 	bl	80044b4 <xQueueReceive>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f47f af26 	bne.w	8005c18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	3730      	adds	r7, #48	@ 0x30
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000d54 	.word	0x20000d54

08005ddc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005de2:	e049      	b.n	8005e78 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005de4:	4b2e      	ldr	r3, [pc, #184]	@ (8005ea0 <prvSwitchTimerLists+0xc4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dee:	4b2c      	ldr	r3, [pc, #176]	@ (8005ea0 <prvSwitchTimerLists+0xc4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fe f885 	bl	8003f0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d02f      	beq.n	8005e78 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d90e      	bls.n	8005e48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e36:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea0 <prvSwitchTimerLists+0xc4>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f7fe f82a 	bl	8003e9a <vListInsert>
 8005e46:	e017      	b.n	8005e78 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e48:	2300      	movs	r3, #0
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	2100      	movs	r1, #0
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7ff fd58 	bl	8005908 <xTimerGenericCommand>
 8005e58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10b      	bne.n	8005e78 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	603b      	str	r3, [r7, #0]
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	e7fd      	b.n	8005e74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e78:	4b09      	ldr	r3, [pc, #36]	@ (8005ea0 <prvSwitchTimerLists+0xc4>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1b0      	bne.n	8005de4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e82:	4b07      	ldr	r3, [pc, #28]	@ (8005ea0 <prvSwitchTimerLists+0xc4>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e88:	4b06      	ldr	r3, [pc, #24]	@ (8005ea4 <prvSwitchTimerLists+0xc8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a04      	ldr	r2, [pc, #16]	@ (8005ea0 <prvSwitchTimerLists+0xc4>)
 8005e8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e90:	4a04      	ldr	r2, [pc, #16]	@ (8005ea4 <prvSwitchTimerLists+0xc8>)
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	6013      	str	r3, [r2, #0]
}
 8005e96:	bf00      	nop
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000d4c 	.word	0x20000d4c
 8005ea4:	20000d50 	.word	0x20000d50

08005ea8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005eae:	f000 f98b 	bl	80061c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005eb2:	4b15      	ldr	r3, [pc, #84]	@ (8005f08 <prvCheckForValidListAndQueue+0x60>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d120      	bne.n	8005efc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005eba:	4814      	ldr	r0, [pc, #80]	@ (8005f0c <prvCheckForValidListAndQueue+0x64>)
 8005ebc:	f7fd ff9c 	bl	8003df8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ec0:	4813      	ldr	r0, [pc, #76]	@ (8005f10 <prvCheckForValidListAndQueue+0x68>)
 8005ec2:	f7fd ff99 	bl	8003df8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ec6:	4b13      	ldr	r3, [pc, #76]	@ (8005f14 <prvCheckForValidListAndQueue+0x6c>)
 8005ec8:	4a10      	ldr	r2, [pc, #64]	@ (8005f0c <prvCheckForValidListAndQueue+0x64>)
 8005eca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ecc:	4b12      	ldr	r3, [pc, #72]	@ (8005f18 <prvCheckForValidListAndQueue+0x70>)
 8005ece:	4a10      	ldr	r2, [pc, #64]	@ (8005f10 <prvCheckForValidListAndQueue+0x68>)
 8005ed0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	4b11      	ldr	r3, [pc, #68]	@ (8005f1c <prvCheckForValidListAndQueue+0x74>)
 8005ed8:	4a11      	ldr	r2, [pc, #68]	@ (8005f20 <prvCheckForValidListAndQueue+0x78>)
 8005eda:	2110      	movs	r1, #16
 8005edc:	200a      	movs	r0, #10
 8005ede:	f7fe f8a9 	bl	8004034 <xQueueGenericCreateStatic>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4a08      	ldr	r2, [pc, #32]	@ (8005f08 <prvCheckForValidListAndQueue+0x60>)
 8005ee6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ee8:	4b07      	ldr	r3, [pc, #28]	@ (8005f08 <prvCheckForValidListAndQueue+0x60>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d005      	beq.n	8005efc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ef0:	4b05      	ldr	r3, [pc, #20]	@ (8005f08 <prvCheckForValidListAndQueue+0x60>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	490b      	ldr	r1, [pc, #44]	@ (8005f24 <prvCheckForValidListAndQueue+0x7c>)
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe fcce 	bl	8004898 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005efc:	f000 f996 	bl	800622c <vPortExitCritical>
}
 8005f00:	bf00      	nop
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000d54 	.word	0x20000d54
 8005f0c:	20000d24 	.word	0x20000d24
 8005f10:	20000d38 	.word	0x20000d38
 8005f14:	20000d4c 	.word	0x20000d4c
 8005f18:	20000d50 	.word	0x20000d50
 8005f1c:	20000e00 	.word	0x20000e00
 8005f20:	20000d60 	.word	0x20000d60
 8005f24:	08007080 	.word	0x08007080

08005f28 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	@ 0x28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8005f36:	f06f 0301 	mvn.w	r3, #1
 8005f3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f48:	4b06      	ldr	r3, [pc, #24]	@ (8005f64 <xTimerPendFunctionCallFromISR+0x3c>)
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	f107 0114 	add.w	r1, r7, #20
 8005f50:	2300      	movs	r3, #0
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	f7fe fa10 	bl	8004378 <xQueueGenericSendFromISR>
 8005f58:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3728      	adds	r7, #40	@ 0x28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20000d54 	.word	0x20000d54

08005f68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3b04      	subs	r3, #4
 8005f78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3b04      	subs	r3, #4
 8005f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f023 0201 	bic.w	r2, r3, #1
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	3b04      	subs	r3, #4
 8005f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f98:	4a0c      	ldr	r2, [pc, #48]	@ (8005fcc <pxPortInitialiseStack+0x64>)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3b14      	subs	r3, #20
 8005fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3b04      	subs	r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f06f 0202 	mvn.w	r2, #2
 8005fb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3b20      	subs	r3, #32
 8005fbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	08005fd1 	.word	0x08005fd1

08005fd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fda:	4b13      	ldr	r3, [pc, #76]	@ (8006028 <prvTaskExitError+0x58>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	d00b      	beq.n	8005ffc <prvTaskExitError+0x2c>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	60fb      	str	r3, [r7, #12]
}
 8005ff6:	bf00      	nop
 8005ff8:	bf00      	nop
 8005ffa:	e7fd      	b.n	8005ff8 <prvTaskExitError+0x28>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	60bb      	str	r3, [r7, #8]
}
 800600e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006010:	bf00      	nop
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0fc      	beq.n	8006012 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	2000000c 	.word	0x2000000c
 800602c:	00000000 	.word	0x00000000

08006030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006030:	4b07      	ldr	r3, [pc, #28]	@ (8006050 <pxCurrentTCBConst2>)
 8006032:	6819      	ldr	r1, [r3, #0]
 8006034:	6808      	ldr	r0, [r1, #0]
 8006036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603a:	f380 8809 	msr	PSP, r0
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f380 8811 	msr	BASEPRI, r0
 800604a:	4770      	bx	lr
 800604c:	f3af 8000 	nop.w

08006050 <pxCurrentTCBConst2>:
 8006050:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop

08006058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006058:	4808      	ldr	r0, [pc, #32]	@ (800607c <prvPortStartFirstTask+0x24>)
 800605a:	6800      	ldr	r0, [r0, #0]
 800605c:	6800      	ldr	r0, [r0, #0]
 800605e:	f380 8808 	msr	MSP, r0
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8814 	msr	CONTROL, r0
 800606a:	b662      	cpsie	i
 800606c:	b661      	cpsie	f
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	df00      	svc	0
 8006078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800607a:	bf00      	nop
 800607c:	e000ed08 	.word	0xe000ed08

08006080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006086:	4b47      	ldr	r3, [pc, #284]	@ (80061a4 <xPortStartScheduler+0x124>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a47      	ldr	r2, [pc, #284]	@ (80061a8 <xPortStartScheduler+0x128>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10b      	bne.n	80060a8 <xPortStartScheduler+0x28>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	613b      	str	r3, [r7, #16]
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060a8:	4b3e      	ldr	r3, [pc, #248]	@ (80061a4 <xPortStartScheduler+0x124>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a3f      	ldr	r2, [pc, #252]	@ (80061ac <xPortStartScheduler+0x12c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d10b      	bne.n	80060ca <xPortStartScheduler+0x4a>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	60fb      	str	r3, [r7, #12]
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop
 80060c8:	e7fd      	b.n	80060c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060ca:	4b39      	ldr	r3, [pc, #228]	@ (80061b0 <xPortStartScheduler+0x130>)
 80060cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	22ff      	movs	r2, #255	@ 0xff
 80060da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	4b31      	ldr	r3, [pc, #196]	@ (80061b4 <xPortStartScheduler+0x134>)
 80060f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060f2:	4b31      	ldr	r3, [pc, #196]	@ (80061b8 <xPortStartScheduler+0x138>)
 80060f4:	2207      	movs	r2, #7
 80060f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060f8:	e009      	b.n	800610e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80060fa:	4b2f      	ldr	r3, [pc, #188]	@ (80061b8 <xPortStartScheduler+0x138>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3b01      	subs	r3, #1
 8006100:	4a2d      	ldr	r2, [pc, #180]	@ (80061b8 <xPortStartScheduler+0x138>)
 8006102:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	b2db      	uxtb	r3, r3
 800610c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006116:	2b80      	cmp	r3, #128	@ 0x80
 8006118:	d0ef      	beq.n	80060fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800611a:	4b27      	ldr	r3, [pc, #156]	@ (80061b8 <xPortStartScheduler+0x138>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f1c3 0307 	rsb	r3, r3, #7
 8006122:	2b04      	cmp	r3, #4
 8006124:	d00b      	beq.n	800613e <xPortStartScheduler+0xbe>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	60bb      	str	r3, [r7, #8]
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	e7fd      	b.n	800613a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800613e:	4b1e      	ldr	r3, [pc, #120]	@ (80061b8 <xPortStartScheduler+0x138>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	4a1c      	ldr	r2, [pc, #112]	@ (80061b8 <xPortStartScheduler+0x138>)
 8006146:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006148:	4b1b      	ldr	r3, [pc, #108]	@ (80061b8 <xPortStartScheduler+0x138>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006150:	4a19      	ldr	r2, [pc, #100]	@ (80061b8 <xPortStartScheduler+0x138>)
 8006152:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800615c:	4b17      	ldr	r3, [pc, #92]	@ (80061bc <xPortStartScheduler+0x13c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a16      	ldr	r2, [pc, #88]	@ (80061bc <xPortStartScheduler+0x13c>)
 8006162:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006166:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006168:	4b14      	ldr	r3, [pc, #80]	@ (80061bc <xPortStartScheduler+0x13c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a13      	ldr	r2, [pc, #76]	@ (80061bc <xPortStartScheduler+0x13c>)
 800616e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006172:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006174:	f000 f8da 	bl	800632c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006178:	4b11      	ldr	r3, [pc, #68]	@ (80061c0 <xPortStartScheduler+0x140>)
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800617e:	f000 f8f9 	bl	8006374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006182:	4b10      	ldr	r3, [pc, #64]	@ (80061c4 <xPortStartScheduler+0x144>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a0f      	ldr	r2, [pc, #60]	@ (80061c4 <xPortStartScheduler+0x144>)
 8006188:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800618c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800618e:	f7ff ff63 	bl	8006058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006192:	f7fe ff63 	bl	800505c <vTaskSwitchContext>
	prvTaskExitError();
 8006196:	f7ff ff1b 	bl	8005fd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	e000ed00 	.word	0xe000ed00
 80061a8:	410fc271 	.word	0x410fc271
 80061ac:	410fc270 	.word	0x410fc270
 80061b0:	e000e400 	.word	0xe000e400
 80061b4:	20000e50 	.word	0x20000e50
 80061b8:	20000e54 	.word	0x20000e54
 80061bc:	e000ed20 	.word	0xe000ed20
 80061c0:	2000000c 	.word	0x2000000c
 80061c4:	e000ef34 	.word	0xe000ef34

080061c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	607b      	str	r3, [r7, #4]
}
 80061e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061e2:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <vPortEnterCritical+0x5c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3301      	adds	r3, #1
 80061e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006224 <vPortEnterCritical+0x5c>)
 80061ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <vPortEnterCritical+0x5c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d110      	bne.n	8006216 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006228 <vPortEnterCritical+0x60>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <vPortEnterCritical+0x4e>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	603b      	str	r3, [r7, #0]
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	e7fd      	b.n	8006212 <vPortEnterCritical+0x4a>
	}
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	2000000c 	.word	0x2000000c
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006232:	4b12      	ldr	r3, [pc, #72]	@ (800627c <vPortExitCritical+0x50>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10b      	bne.n	8006252 <vPortExitCritical+0x26>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	607b      	str	r3, [r7, #4]
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	e7fd      	b.n	800624e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006252:	4b0a      	ldr	r3, [pc, #40]	@ (800627c <vPortExitCritical+0x50>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3b01      	subs	r3, #1
 8006258:	4a08      	ldr	r2, [pc, #32]	@ (800627c <vPortExitCritical+0x50>)
 800625a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800625c:	4b07      	ldr	r3, [pc, #28]	@ (800627c <vPortExitCritical+0x50>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <vPortExitCritical+0x44>
 8006264:	2300      	movs	r3, #0
 8006266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f383 8811 	msr	BASEPRI, r3
}
 800626e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	2000000c 	.word	0x2000000c

08006280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006280:	f3ef 8009 	mrs	r0, PSP
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	4b15      	ldr	r3, [pc, #84]	@ (80062e0 <pxCurrentTCBConst>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	f01e 0f10 	tst.w	lr, #16
 8006290:	bf08      	it	eq
 8006292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629a:	6010      	str	r0, [r2, #0]
 800629c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80062a4:	f380 8811 	msr	BASEPRI, r0
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f7fe fed4 	bl	800505c <vTaskSwitchContext>
 80062b4:	f04f 0000 	mov.w	r0, #0
 80062b8:	f380 8811 	msr	BASEPRI, r0
 80062bc:	bc09      	pop	{r0, r3}
 80062be:	6819      	ldr	r1, [r3, #0]
 80062c0:	6808      	ldr	r0, [r1, #0]
 80062c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c6:	f01e 0f10 	tst.w	lr, #16
 80062ca:	bf08      	it	eq
 80062cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062d0:	f380 8809 	msr	PSP, r0
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	f3af 8000 	nop.w

080062e0 <pxCurrentTCBConst>:
 80062e0:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	607b      	str	r3, [r7, #4]
}
 8006300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006302:	f7fe fdf1 	bl	8004ee8 <xTaskIncrementTick>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800630c:	4b06      	ldr	r3, [pc, #24]	@ (8006328 <xPortSysTickHandler+0x40>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f383 8811 	msr	BASEPRI, r3
}
 800631e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800632c:	b480      	push	{r7}
 800632e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006330:	4b0b      	ldr	r3, [pc, #44]	@ (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006336:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <vPortSetupTimerInterrupt+0x38>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800633c:	4b0a      	ldr	r3, [pc, #40]	@ (8006368 <vPortSetupTimerInterrupt+0x3c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a0a      	ldr	r2, [pc, #40]	@ (800636c <vPortSetupTimerInterrupt+0x40>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	4a09      	ldr	r2, [pc, #36]	@ (8006370 <vPortSetupTimerInterrupt+0x44>)
 800634a:	3b01      	subs	r3, #1
 800634c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800634e:	4b04      	ldr	r3, [pc, #16]	@ (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006350:	2207      	movs	r2, #7
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	e000e010 	.word	0xe000e010
 8006364:	e000e018 	.word	0xe000e018
 8006368:	20000000 	.word	0x20000000
 800636c:	10624dd3 	.word	0x10624dd3
 8006370:	e000e014 	.word	0xe000e014

08006374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006374:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006384 <vPortEnableVFP+0x10>
 8006378:	6801      	ldr	r1, [r0, #0]
 800637a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800637e:	6001      	str	r1, [r0, #0]
 8006380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006382:	bf00      	nop
 8006384:	e000ed88 	.word	0xe000ed88

08006388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800638e:	f3ef 8305 	mrs	r3, IPSR
 8006392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b0f      	cmp	r3, #15
 8006398:	d915      	bls.n	80063c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800639a:	4a18      	ldr	r2, [pc, #96]	@ (80063fc <vPortValidateInterruptPriority+0x74>)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063a4:	4b16      	ldr	r3, [pc, #88]	@ (8006400 <vPortValidateInterruptPriority+0x78>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	7afa      	ldrb	r2, [r7, #11]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d20b      	bcs.n	80063c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	607b      	str	r3, [r7, #4]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006404 <vPortValidateInterruptPriority+0x7c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80063ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006408 <vPortValidateInterruptPriority+0x80>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d90b      	bls.n	80063ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	603b      	str	r3, [r7, #0]
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	e7fd      	b.n	80063ea <vPortValidateInterruptPriority+0x62>
	}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	e000e3f0 	.word	0xe000e3f0
 8006400:	20000e50 	.word	0x20000e50
 8006404:	e000ed0c 	.word	0xe000ed0c
 8006408:	20000e54 	.word	0x20000e54

0800640c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08a      	sub	sp, #40	@ 0x28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006414:	2300      	movs	r3, #0
 8006416:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006418:	f7fe fcaa 	bl	8004d70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800641c:	4b5c      	ldr	r3, [pc, #368]	@ (8006590 <pvPortMalloc+0x184>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006424:	f000 f924 	bl	8006670 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006428:	4b5a      	ldr	r3, [pc, #360]	@ (8006594 <pvPortMalloc+0x188>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4013      	ands	r3, r2
 8006430:	2b00      	cmp	r3, #0
 8006432:	f040 8095 	bne.w	8006560 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01e      	beq.n	800647a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800643c:	2208      	movs	r2, #8
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4413      	add	r3, r2
 8006442:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	2b00      	cmp	r3, #0
 800644c:	d015      	beq.n	800647a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f023 0307 	bic.w	r3, r3, #7
 8006454:	3308      	adds	r3, #8
 8006456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <pvPortMalloc+0x6e>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	617b      	str	r3, [r7, #20]
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop
 8006478:	e7fd      	b.n	8006476 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d06f      	beq.n	8006560 <pvPortMalloc+0x154>
 8006480:	4b45      	ldr	r3, [pc, #276]	@ (8006598 <pvPortMalloc+0x18c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	429a      	cmp	r2, r3
 8006488:	d86a      	bhi.n	8006560 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800648a:	4b44      	ldr	r3, [pc, #272]	@ (800659c <pvPortMalloc+0x190>)
 800648c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800648e:	4b43      	ldr	r3, [pc, #268]	@ (800659c <pvPortMalloc+0x190>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006494:	e004      	b.n	80064a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d903      	bls.n	80064b2 <pvPortMalloc+0xa6>
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f1      	bne.n	8006496 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064b2:	4b37      	ldr	r3, [pc, #220]	@ (8006590 <pvPortMalloc+0x184>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d051      	beq.n	8006560 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2208      	movs	r2, #8
 80064c2:	4413      	add	r3, r2
 80064c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	1ad2      	subs	r2, r2, r3
 80064d6:	2308      	movs	r3, #8
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	429a      	cmp	r2, r3
 80064dc:	d920      	bls.n	8006520 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00b      	beq.n	8006508 <pvPortMalloc+0xfc>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	613b      	str	r3, [r7, #16]
}
 8006502:	bf00      	nop
 8006504:	bf00      	nop
 8006506:	e7fd      	b.n	8006504 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	1ad2      	subs	r2, r2, r3
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800651a:	69b8      	ldr	r0, [r7, #24]
 800651c:	f000 f90a 	bl	8006734 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006520:	4b1d      	ldr	r3, [pc, #116]	@ (8006598 <pvPortMalloc+0x18c>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	4a1b      	ldr	r2, [pc, #108]	@ (8006598 <pvPortMalloc+0x18c>)
 800652c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800652e:	4b1a      	ldr	r3, [pc, #104]	@ (8006598 <pvPortMalloc+0x18c>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b1b      	ldr	r3, [pc, #108]	@ (80065a0 <pvPortMalloc+0x194>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d203      	bcs.n	8006542 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800653a:	4b17      	ldr	r3, [pc, #92]	@ (8006598 <pvPortMalloc+0x18c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a18      	ldr	r2, [pc, #96]	@ (80065a0 <pvPortMalloc+0x194>)
 8006540:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	4b13      	ldr	r3, [pc, #76]	@ (8006594 <pvPortMalloc+0x188>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	431a      	orrs	r2, r3
 800654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006556:	4b13      	ldr	r3, [pc, #76]	@ (80065a4 <pvPortMalloc+0x198>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3301      	adds	r3, #1
 800655c:	4a11      	ldr	r2, [pc, #68]	@ (80065a4 <pvPortMalloc+0x198>)
 800655e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006560:	f7fe fc14 	bl	8004d8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <pvPortMalloc+0x17a>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	60fb      	str	r3, [r7, #12]
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	e7fd      	b.n	8006582 <pvPortMalloc+0x176>
	return pvReturn;
 8006586:	69fb      	ldr	r3, [r7, #28]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3728      	adds	r7, #40	@ 0x28
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20001a18 	.word	0x20001a18
 8006594:	20001a2c 	.word	0x20001a2c
 8006598:	20001a1c 	.word	0x20001a1c
 800659c:	20001a10 	.word	0x20001a10
 80065a0:	20001a20 	.word	0x20001a20
 80065a4:	20001a24 	.word	0x20001a24

080065a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d04f      	beq.n	800665a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065ba:	2308      	movs	r3, #8
 80065bc:	425b      	negs	r3, r3
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4413      	add	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	4b25      	ldr	r3, [pc, #148]	@ (8006664 <vPortFree+0xbc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <vPortFree+0x46>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	60fb      	str	r3, [r7, #12]
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	e7fd      	b.n	80065ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00b      	beq.n	800660e <vPortFree+0x66>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	60bb      	str	r3, [r7, #8]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	4b14      	ldr	r3, [pc, #80]	@ (8006664 <vPortFree+0xbc>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01e      	beq.n	800665a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d11a      	bne.n	800665a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	4b0e      	ldr	r3, [pc, #56]	@ (8006664 <vPortFree+0xbc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	43db      	mvns	r3, r3
 800662e:	401a      	ands	r2, r3
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006634:	f7fe fb9c 	bl	8004d70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	4b0a      	ldr	r3, [pc, #40]	@ (8006668 <vPortFree+0xc0>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4413      	add	r3, r2
 8006642:	4a09      	ldr	r2, [pc, #36]	@ (8006668 <vPortFree+0xc0>)
 8006644:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006646:	6938      	ldr	r0, [r7, #16]
 8006648:	f000 f874 	bl	8006734 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800664c:	4b07      	ldr	r3, [pc, #28]	@ (800666c <vPortFree+0xc4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3301      	adds	r3, #1
 8006652:	4a06      	ldr	r2, [pc, #24]	@ (800666c <vPortFree+0xc4>)
 8006654:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006656:	f7fe fb99 	bl	8004d8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800665a:	bf00      	nop
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20001a2c 	.word	0x20001a2c
 8006668:	20001a1c 	.word	0x20001a1c
 800666c:	20001a28 	.word	0x20001a28

08006670 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006676:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800667a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800667c:	4b27      	ldr	r3, [pc, #156]	@ (800671c <prvHeapInit+0xac>)
 800667e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00c      	beq.n	80066a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3307      	adds	r3, #7
 800668e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0307 	bic.w	r3, r3, #7
 8006696:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	4a1f      	ldr	r2, [pc, #124]	@ (800671c <prvHeapInit+0xac>)
 80066a0:	4413      	add	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006720 <prvHeapInit+0xb0>)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006720 <prvHeapInit+0xb0>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	4413      	add	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066bc:	2208      	movs	r2, #8
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1a9b      	subs	r3, r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0307 	bic.w	r3, r3, #7
 80066ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4a15      	ldr	r2, [pc, #84]	@ (8006724 <prvHeapInit+0xb4>)
 80066d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066d2:	4b14      	ldr	r3, [pc, #80]	@ (8006724 <prvHeapInit+0xb4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2200      	movs	r2, #0
 80066d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066da:	4b12      	ldr	r3, [pc, #72]	@ (8006724 <prvHeapInit+0xb4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	1ad2      	subs	r2, r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006724 <prvHeapInit+0xb4>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006728 <prvHeapInit+0xb8>)
 80066fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	4a09      	ldr	r2, [pc, #36]	@ (800672c <prvHeapInit+0xbc>)
 8006706:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006708:	4b09      	ldr	r3, [pc, #36]	@ (8006730 <prvHeapInit+0xc0>)
 800670a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800670e:	601a      	str	r2, [r3, #0]
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	20000e58 	.word	0x20000e58
 8006720:	20001a10 	.word	0x20001a10
 8006724:	20001a18 	.word	0x20001a18
 8006728:	20001a20 	.word	0x20001a20
 800672c:	20001a1c 	.word	0x20001a1c
 8006730:	20001a2c 	.word	0x20001a2c

08006734 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800673c:	4b28      	ldr	r3, [pc, #160]	@ (80067e0 <prvInsertBlockIntoFreeList+0xac>)
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	e002      	b.n	8006748 <prvInsertBlockIntoFreeList+0x14>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	429a      	cmp	r2, r3
 8006750:	d8f7      	bhi.n	8006742 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	4413      	add	r3, r2
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	429a      	cmp	r2, r3
 8006762:	d108      	bne.n	8006776 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	441a      	add	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	441a      	add	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d118      	bne.n	80067bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <prvInsertBlockIntoFreeList+0xb0>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d00d      	beq.n	80067b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	441a      	add	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	e008      	b.n	80067c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067b2:	4b0c      	ldr	r3, [pc, #48]	@ (80067e4 <prvInsertBlockIntoFreeList+0xb0>)
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	e003      	b.n	80067c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d002      	beq.n	80067d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067d2:	bf00      	nop
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	20001a10 	.word	0x20001a10
 80067e4:	20001a18 	.word	0x20001a18

080067e8 <std>:
 80067e8:	2300      	movs	r3, #0
 80067ea:	b510      	push	{r4, lr}
 80067ec:	4604      	mov	r4, r0
 80067ee:	e9c0 3300 	strd	r3, r3, [r0]
 80067f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067f6:	6083      	str	r3, [r0, #8]
 80067f8:	8181      	strh	r1, [r0, #12]
 80067fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80067fc:	81c2      	strh	r2, [r0, #14]
 80067fe:	6183      	str	r3, [r0, #24]
 8006800:	4619      	mov	r1, r3
 8006802:	2208      	movs	r2, #8
 8006804:	305c      	adds	r0, #92	@ 0x5c
 8006806:	f000 f9a8 	bl	8006b5a <memset>
 800680a:	4b0d      	ldr	r3, [pc, #52]	@ (8006840 <std+0x58>)
 800680c:	6263      	str	r3, [r4, #36]	@ 0x24
 800680e:	4b0d      	ldr	r3, [pc, #52]	@ (8006844 <std+0x5c>)
 8006810:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006812:	4b0d      	ldr	r3, [pc, #52]	@ (8006848 <std+0x60>)
 8006814:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006816:	4b0d      	ldr	r3, [pc, #52]	@ (800684c <std+0x64>)
 8006818:	6323      	str	r3, [r4, #48]	@ 0x30
 800681a:	4b0d      	ldr	r3, [pc, #52]	@ (8006850 <std+0x68>)
 800681c:	6224      	str	r4, [r4, #32]
 800681e:	429c      	cmp	r4, r3
 8006820:	d006      	beq.n	8006830 <std+0x48>
 8006822:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006826:	4294      	cmp	r4, r2
 8006828:	d002      	beq.n	8006830 <std+0x48>
 800682a:	33d0      	adds	r3, #208	@ 0xd0
 800682c:	429c      	cmp	r4, r3
 800682e:	d105      	bne.n	800683c <std+0x54>
 8006830:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006838:	f000 ba08 	b.w	8006c4c <__retarget_lock_init_recursive>
 800683c:	bd10      	pop	{r4, pc}
 800683e:	bf00      	nop
 8006840:	08006ad5 	.word	0x08006ad5
 8006844:	08006af7 	.word	0x08006af7
 8006848:	08006b2f 	.word	0x08006b2f
 800684c:	08006b53 	.word	0x08006b53
 8006850:	20001a30 	.word	0x20001a30

08006854 <stdio_exit_handler>:
 8006854:	4a02      	ldr	r2, [pc, #8]	@ (8006860 <stdio_exit_handler+0xc>)
 8006856:	4903      	ldr	r1, [pc, #12]	@ (8006864 <stdio_exit_handler+0x10>)
 8006858:	4803      	ldr	r0, [pc, #12]	@ (8006868 <stdio_exit_handler+0x14>)
 800685a:	f000 b869 	b.w	8006930 <_fwalk_sglue>
 800685e:	bf00      	nop
 8006860:	20000010 	.word	0x20000010
 8006864:	08006f79 	.word	0x08006f79
 8006868:	20000020 	.word	0x20000020

0800686c <cleanup_stdio>:
 800686c:	6841      	ldr	r1, [r0, #4]
 800686e:	4b0c      	ldr	r3, [pc, #48]	@ (80068a0 <cleanup_stdio+0x34>)
 8006870:	4299      	cmp	r1, r3
 8006872:	b510      	push	{r4, lr}
 8006874:	4604      	mov	r4, r0
 8006876:	d001      	beq.n	800687c <cleanup_stdio+0x10>
 8006878:	f000 fb7e 	bl	8006f78 <_fflush_r>
 800687c:	68a1      	ldr	r1, [r4, #8]
 800687e:	4b09      	ldr	r3, [pc, #36]	@ (80068a4 <cleanup_stdio+0x38>)
 8006880:	4299      	cmp	r1, r3
 8006882:	d002      	beq.n	800688a <cleanup_stdio+0x1e>
 8006884:	4620      	mov	r0, r4
 8006886:	f000 fb77 	bl	8006f78 <_fflush_r>
 800688a:	68e1      	ldr	r1, [r4, #12]
 800688c:	4b06      	ldr	r3, [pc, #24]	@ (80068a8 <cleanup_stdio+0x3c>)
 800688e:	4299      	cmp	r1, r3
 8006890:	d004      	beq.n	800689c <cleanup_stdio+0x30>
 8006892:	4620      	mov	r0, r4
 8006894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006898:	f000 bb6e 	b.w	8006f78 <_fflush_r>
 800689c:	bd10      	pop	{r4, pc}
 800689e:	bf00      	nop
 80068a0:	20001a30 	.word	0x20001a30
 80068a4:	20001a98 	.word	0x20001a98
 80068a8:	20001b00 	.word	0x20001b00

080068ac <global_stdio_init.part.0>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	4b0b      	ldr	r3, [pc, #44]	@ (80068dc <global_stdio_init.part.0+0x30>)
 80068b0:	4c0b      	ldr	r4, [pc, #44]	@ (80068e0 <global_stdio_init.part.0+0x34>)
 80068b2:	4a0c      	ldr	r2, [pc, #48]	@ (80068e4 <global_stdio_init.part.0+0x38>)
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	4620      	mov	r0, r4
 80068b8:	2200      	movs	r2, #0
 80068ba:	2104      	movs	r1, #4
 80068bc:	f7ff ff94 	bl	80067e8 <std>
 80068c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068c4:	2201      	movs	r2, #1
 80068c6:	2109      	movs	r1, #9
 80068c8:	f7ff ff8e 	bl	80067e8 <std>
 80068cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068d0:	2202      	movs	r2, #2
 80068d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d6:	2112      	movs	r1, #18
 80068d8:	f7ff bf86 	b.w	80067e8 <std>
 80068dc:	20001b68 	.word	0x20001b68
 80068e0:	20001a30 	.word	0x20001a30
 80068e4:	08006855 	.word	0x08006855

080068e8 <__sfp_lock_acquire>:
 80068e8:	4801      	ldr	r0, [pc, #4]	@ (80068f0 <__sfp_lock_acquire+0x8>)
 80068ea:	f000 b9b0 	b.w	8006c4e <__retarget_lock_acquire_recursive>
 80068ee:	bf00      	nop
 80068f0:	20001b71 	.word	0x20001b71

080068f4 <__sfp_lock_release>:
 80068f4:	4801      	ldr	r0, [pc, #4]	@ (80068fc <__sfp_lock_release+0x8>)
 80068f6:	f000 b9ab 	b.w	8006c50 <__retarget_lock_release_recursive>
 80068fa:	bf00      	nop
 80068fc:	20001b71 	.word	0x20001b71

08006900 <__sinit>:
 8006900:	b510      	push	{r4, lr}
 8006902:	4604      	mov	r4, r0
 8006904:	f7ff fff0 	bl	80068e8 <__sfp_lock_acquire>
 8006908:	6a23      	ldr	r3, [r4, #32]
 800690a:	b11b      	cbz	r3, 8006914 <__sinit+0x14>
 800690c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006910:	f7ff bff0 	b.w	80068f4 <__sfp_lock_release>
 8006914:	4b04      	ldr	r3, [pc, #16]	@ (8006928 <__sinit+0x28>)
 8006916:	6223      	str	r3, [r4, #32]
 8006918:	4b04      	ldr	r3, [pc, #16]	@ (800692c <__sinit+0x2c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1f5      	bne.n	800690c <__sinit+0xc>
 8006920:	f7ff ffc4 	bl	80068ac <global_stdio_init.part.0>
 8006924:	e7f2      	b.n	800690c <__sinit+0xc>
 8006926:	bf00      	nop
 8006928:	0800686d 	.word	0x0800686d
 800692c:	20001b68 	.word	0x20001b68

08006930 <_fwalk_sglue>:
 8006930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006934:	4607      	mov	r7, r0
 8006936:	4688      	mov	r8, r1
 8006938:	4614      	mov	r4, r2
 800693a:	2600      	movs	r6, #0
 800693c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006940:	f1b9 0901 	subs.w	r9, r9, #1
 8006944:	d505      	bpl.n	8006952 <_fwalk_sglue+0x22>
 8006946:	6824      	ldr	r4, [r4, #0]
 8006948:	2c00      	cmp	r4, #0
 800694a:	d1f7      	bne.n	800693c <_fwalk_sglue+0xc>
 800694c:	4630      	mov	r0, r6
 800694e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006952:	89ab      	ldrh	r3, [r5, #12]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d907      	bls.n	8006968 <_fwalk_sglue+0x38>
 8006958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800695c:	3301      	adds	r3, #1
 800695e:	d003      	beq.n	8006968 <_fwalk_sglue+0x38>
 8006960:	4629      	mov	r1, r5
 8006962:	4638      	mov	r0, r7
 8006964:	47c0      	blx	r8
 8006966:	4306      	orrs	r6, r0
 8006968:	3568      	adds	r5, #104	@ 0x68
 800696a:	e7e9      	b.n	8006940 <_fwalk_sglue+0x10>

0800696c <setvbuf>:
 800696c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006970:	461d      	mov	r5, r3
 8006972:	4b57      	ldr	r3, [pc, #348]	@ (8006ad0 <setvbuf+0x164>)
 8006974:	681f      	ldr	r7, [r3, #0]
 8006976:	4604      	mov	r4, r0
 8006978:	460e      	mov	r6, r1
 800697a:	4690      	mov	r8, r2
 800697c:	b127      	cbz	r7, 8006988 <setvbuf+0x1c>
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	b913      	cbnz	r3, 8006988 <setvbuf+0x1c>
 8006982:	4638      	mov	r0, r7
 8006984:	f7ff ffbc 	bl	8006900 <__sinit>
 8006988:	f1b8 0f02 	cmp.w	r8, #2
 800698c:	d006      	beq.n	800699c <setvbuf+0x30>
 800698e:	f1b8 0f01 	cmp.w	r8, #1
 8006992:	f200 809a 	bhi.w	8006aca <setvbuf+0x15e>
 8006996:	2d00      	cmp	r5, #0
 8006998:	f2c0 8097 	blt.w	8006aca <setvbuf+0x15e>
 800699c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800699e:	07d9      	lsls	r1, r3, #31
 80069a0:	d405      	bmi.n	80069ae <setvbuf+0x42>
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	059a      	lsls	r2, r3, #22
 80069a6:	d402      	bmi.n	80069ae <setvbuf+0x42>
 80069a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069aa:	f000 f950 	bl	8006c4e <__retarget_lock_acquire_recursive>
 80069ae:	4621      	mov	r1, r4
 80069b0:	4638      	mov	r0, r7
 80069b2:	f000 fae1 	bl	8006f78 <_fflush_r>
 80069b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069b8:	b141      	cbz	r1, 80069cc <setvbuf+0x60>
 80069ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069be:	4299      	cmp	r1, r3
 80069c0:	d002      	beq.n	80069c8 <setvbuf+0x5c>
 80069c2:	4638      	mov	r0, r7
 80069c4:	f000 f954 	bl	8006c70 <_free_r>
 80069c8:	2300      	movs	r3, #0
 80069ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80069cc:	2300      	movs	r3, #0
 80069ce:	61a3      	str	r3, [r4, #24]
 80069d0:	6063      	str	r3, [r4, #4]
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	061b      	lsls	r3, r3, #24
 80069d6:	d503      	bpl.n	80069e0 <setvbuf+0x74>
 80069d8:	6921      	ldr	r1, [r4, #16]
 80069da:	4638      	mov	r0, r7
 80069dc:	f000 f948 	bl	8006c70 <_free_r>
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80069e6:	f023 0303 	bic.w	r3, r3, #3
 80069ea:	f1b8 0f02 	cmp.w	r8, #2
 80069ee:	81a3      	strh	r3, [r4, #12]
 80069f0:	d061      	beq.n	8006ab6 <setvbuf+0x14a>
 80069f2:	ab01      	add	r3, sp, #4
 80069f4:	466a      	mov	r2, sp
 80069f6:	4621      	mov	r1, r4
 80069f8:	4638      	mov	r0, r7
 80069fa:	f000 fae5 	bl	8006fc8 <__swhatbuf_r>
 80069fe:	89a3      	ldrh	r3, [r4, #12]
 8006a00:	4318      	orrs	r0, r3
 8006a02:	81a0      	strh	r0, [r4, #12]
 8006a04:	bb2d      	cbnz	r5, 8006a52 <setvbuf+0xe6>
 8006a06:	9d00      	ldr	r5, [sp, #0]
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f000 f97b 	bl	8006d04 <malloc>
 8006a0e:	4606      	mov	r6, r0
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d152      	bne.n	8006aba <setvbuf+0x14e>
 8006a14:	f8dd 9000 	ldr.w	r9, [sp]
 8006a18:	45a9      	cmp	r9, r5
 8006a1a:	d140      	bne.n	8006a9e <setvbuf+0x132>
 8006a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8006a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a24:	f043 0202 	orr.w	r2, r3, #2
 8006a28:	81a2      	strh	r2, [r4, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	60a2      	str	r2, [r4, #8]
 8006a2e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8006a32:	6022      	str	r2, [r4, #0]
 8006a34:	6122      	str	r2, [r4, #16]
 8006a36:	2201      	movs	r2, #1
 8006a38:	6162      	str	r2, [r4, #20]
 8006a3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a3c:	07d6      	lsls	r6, r2, #31
 8006a3e:	d404      	bmi.n	8006a4a <setvbuf+0xde>
 8006a40:	0598      	lsls	r0, r3, #22
 8006a42:	d402      	bmi.n	8006a4a <setvbuf+0xde>
 8006a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a46:	f000 f903 	bl	8006c50 <__retarget_lock_release_recursive>
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	b003      	add	sp, #12
 8006a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a52:	2e00      	cmp	r6, #0
 8006a54:	d0d8      	beq.n	8006a08 <setvbuf+0x9c>
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	b913      	cbnz	r3, 8006a60 <setvbuf+0xf4>
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	f7ff ff50 	bl	8006900 <__sinit>
 8006a60:	f1b8 0f01 	cmp.w	r8, #1
 8006a64:	bf08      	it	eq
 8006a66:	89a3      	ldrheq	r3, [r4, #12]
 8006a68:	6026      	str	r6, [r4, #0]
 8006a6a:	bf04      	itt	eq
 8006a6c:	f043 0301 	orreq.w	r3, r3, #1
 8006a70:	81a3      	strheq	r3, [r4, #12]
 8006a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a76:	f013 0208 	ands.w	r2, r3, #8
 8006a7a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006a7e:	d01e      	beq.n	8006abe <setvbuf+0x152>
 8006a80:	07d9      	lsls	r1, r3, #31
 8006a82:	bf41      	itttt	mi
 8006a84:	2200      	movmi	r2, #0
 8006a86:	426d      	negmi	r5, r5
 8006a88:	60a2      	strmi	r2, [r4, #8]
 8006a8a:	61a5      	strmi	r5, [r4, #24]
 8006a8c:	bf58      	it	pl
 8006a8e:	60a5      	strpl	r5, [r4, #8]
 8006a90:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a92:	07d2      	lsls	r2, r2, #31
 8006a94:	d401      	bmi.n	8006a9a <setvbuf+0x12e>
 8006a96:	059b      	lsls	r3, r3, #22
 8006a98:	d513      	bpl.n	8006ac2 <setvbuf+0x156>
 8006a9a:	2500      	movs	r5, #0
 8006a9c:	e7d5      	b.n	8006a4a <setvbuf+0xde>
 8006a9e:	4648      	mov	r0, r9
 8006aa0:	f000 f930 	bl	8006d04 <malloc>
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d0b8      	beq.n	8006a1c <setvbuf+0xb0>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab0:	81a3      	strh	r3, [r4, #12]
 8006ab2:	464d      	mov	r5, r9
 8006ab4:	e7cf      	b.n	8006a56 <setvbuf+0xea>
 8006ab6:	2500      	movs	r5, #0
 8006ab8:	e7b2      	b.n	8006a20 <setvbuf+0xb4>
 8006aba:	46a9      	mov	r9, r5
 8006abc:	e7f5      	b.n	8006aaa <setvbuf+0x13e>
 8006abe:	60a2      	str	r2, [r4, #8]
 8006ac0:	e7e6      	b.n	8006a90 <setvbuf+0x124>
 8006ac2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ac4:	f000 f8c4 	bl	8006c50 <__retarget_lock_release_recursive>
 8006ac8:	e7e7      	b.n	8006a9a <setvbuf+0x12e>
 8006aca:	f04f 35ff 	mov.w	r5, #4294967295
 8006ace:	e7bc      	b.n	8006a4a <setvbuf+0xde>
 8006ad0:	2000001c 	.word	0x2000001c

08006ad4 <__sread>:
 8006ad4:	b510      	push	{r4, lr}
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006adc:	f000 f868 	bl	8006bb0 <_read_r>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	bfab      	itete	ge
 8006ae4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ae8:	181b      	addge	r3, r3, r0
 8006aea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006aee:	bfac      	ite	ge
 8006af0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006af2:	81a3      	strhlt	r3, [r4, #12]
 8006af4:	bd10      	pop	{r4, pc}

08006af6 <__swrite>:
 8006af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006afa:	461f      	mov	r7, r3
 8006afc:	898b      	ldrh	r3, [r1, #12]
 8006afe:	05db      	lsls	r3, r3, #23
 8006b00:	4605      	mov	r5, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	4616      	mov	r6, r2
 8006b06:	d505      	bpl.n	8006b14 <__swrite+0x1e>
 8006b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f000 f83c 	bl	8006b8c <_lseek_r>
 8006b14:	89a3      	ldrh	r3, [r4, #12]
 8006b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b1e:	81a3      	strh	r3, [r4, #12]
 8006b20:	4632      	mov	r2, r6
 8006b22:	463b      	mov	r3, r7
 8006b24:	4628      	mov	r0, r5
 8006b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2a:	f000 b853 	b.w	8006bd4 <_write_r>

08006b2e <__sseek>:
 8006b2e:	b510      	push	{r4, lr}
 8006b30:	460c      	mov	r4, r1
 8006b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b36:	f000 f829 	bl	8006b8c <_lseek_r>
 8006b3a:	1c43      	adds	r3, r0, #1
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	bf15      	itete	ne
 8006b40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b4a:	81a3      	strheq	r3, [r4, #12]
 8006b4c:	bf18      	it	ne
 8006b4e:	81a3      	strhne	r3, [r4, #12]
 8006b50:	bd10      	pop	{r4, pc}

08006b52 <__sclose>:
 8006b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b56:	f000 b809 	b.w	8006b6c <_close_r>

08006b5a <memset>:
 8006b5a:	4402      	add	r2, r0
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d100      	bne.n	8006b64 <memset+0xa>
 8006b62:	4770      	bx	lr
 8006b64:	f803 1b01 	strb.w	r1, [r3], #1
 8006b68:	e7f9      	b.n	8006b5e <memset+0x4>
	...

08006b6c <_close_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4d06      	ldr	r5, [pc, #24]	@ (8006b88 <_close_r+0x1c>)
 8006b70:	2300      	movs	r3, #0
 8006b72:	4604      	mov	r4, r0
 8006b74:	4608      	mov	r0, r1
 8006b76:	602b      	str	r3, [r5, #0]
 8006b78:	f7f9 fe76 	bl	8000868 <_close>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_close_r+0x1a>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_close_r+0x1a>
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	20001b6c 	.word	0x20001b6c

08006b8c <_lseek_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4d07      	ldr	r5, [pc, #28]	@ (8006bac <_lseek_r+0x20>)
 8006b90:	4604      	mov	r4, r0
 8006b92:	4608      	mov	r0, r1
 8006b94:	4611      	mov	r1, r2
 8006b96:	2200      	movs	r2, #0
 8006b98:	602a      	str	r2, [r5, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f7f9 ff74 	bl	8000a88 <_lseek>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_lseek_r+0x1e>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_lseek_r+0x1e>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	20001b6c 	.word	0x20001b6c

08006bb0 <_read_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4d07      	ldr	r5, [pc, #28]	@ (8006bd0 <_read_r+0x20>)
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	4611      	mov	r1, r2
 8006bba:	2200      	movs	r2, #0
 8006bbc:	602a      	str	r2, [r5, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f7f9 fe6a 	bl	8000898 <_read>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_read_r+0x1e>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_read_r+0x1e>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	20001b6c 	.word	0x20001b6c

08006bd4 <_write_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4d07      	ldr	r5, [pc, #28]	@ (8006bf4 <_write_r+0x20>)
 8006bd8:	4604      	mov	r4, r0
 8006bda:	4608      	mov	r0, r1
 8006bdc:	4611      	mov	r1, r2
 8006bde:	2200      	movs	r2, #0
 8006be0:	602a      	str	r2, [r5, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	f7f9 fe14 	bl	8000810 <_write>
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d102      	bne.n	8006bf2 <_write_r+0x1e>
 8006bec:	682b      	ldr	r3, [r5, #0]
 8006bee:	b103      	cbz	r3, 8006bf2 <_write_r+0x1e>
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	bd38      	pop	{r3, r4, r5, pc}
 8006bf4:	20001b6c 	.word	0x20001b6c

08006bf8 <__errno>:
 8006bf8:	4b01      	ldr	r3, [pc, #4]	@ (8006c00 <__errno+0x8>)
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	2000001c 	.word	0x2000001c

08006c04 <__libc_init_array>:
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	4d0d      	ldr	r5, [pc, #52]	@ (8006c3c <__libc_init_array+0x38>)
 8006c08:	4c0d      	ldr	r4, [pc, #52]	@ (8006c40 <__libc_init_array+0x3c>)
 8006c0a:	1b64      	subs	r4, r4, r5
 8006c0c:	10a4      	asrs	r4, r4, #2
 8006c0e:	2600      	movs	r6, #0
 8006c10:	42a6      	cmp	r6, r4
 8006c12:	d109      	bne.n	8006c28 <__libc_init_array+0x24>
 8006c14:	4d0b      	ldr	r5, [pc, #44]	@ (8006c44 <__libc_init_array+0x40>)
 8006c16:	4c0c      	ldr	r4, [pc, #48]	@ (8006c48 <__libc_init_array+0x44>)
 8006c18:	f000 fa1e 	bl	8007058 <_init>
 8006c1c:	1b64      	subs	r4, r4, r5
 8006c1e:	10a4      	asrs	r4, r4, #2
 8006c20:	2600      	movs	r6, #0
 8006c22:	42a6      	cmp	r6, r4
 8006c24:	d105      	bne.n	8006c32 <__libc_init_array+0x2e>
 8006c26:	bd70      	pop	{r4, r5, r6, pc}
 8006c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c2c:	4798      	blx	r3
 8006c2e:	3601      	adds	r6, #1
 8006c30:	e7ee      	b.n	8006c10 <__libc_init_array+0xc>
 8006c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c36:	4798      	blx	r3
 8006c38:	3601      	adds	r6, #1
 8006c3a:	e7f2      	b.n	8006c22 <__libc_init_array+0x1e>
 8006c3c:	080070d8 	.word	0x080070d8
 8006c40:	080070d8 	.word	0x080070d8
 8006c44:	080070d8 	.word	0x080070d8
 8006c48:	080070dc 	.word	0x080070dc

08006c4c <__retarget_lock_init_recursive>:
 8006c4c:	4770      	bx	lr

08006c4e <__retarget_lock_acquire_recursive>:
 8006c4e:	4770      	bx	lr

08006c50 <__retarget_lock_release_recursive>:
 8006c50:	4770      	bx	lr

08006c52 <memcpy>:
 8006c52:	440a      	add	r2, r1
 8006c54:	4291      	cmp	r1, r2
 8006c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c5a:	d100      	bne.n	8006c5e <memcpy+0xc>
 8006c5c:	4770      	bx	lr
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c68:	4291      	cmp	r1, r2
 8006c6a:	d1f9      	bne.n	8006c60 <memcpy+0xe>
 8006c6c:	bd10      	pop	{r4, pc}
	...

08006c70 <_free_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4605      	mov	r5, r0
 8006c74:	2900      	cmp	r1, #0
 8006c76:	d041      	beq.n	8006cfc <_free_r+0x8c>
 8006c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c7c:	1f0c      	subs	r4, r1, #4
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	bfb8      	it	lt
 8006c82:	18e4      	addlt	r4, r4, r3
 8006c84:	f000 f8e8 	bl	8006e58 <__malloc_lock>
 8006c88:	4a1d      	ldr	r2, [pc, #116]	@ (8006d00 <_free_r+0x90>)
 8006c8a:	6813      	ldr	r3, [r2, #0]
 8006c8c:	b933      	cbnz	r3, 8006c9c <_free_r+0x2c>
 8006c8e:	6063      	str	r3, [r4, #4]
 8006c90:	6014      	str	r4, [r2, #0]
 8006c92:	4628      	mov	r0, r5
 8006c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c98:	f000 b8e4 	b.w	8006e64 <__malloc_unlock>
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	d908      	bls.n	8006cb2 <_free_r+0x42>
 8006ca0:	6820      	ldr	r0, [r4, #0]
 8006ca2:	1821      	adds	r1, r4, r0
 8006ca4:	428b      	cmp	r3, r1
 8006ca6:	bf01      	itttt	eq
 8006ca8:	6819      	ldreq	r1, [r3, #0]
 8006caa:	685b      	ldreq	r3, [r3, #4]
 8006cac:	1809      	addeq	r1, r1, r0
 8006cae:	6021      	streq	r1, [r4, #0]
 8006cb0:	e7ed      	b.n	8006c8e <_free_r+0x1e>
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	b10b      	cbz	r3, 8006cbc <_free_r+0x4c>
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	d9fa      	bls.n	8006cb2 <_free_r+0x42>
 8006cbc:	6811      	ldr	r1, [r2, #0]
 8006cbe:	1850      	adds	r0, r2, r1
 8006cc0:	42a0      	cmp	r0, r4
 8006cc2:	d10b      	bne.n	8006cdc <_free_r+0x6c>
 8006cc4:	6820      	ldr	r0, [r4, #0]
 8006cc6:	4401      	add	r1, r0
 8006cc8:	1850      	adds	r0, r2, r1
 8006cca:	4283      	cmp	r3, r0
 8006ccc:	6011      	str	r1, [r2, #0]
 8006cce:	d1e0      	bne.n	8006c92 <_free_r+0x22>
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	6053      	str	r3, [r2, #4]
 8006cd6:	4408      	add	r0, r1
 8006cd8:	6010      	str	r0, [r2, #0]
 8006cda:	e7da      	b.n	8006c92 <_free_r+0x22>
 8006cdc:	d902      	bls.n	8006ce4 <_free_r+0x74>
 8006cde:	230c      	movs	r3, #12
 8006ce0:	602b      	str	r3, [r5, #0]
 8006ce2:	e7d6      	b.n	8006c92 <_free_r+0x22>
 8006ce4:	6820      	ldr	r0, [r4, #0]
 8006ce6:	1821      	adds	r1, r4, r0
 8006ce8:	428b      	cmp	r3, r1
 8006cea:	bf04      	itt	eq
 8006cec:	6819      	ldreq	r1, [r3, #0]
 8006cee:	685b      	ldreq	r3, [r3, #4]
 8006cf0:	6063      	str	r3, [r4, #4]
 8006cf2:	bf04      	itt	eq
 8006cf4:	1809      	addeq	r1, r1, r0
 8006cf6:	6021      	streq	r1, [r4, #0]
 8006cf8:	6054      	str	r4, [r2, #4]
 8006cfa:	e7ca      	b.n	8006c92 <_free_r+0x22>
 8006cfc:	bd38      	pop	{r3, r4, r5, pc}
 8006cfe:	bf00      	nop
 8006d00:	20001b78 	.word	0x20001b78

08006d04 <malloc>:
 8006d04:	4b02      	ldr	r3, [pc, #8]	@ (8006d10 <malloc+0xc>)
 8006d06:	4601      	mov	r1, r0
 8006d08:	6818      	ldr	r0, [r3, #0]
 8006d0a:	f000 b825 	b.w	8006d58 <_malloc_r>
 8006d0e:	bf00      	nop
 8006d10:	2000001c 	.word	0x2000001c

08006d14 <sbrk_aligned>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	4e0f      	ldr	r6, [pc, #60]	@ (8006d54 <sbrk_aligned+0x40>)
 8006d18:	460c      	mov	r4, r1
 8006d1a:	6831      	ldr	r1, [r6, #0]
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	b911      	cbnz	r1, 8006d26 <sbrk_aligned+0x12>
 8006d20:	f000 f98a 	bl	8007038 <_sbrk_r>
 8006d24:	6030      	str	r0, [r6, #0]
 8006d26:	4621      	mov	r1, r4
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f000 f985 	bl	8007038 <_sbrk_r>
 8006d2e:	1c43      	adds	r3, r0, #1
 8006d30:	d103      	bne.n	8006d3a <sbrk_aligned+0x26>
 8006d32:	f04f 34ff 	mov.w	r4, #4294967295
 8006d36:	4620      	mov	r0, r4
 8006d38:	bd70      	pop	{r4, r5, r6, pc}
 8006d3a:	1cc4      	adds	r4, r0, #3
 8006d3c:	f024 0403 	bic.w	r4, r4, #3
 8006d40:	42a0      	cmp	r0, r4
 8006d42:	d0f8      	beq.n	8006d36 <sbrk_aligned+0x22>
 8006d44:	1a21      	subs	r1, r4, r0
 8006d46:	4628      	mov	r0, r5
 8006d48:	f000 f976 	bl	8007038 <_sbrk_r>
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d1f2      	bne.n	8006d36 <sbrk_aligned+0x22>
 8006d50:	e7ef      	b.n	8006d32 <sbrk_aligned+0x1e>
 8006d52:	bf00      	nop
 8006d54:	20001b74 	.word	0x20001b74

08006d58 <_malloc_r>:
 8006d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d5c:	1ccd      	adds	r5, r1, #3
 8006d5e:	f025 0503 	bic.w	r5, r5, #3
 8006d62:	3508      	adds	r5, #8
 8006d64:	2d0c      	cmp	r5, #12
 8006d66:	bf38      	it	cc
 8006d68:	250c      	movcc	r5, #12
 8006d6a:	2d00      	cmp	r5, #0
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	db01      	blt.n	8006d74 <_malloc_r+0x1c>
 8006d70:	42a9      	cmp	r1, r5
 8006d72:	d904      	bls.n	8006d7e <_malloc_r+0x26>
 8006d74:	230c      	movs	r3, #12
 8006d76:	6033      	str	r3, [r6, #0]
 8006d78:	2000      	movs	r0, #0
 8006d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e54 <_malloc_r+0xfc>
 8006d82:	f000 f869 	bl	8006e58 <__malloc_lock>
 8006d86:	f8d8 3000 	ldr.w	r3, [r8]
 8006d8a:	461c      	mov	r4, r3
 8006d8c:	bb44      	cbnz	r4, 8006de0 <_malloc_r+0x88>
 8006d8e:	4629      	mov	r1, r5
 8006d90:	4630      	mov	r0, r6
 8006d92:	f7ff ffbf 	bl	8006d14 <sbrk_aligned>
 8006d96:	1c43      	adds	r3, r0, #1
 8006d98:	4604      	mov	r4, r0
 8006d9a:	d158      	bne.n	8006e4e <_malloc_r+0xf6>
 8006d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8006da0:	4627      	mov	r7, r4
 8006da2:	2f00      	cmp	r7, #0
 8006da4:	d143      	bne.n	8006e2e <_malloc_r+0xd6>
 8006da6:	2c00      	cmp	r4, #0
 8006da8:	d04b      	beq.n	8006e42 <_malloc_r+0xea>
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	4639      	mov	r1, r7
 8006dae:	4630      	mov	r0, r6
 8006db0:	eb04 0903 	add.w	r9, r4, r3
 8006db4:	f000 f940 	bl	8007038 <_sbrk_r>
 8006db8:	4581      	cmp	r9, r0
 8006dba:	d142      	bne.n	8006e42 <_malloc_r+0xea>
 8006dbc:	6821      	ldr	r1, [r4, #0]
 8006dbe:	1a6d      	subs	r5, r5, r1
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f7ff ffa6 	bl	8006d14 <sbrk_aligned>
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d03a      	beq.n	8006e42 <_malloc_r+0xea>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	442b      	add	r3, r5
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	bb62      	cbnz	r2, 8006e34 <_malloc_r+0xdc>
 8006dda:	f8c8 7000 	str.w	r7, [r8]
 8006dde:	e00f      	b.n	8006e00 <_malloc_r+0xa8>
 8006de0:	6822      	ldr	r2, [r4, #0]
 8006de2:	1b52      	subs	r2, r2, r5
 8006de4:	d420      	bmi.n	8006e28 <_malloc_r+0xd0>
 8006de6:	2a0b      	cmp	r2, #11
 8006de8:	d917      	bls.n	8006e1a <_malloc_r+0xc2>
 8006dea:	1961      	adds	r1, r4, r5
 8006dec:	42a3      	cmp	r3, r4
 8006dee:	6025      	str	r5, [r4, #0]
 8006df0:	bf18      	it	ne
 8006df2:	6059      	strne	r1, [r3, #4]
 8006df4:	6863      	ldr	r3, [r4, #4]
 8006df6:	bf08      	it	eq
 8006df8:	f8c8 1000 	streq.w	r1, [r8]
 8006dfc:	5162      	str	r2, [r4, r5]
 8006dfe:	604b      	str	r3, [r1, #4]
 8006e00:	4630      	mov	r0, r6
 8006e02:	f000 f82f 	bl	8006e64 <__malloc_unlock>
 8006e06:	f104 000b 	add.w	r0, r4, #11
 8006e0a:	1d23      	adds	r3, r4, #4
 8006e0c:	f020 0007 	bic.w	r0, r0, #7
 8006e10:	1ac2      	subs	r2, r0, r3
 8006e12:	bf1c      	itt	ne
 8006e14:	1a1b      	subne	r3, r3, r0
 8006e16:	50a3      	strne	r3, [r4, r2]
 8006e18:	e7af      	b.n	8006d7a <_malloc_r+0x22>
 8006e1a:	6862      	ldr	r2, [r4, #4]
 8006e1c:	42a3      	cmp	r3, r4
 8006e1e:	bf0c      	ite	eq
 8006e20:	f8c8 2000 	streq.w	r2, [r8]
 8006e24:	605a      	strne	r2, [r3, #4]
 8006e26:	e7eb      	b.n	8006e00 <_malloc_r+0xa8>
 8006e28:	4623      	mov	r3, r4
 8006e2a:	6864      	ldr	r4, [r4, #4]
 8006e2c:	e7ae      	b.n	8006d8c <_malloc_r+0x34>
 8006e2e:	463c      	mov	r4, r7
 8006e30:	687f      	ldr	r7, [r7, #4]
 8006e32:	e7b6      	b.n	8006da2 <_malloc_r+0x4a>
 8006e34:	461a      	mov	r2, r3
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	42a3      	cmp	r3, r4
 8006e3a:	d1fb      	bne.n	8006e34 <_malloc_r+0xdc>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	6053      	str	r3, [r2, #4]
 8006e40:	e7de      	b.n	8006e00 <_malloc_r+0xa8>
 8006e42:	230c      	movs	r3, #12
 8006e44:	6033      	str	r3, [r6, #0]
 8006e46:	4630      	mov	r0, r6
 8006e48:	f000 f80c 	bl	8006e64 <__malloc_unlock>
 8006e4c:	e794      	b.n	8006d78 <_malloc_r+0x20>
 8006e4e:	6005      	str	r5, [r0, #0]
 8006e50:	e7d6      	b.n	8006e00 <_malloc_r+0xa8>
 8006e52:	bf00      	nop
 8006e54:	20001b78 	.word	0x20001b78

08006e58 <__malloc_lock>:
 8006e58:	4801      	ldr	r0, [pc, #4]	@ (8006e60 <__malloc_lock+0x8>)
 8006e5a:	f7ff bef8 	b.w	8006c4e <__retarget_lock_acquire_recursive>
 8006e5e:	bf00      	nop
 8006e60:	20001b70 	.word	0x20001b70

08006e64 <__malloc_unlock>:
 8006e64:	4801      	ldr	r0, [pc, #4]	@ (8006e6c <__malloc_unlock+0x8>)
 8006e66:	f7ff bef3 	b.w	8006c50 <__retarget_lock_release_recursive>
 8006e6a:	bf00      	nop
 8006e6c:	20001b70 	.word	0x20001b70

08006e70 <__sflush_r>:
 8006e70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e78:	0716      	lsls	r6, r2, #28
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	d454      	bmi.n	8006f2a <__sflush_r+0xba>
 8006e80:	684b      	ldr	r3, [r1, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	dc02      	bgt.n	8006e8c <__sflush_r+0x1c>
 8006e86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	dd48      	ble.n	8006f1e <__sflush_r+0xae>
 8006e8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e8e:	2e00      	cmp	r6, #0
 8006e90:	d045      	beq.n	8006f1e <__sflush_r+0xae>
 8006e92:	2300      	movs	r3, #0
 8006e94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e98:	682f      	ldr	r7, [r5, #0]
 8006e9a:	6a21      	ldr	r1, [r4, #32]
 8006e9c:	602b      	str	r3, [r5, #0]
 8006e9e:	d030      	beq.n	8006f02 <__sflush_r+0x92>
 8006ea0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	0759      	lsls	r1, r3, #29
 8006ea6:	d505      	bpl.n	8006eb4 <__sflush_r+0x44>
 8006ea8:	6863      	ldr	r3, [r4, #4]
 8006eaa:	1ad2      	subs	r2, r2, r3
 8006eac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006eae:	b10b      	cbz	r3, 8006eb4 <__sflush_r+0x44>
 8006eb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006eb2:	1ad2      	subs	r2, r2, r3
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006eb8:	6a21      	ldr	r1, [r4, #32]
 8006eba:	4628      	mov	r0, r5
 8006ebc:	47b0      	blx	r6
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	d106      	bne.n	8006ed2 <__sflush_r+0x62>
 8006ec4:	6829      	ldr	r1, [r5, #0]
 8006ec6:	291d      	cmp	r1, #29
 8006ec8:	d82b      	bhi.n	8006f22 <__sflush_r+0xb2>
 8006eca:	4a2a      	ldr	r2, [pc, #168]	@ (8006f74 <__sflush_r+0x104>)
 8006ecc:	410a      	asrs	r2, r1
 8006ece:	07d6      	lsls	r6, r2, #31
 8006ed0:	d427      	bmi.n	8006f22 <__sflush_r+0xb2>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	6062      	str	r2, [r4, #4]
 8006ed6:	04d9      	lsls	r1, r3, #19
 8006ed8:	6922      	ldr	r2, [r4, #16]
 8006eda:	6022      	str	r2, [r4, #0]
 8006edc:	d504      	bpl.n	8006ee8 <__sflush_r+0x78>
 8006ede:	1c42      	adds	r2, r0, #1
 8006ee0:	d101      	bne.n	8006ee6 <__sflush_r+0x76>
 8006ee2:	682b      	ldr	r3, [r5, #0]
 8006ee4:	b903      	cbnz	r3, 8006ee8 <__sflush_r+0x78>
 8006ee6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ee8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006eea:	602f      	str	r7, [r5, #0]
 8006eec:	b1b9      	cbz	r1, 8006f1e <__sflush_r+0xae>
 8006eee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ef2:	4299      	cmp	r1, r3
 8006ef4:	d002      	beq.n	8006efc <__sflush_r+0x8c>
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f7ff feba 	bl	8006c70 <_free_r>
 8006efc:	2300      	movs	r3, #0
 8006efe:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f00:	e00d      	b.n	8006f1e <__sflush_r+0xae>
 8006f02:	2301      	movs	r3, #1
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b0      	blx	r6
 8006f08:	4602      	mov	r2, r0
 8006f0a:	1c50      	adds	r0, r2, #1
 8006f0c:	d1c9      	bne.n	8006ea2 <__sflush_r+0x32>
 8006f0e:	682b      	ldr	r3, [r5, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0c6      	beq.n	8006ea2 <__sflush_r+0x32>
 8006f14:	2b1d      	cmp	r3, #29
 8006f16:	d001      	beq.n	8006f1c <__sflush_r+0xac>
 8006f18:	2b16      	cmp	r3, #22
 8006f1a:	d11e      	bne.n	8006f5a <__sflush_r+0xea>
 8006f1c:	602f      	str	r7, [r5, #0]
 8006f1e:	2000      	movs	r0, #0
 8006f20:	e022      	b.n	8006f68 <__sflush_r+0xf8>
 8006f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f26:	b21b      	sxth	r3, r3
 8006f28:	e01b      	b.n	8006f62 <__sflush_r+0xf2>
 8006f2a:	690f      	ldr	r7, [r1, #16]
 8006f2c:	2f00      	cmp	r7, #0
 8006f2e:	d0f6      	beq.n	8006f1e <__sflush_r+0xae>
 8006f30:	0793      	lsls	r3, r2, #30
 8006f32:	680e      	ldr	r6, [r1, #0]
 8006f34:	bf08      	it	eq
 8006f36:	694b      	ldreq	r3, [r1, #20]
 8006f38:	600f      	str	r7, [r1, #0]
 8006f3a:	bf18      	it	ne
 8006f3c:	2300      	movne	r3, #0
 8006f3e:	eba6 0807 	sub.w	r8, r6, r7
 8006f42:	608b      	str	r3, [r1, #8]
 8006f44:	f1b8 0f00 	cmp.w	r8, #0
 8006f48:	dde9      	ble.n	8006f1e <__sflush_r+0xae>
 8006f4a:	6a21      	ldr	r1, [r4, #32]
 8006f4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f4e:	4643      	mov	r3, r8
 8006f50:	463a      	mov	r2, r7
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b0      	blx	r6
 8006f56:	2800      	cmp	r0, #0
 8006f58:	dc08      	bgt.n	8006f6c <__sflush_r+0xfc>
 8006f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f62:	81a3      	strh	r3, [r4, #12]
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
 8006f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f6c:	4407      	add	r7, r0
 8006f6e:	eba8 0800 	sub.w	r8, r8, r0
 8006f72:	e7e7      	b.n	8006f44 <__sflush_r+0xd4>
 8006f74:	dfbffffe 	.word	0xdfbffffe

08006f78 <_fflush_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	690b      	ldr	r3, [r1, #16]
 8006f7c:	4605      	mov	r5, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	b913      	cbnz	r3, 8006f88 <_fflush_r+0x10>
 8006f82:	2500      	movs	r5, #0
 8006f84:	4628      	mov	r0, r5
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	b118      	cbz	r0, 8006f92 <_fflush_r+0x1a>
 8006f8a:	6a03      	ldr	r3, [r0, #32]
 8006f8c:	b90b      	cbnz	r3, 8006f92 <_fflush_r+0x1a>
 8006f8e:	f7ff fcb7 	bl	8006900 <__sinit>
 8006f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0f3      	beq.n	8006f82 <_fflush_r+0xa>
 8006f9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f9c:	07d0      	lsls	r0, r2, #31
 8006f9e:	d404      	bmi.n	8006faa <_fflush_r+0x32>
 8006fa0:	0599      	lsls	r1, r3, #22
 8006fa2:	d402      	bmi.n	8006faa <_fflush_r+0x32>
 8006fa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fa6:	f7ff fe52 	bl	8006c4e <__retarget_lock_acquire_recursive>
 8006faa:	4628      	mov	r0, r5
 8006fac:	4621      	mov	r1, r4
 8006fae:	f7ff ff5f 	bl	8006e70 <__sflush_r>
 8006fb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fb4:	07da      	lsls	r2, r3, #31
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	d4e4      	bmi.n	8006f84 <_fflush_r+0xc>
 8006fba:	89a3      	ldrh	r3, [r4, #12]
 8006fbc:	059b      	lsls	r3, r3, #22
 8006fbe:	d4e1      	bmi.n	8006f84 <_fflush_r+0xc>
 8006fc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fc2:	f7ff fe45 	bl	8006c50 <__retarget_lock_release_recursive>
 8006fc6:	e7dd      	b.n	8006f84 <_fflush_r+0xc>

08006fc8 <__swhatbuf_r>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	460c      	mov	r4, r1
 8006fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd0:	2900      	cmp	r1, #0
 8006fd2:	b096      	sub	sp, #88	@ 0x58
 8006fd4:	4615      	mov	r5, r2
 8006fd6:	461e      	mov	r6, r3
 8006fd8:	da0d      	bge.n	8006ff6 <__swhatbuf_r+0x2e>
 8006fda:	89a3      	ldrh	r3, [r4, #12]
 8006fdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006fe0:	f04f 0100 	mov.w	r1, #0
 8006fe4:	bf14      	ite	ne
 8006fe6:	2340      	movne	r3, #64	@ 0x40
 8006fe8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006fec:	2000      	movs	r0, #0
 8006fee:	6031      	str	r1, [r6, #0]
 8006ff0:	602b      	str	r3, [r5, #0]
 8006ff2:	b016      	add	sp, #88	@ 0x58
 8006ff4:	bd70      	pop	{r4, r5, r6, pc}
 8006ff6:	466a      	mov	r2, sp
 8006ff8:	f000 f80c 	bl	8007014 <_fstat_r>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	dbec      	blt.n	8006fda <__swhatbuf_r+0x12>
 8007000:	9901      	ldr	r1, [sp, #4]
 8007002:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007006:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800700a:	4259      	negs	r1, r3
 800700c:	4159      	adcs	r1, r3
 800700e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007012:	e7eb      	b.n	8006fec <__swhatbuf_r+0x24>

08007014 <_fstat_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d07      	ldr	r5, [pc, #28]	@ (8007034 <_fstat_r+0x20>)
 8007018:	2300      	movs	r3, #0
 800701a:	4604      	mov	r4, r0
 800701c:	4608      	mov	r0, r1
 800701e:	4611      	mov	r1, r2
 8007020:	602b      	str	r3, [r5, #0]
 8007022:	f7f9 fc61 	bl	80008e8 <_fstat>
 8007026:	1c43      	adds	r3, r0, #1
 8007028:	d102      	bne.n	8007030 <_fstat_r+0x1c>
 800702a:	682b      	ldr	r3, [r5, #0]
 800702c:	b103      	cbz	r3, 8007030 <_fstat_r+0x1c>
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	bd38      	pop	{r3, r4, r5, pc}
 8007032:	bf00      	nop
 8007034:	20001b6c 	.word	0x20001b6c

08007038 <_sbrk_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d06      	ldr	r5, [pc, #24]	@ (8007054 <_sbrk_r+0x1c>)
 800703c:	2300      	movs	r3, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	f7f9 fd2e 	bl	8000aa4 <_sbrk>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_sbrk_r+0x1a>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_sbrk_r+0x1a>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	20001b6c 	.word	0x20001b6c

08007058 <_init>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	bf00      	nop
 800705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705e:	bc08      	pop	{r3}
 8007060:	469e      	mov	lr, r3
 8007062:	4770      	bx	lr

08007064 <_fini>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr
