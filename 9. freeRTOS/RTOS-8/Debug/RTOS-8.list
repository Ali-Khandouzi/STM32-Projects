
RTOS-8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bbc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08007d4c  08007d4c  00008d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f78  08007f78  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f78  08007f78  00008f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f80  08007f80  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f80  08007f80  00008f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f84  08007f84  00008f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007f88  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b68  2000006c  08007ff4  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bd4  08007ff4  00009bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b393  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a3f  00000000  00000000  0002442f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001780  00000000  00000000  00027e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001230  00000000  00000000  000295f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a543  00000000  00000000  0002a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b378  00000000  00000000  00054d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff0c6  00000000  00000000  000700db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016f1a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a0c  00000000  00000000  0016f1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00175bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d34 	.word	0x08007d34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007d34 	.word	0x08007d34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
return 0;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fce4 	bl	8000f60 <HAL_Init>
  RetargetInit(&huart2);
 8000598:	480f      	ldr	r0, [pc, #60]	@ (80005d8 <main+0x48>)
 800059a:	f000 fa9d 	bl	8000ad8 <RetargetInit>
  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f99c 	bl	80008da <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fa1b 	bl	80009dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 f9e9 	bl	800097c <MX_USART2_UART_Init>
  /* Init scheduler */
  osKernelInitialize();
 80005aa:	f003 fcbf 	bl	8003f2c <osKernelInitialize>

  blinkThreadID = osThreadNew(blinkThread, NULL, &blinkThread_attr);
 80005ae:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <main+0x4c>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	480b      	ldr	r0, [pc, #44]	@ (80005e0 <main+0x50>)
 80005b4:	f003 fd04 	bl	8003fc0 <osThreadNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <main+0x54>)
 80005bc:	6013      	str	r3, [r2, #0]
  dumpThreadID = osThreadNew(threadsDumpThread, NULL, &dumpThread_attr);
 80005be:	4a0a      	ldr	r2, [pc, #40]	@ (80005e8 <main+0x58>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	480a      	ldr	r0, [pc, #40]	@ (80005ec <main+0x5c>)
 80005c4:	f003 fcfc 	bl	8003fc0 <osThreadNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a09      	ldr	r2, [pc, #36]	@ (80005f0 <main+0x60>)
 80005cc:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 80005ce:	f003 fcd1 	bl	8003f74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  while (1);
 80005d2:	bf00      	nop
 80005d4:	e7fd      	b.n	80005d2 <main+0x42>
 80005d6:	bf00      	nop
 80005d8:	20000088 	.word	0x20000088
 80005dc:	08007eb4 	.word	0x08007eb4
 80005e0:	080008bd 	.word	0x080008bd
 80005e4:	20000110 	.word	0x20000110
 80005e8:	08007ed8 	.word	0x08007ed8
 80005ec:	080005f5 	.word	0x080005f5
 80005f0:	20000114 	.word	0x20000114

080005f4 <threadsDumpThread>:
}

void threadsDumpThread(void *argument) {
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b089      	sub	sp, #36	@ 0x24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 TaskStatus_t *pxTaskStatusArray = NULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
 char *pcBuf = NULL;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
 char *pcStatus;
 uint32_t ulTotalRuntime;

  while(1) {
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8000604:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000608:	489b      	ldr	r0, [pc, #620]	@ (8000878 <threadsDumpThread+0x284>)
 800060a:	f000 ff75 	bl	80014f8 <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	f040 812d 	bne.w	8000870 <threadsDumpThread+0x27c>
      /* Allocate the message buffer. */
      pcBuf = pvPortMalloc(100 * sizeof(char));
 8000616:	2064      	movs	r0, #100	@ 0x64
 8000618:	f006 fa10 	bl	8006a3c <pvPortMalloc>
 800061c:	6138      	str	r0, [r7, #16]

      /* Allocate an array index for each task. */
      pxTaskStatusArray = pvPortMalloc( uxTaskGetNumberOfTasks() * sizeof( TaskStatus_t ) );
 800061e:	f004 fecb 	bl	80053b8 <uxTaskGetNumberOfTasks>
 8000622:	4602      	mov	r2, r0
 8000624:	4613      	mov	r3, r2
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	4413      	add	r3, r2
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f006 fa05 	bl	8006a3c <pvPortMalloc>
 8000632:	6178      	str	r0, [r7, #20]

      if( pcBuf != NULL && pxTaskStatusArray != NULL ) {
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	2b00      	cmp	r3, #0
 8000638:	f000 811a 	beq.w	8000870 <threadsDumpThread+0x27c>
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	2b00      	cmp	r3, #0
 8000640:	f000 8116 	beq.w	8000870 <threadsDumpThread+0x27c>
        /* Generate the (binary) data. */
        uxTaskGetSystemState( pxTaskStatusArray, uxTaskGetNumberOfTasks(), &ulTotalRuntime );
 8000644:	f004 feb8 	bl	80053b8 <uxTaskGetNumberOfTasks>
 8000648:	4601      	mov	r1, r0
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	461a      	mov	r2, r3
 8000650:	6978      	ldr	r0, [r7, #20]
 8000652:	f004 febd 	bl	80053d0 <uxTaskGetSystemState>

        sprintf(pcBuf, "         LIST OF RUNNING THREADS(%lu)         \r\n-----------------------------------------\r\n", uxTaskGetNumberOfTasks());
 8000656:	f004 feaf 	bl	80053b8 <uxTaskGetNumberOfTasks>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	4987      	ldr	r1, [pc, #540]	@ (800087c <threadsDumpThread+0x288>)
 8000660:	6938      	ldr	r0, [r7, #16]
 8000662:	f006 fd4f 	bl	8007104 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)pcBuf, strlen(pcBuf), HAL_MAX_DELAY);
 8000666:	6938      	ldr	r0, [r7, #16]
 8000668:	f7ff fdb2 	bl	80001d0 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	6939      	ldr	r1, [r7, #16]
 8000676:	4882      	ldr	r0, [pc, #520]	@ (8000880 <threadsDumpThread+0x28c>)
 8000678:	f002 fdee 	bl	8003258 <HAL_UART_Transmit>

        for(uint16_t i = 0; i < uxTaskGetNumberOfTasks(); i++ )
 800067c:	2300      	movs	r3, #0
 800067e:	837b      	strh	r3, [r7, #26]
 8000680:	e0e9      	b.n	8000856 <threadsDumpThread+0x262>
        {
          sprintf(pcBuf, "Thread: %s\r\n", pxTaskStatusArray[i].pcTaskName);
 8000682:	8b7a      	ldrh	r2, [r7, #26]
 8000684:	4613      	mov	r3, r2
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	4413      	add	r3, r2
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	461a      	mov	r2, r3
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	4413      	add	r3, r2
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	461a      	mov	r2, r3
 8000696:	497b      	ldr	r1, [pc, #492]	@ (8000884 <threadsDumpThread+0x290>)
 8000698:	6938      	ldr	r0, [r7, #16]
 800069a:	f006 fd33 	bl	8007104 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)pcBuf, strlen(pcBuf), HAL_MAX_DELAY);
 800069e:	6938      	ldr	r0, [r7, #16]
 80006a0:	f7ff fd96 	bl	80001d0 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	6939      	ldr	r1, [r7, #16]
 80006ae:	4874      	ldr	r0, [pc, #464]	@ (8000880 <threadsDumpThread+0x28c>)
 80006b0:	f002 fdd2 	bl	8003258 <HAL_UART_Transmit>

          sprintf(pcBuf, "Thread ID: %lu\r\n", pxTaskStatusArray[i].xTaskNumber);
 80006b4:	8b7a      	ldrh	r2, [r7, #26]
 80006b6:	4613      	mov	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	4413      	add	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	461a      	mov	r2, r3
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	4413      	add	r3, r2
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	461a      	mov	r2, r3
 80006c8:	496f      	ldr	r1, [pc, #444]	@ (8000888 <threadsDumpThread+0x294>)
 80006ca:	6938      	ldr	r0, [r7, #16]
 80006cc:	f006 fd1a 	bl	8007104 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)pcBuf, strlen(pcBuf), HAL_MAX_DELAY);
 80006d0:	6938      	ldr	r0, [r7, #16]
 80006d2:	f7ff fd7d 	bl	80001d0 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b29a      	uxth	r2, r3
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	6939      	ldr	r1, [r7, #16]
 80006e0:	4867      	ldr	r0, [pc, #412]	@ (8000880 <threadsDumpThread+0x28c>)
 80006e2:	f002 fdb9 	bl	8003258 <HAL_UART_Transmit>

          switch (pxTaskStatusArray[i].eCurrentState) {
 80006e6:	8b7a      	ldrh	r2, [r7, #26]
 80006e8:	4613      	mov	r3, r2
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	4413      	add	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	461a      	mov	r2, r3
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	4413      	add	r3, r2
 80006f6:	7b1b      	ldrb	r3, [r3, #12]
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d81c      	bhi.n	8000736 <threadsDumpThread+0x142>
 80006fc:	a201      	add	r2, pc, #4	@ (adr r2, 8000704 <threadsDumpThread+0x110>)
 80006fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000702:	bf00      	nop
 8000704:	08000719 	.word	0x08000719
 8000708:	0800071f 	.word	0x0800071f
 800070c:	08000725 	.word	0x08000725
 8000710:	0800072b 	.word	0x0800072b
 8000714:	08000731 	.word	0x08000731
          case eRunning:
            pcStatus = "RUNNING";
 8000718:	4b5c      	ldr	r3, [pc, #368]	@ (800088c <threadsDumpThread+0x298>)
 800071a:	61fb      	str	r3, [r7, #28]
            break;
 800071c:	e00e      	b.n	800073c <threadsDumpThread+0x148>
          case eReady:
            pcStatus = "READY";
 800071e:	4b5c      	ldr	r3, [pc, #368]	@ (8000890 <threadsDumpThread+0x29c>)
 8000720:	61fb      	str	r3, [r7, #28]
            break;
 8000722:	e00b      	b.n	800073c <threadsDumpThread+0x148>
          case eBlocked:
            pcStatus = "BLOCKED";
 8000724:	4b5b      	ldr	r3, [pc, #364]	@ (8000894 <threadsDumpThread+0x2a0>)
 8000726:	61fb      	str	r3, [r7, #28]
            break;
 8000728:	e008      	b.n	800073c <threadsDumpThread+0x148>
          case eSuspended:
            pcStatus = "SUSPENDED";
 800072a:	4b5b      	ldr	r3, [pc, #364]	@ (8000898 <threadsDumpThread+0x2a4>)
 800072c:	61fb      	str	r3, [r7, #28]
            break;
 800072e:	e005      	b.n	800073c <threadsDumpThread+0x148>
          case eDeleted:
            pcStatus = "DELETED";
 8000730:	4b5a      	ldr	r3, [pc, #360]	@ (800089c <threadsDumpThread+0x2a8>)
 8000732:	61fb      	str	r3, [r7, #28]
            break;
 8000734:	e002      	b.n	800073c <threadsDumpThread+0x148>

          default: /* Should not get here, but it is included
                      to prevent static checking errors. */
            pcStatus = "UNKNOWN";
 8000736:	4b5a      	ldr	r3, [pc, #360]	@ (80008a0 <threadsDumpThread+0x2ac>)
 8000738:	61fb      	str	r3, [r7, #28]
            break;
 800073a:	bf00      	nop
          }

          sprintf(pcBuf, "\tStatus: %s\r\n", pcStatus);
 800073c:	69fa      	ldr	r2, [r7, #28]
 800073e:	4959      	ldr	r1, [pc, #356]	@ (80008a4 <threadsDumpThread+0x2b0>)
 8000740:	6938      	ldr	r0, [r7, #16]
 8000742:	f006 fcdf 	bl	8007104 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)pcBuf, strlen(pcBuf), HAL_MAX_DELAY);
 8000746:	6938      	ldr	r0, [r7, #16]
 8000748:	f7ff fd42 	bl	80001d0 <strlen>
 800074c:	4603      	mov	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	6939      	ldr	r1, [r7, #16]
 8000756:	484a      	ldr	r0, [pc, #296]	@ (8000880 <threadsDumpThread+0x28c>)
 8000758:	f002 fd7e 	bl	8003258 <HAL_UART_Transmit>

          sprintf(pcBuf, "\tStack watermark number: %d\r\n", pxTaskStatusArray[i].usStackHighWaterMark);
 800075c:	8b7a      	ldrh	r2, [r7, #26]
 800075e:	4613      	mov	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	4413      	add	r3, r2
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	461a      	mov	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	8c1b      	ldrh	r3, [r3, #32]
 800076e:	461a      	mov	r2, r3
 8000770:	494d      	ldr	r1, [pc, #308]	@ (80008a8 <threadsDumpThread+0x2b4>)
 8000772:	6938      	ldr	r0, [r7, #16]
 8000774:	f006 fcc6 	bl	8007104 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)pcBuf, strlen(pcBuf), HAL_MAX_DELAY);
 8000778:	6938      	ldr	r0, [r7, #16]
 800077a:	f7ff fd29 	bl	80001d0 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	6939      	ldr	r1, [r7, #16]
 8000788:	483d      	ldr	r0, [pc, #244]	@ (8000880 <threadsDumpThread+0x28c>)
 800078a:	f002 fd65 	bl	8003258 <HAL_UART_Transmit>

          sprintf(pcBuf, "\tPriority: %lu\r\n", pxTaskStatusArray[i].uxCurrentPriority);
 800078e:	8b7a      	ldrh	r2, [r7, #26]
 8000790:	4613      	mov	r3, r2
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	4413      	add	r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	461a      	mov	r2, r3
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	4413      	add	r3, r2
 800079e:	691b      	ldr	r3, [r3, #16]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4942      	ldr	r1, [pc, #264]	@ (80008ac <threadsDumpThread+0x2b8>)
 80007a4:	6938      	ldr	r0, [r7, #16]
 80007a6:	f006 fcad 	bl	8007104 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)pcBuf, strlen(pcBuf), HAL_MAX_DELAY);
 80007aa:	6938      	ldr	r0, [r7, #16]
 80007ac:	f7ff fd10 	bl	80001d0 <strlen>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	6939      	ldr	r1, [r7, #16]
 80007ba:	4831      	ldr	r0, [pc, #196]	@ (8000880 <threadsDumpThread+0x28c>)
 80007bc:	f002 fd4c 	bl	8003258 <HAL_UART_Transmit>

          sprintf(pcBuf, "\tRun-time time: %lu\r\n", pxTaskStatusArray[i].ulRunTimeCounter);
 80007c0:	8b7a      	ldrh	r2, [r7, #26]
 80007c2:	4613      	mov	r3, r2
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	4413      	add	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	461a      	mov	r2, r3
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	4413      	add	r3, r2
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	461a      	mov	r2, r3
 80007d4:	4936      	ldr	r1, [pc, #216]	@ (80008b0 <threadsDumpThread+0x2bc>)
 80007d6:	6938      	ldr	r0, [r7, #16]
 80007d8:	f006 fc94 	bl	8007104 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)pcBuf, strlen(pcBuf), HAL_MAX_DELAY);
 80007dc:	6938      	ldr	r0, [r7, #16]
 80007de:	f7ff fcf7 	bl	80001d0 <strlen>
 80007e2:	4603      	mov	r3, r0
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	6939      	ldr	r1, [r7, #16]
 80007ec:	4824      	ldr	r0, [pc, #144]	@ (8000880 <threadsDumpThread+0x28c>)
 80007ee:	f002 fd33 	bl	8003258 <HAL_UART_Transmit>

          float data = (float)(((float)pxTaskStatusArray[i].ulRunTimeCounter)/ulTotalRuntime)*100;
 80007f2:	8b7a      	ldrh	r2, [r7, #26]
 80007f4:	4613      	mov	r3, r2
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	4413      	add	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	461a      	mov	r2, r3
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	4413      	add	r3, r2
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	ee07 3a90 	vmov	s15, r3
 8000808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	ee07 3a90 	vmov	s15, r3
 8000812:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800081a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80008b4 <threadsDumpThread+0x2c0>
 800081e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000822:	edc7 7a03 	vstr	s15, [r7, #12]
          sprintf(pcBuf, "\tRun-time time in percentage: %lu%%\r\n", (uint32_t)data);
 8000826:	edd7 7a03 	vldr	s15, [r7, #12]
 800082a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800082e:	ee17 2a90 	vmov	r2, s15
 8000832:	4921      	ldr	r1, [pc, #132]	@ (80008b8 <threadsDumpThread+0x2c4>)
 8000834:	6938      	ldr	r0, [r7, #16]
 8000836:	f006 fc65 	bl	8007104 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)pcBuf, strlen(pcBuf), HAL_MAX_DELAY);
 800083a:	6938      	ldr	r0, [r7, #16]
 800083c:	f7ff fcc8 	bl	80001d0 <strlen>
 8000840:	4603      	mov	r3, r0
 8000842:	b29a      	uxth	r2, r3
 8000844:	f04f 33ff 	mov.w	r3, #4294967295
 8000848:	6939      	ldr	r1, [r7, #16]
 800084a:	480d      	ldr	r0, [pc, #52]	@ (8000880 <threadsDumpThread+0x28c>)
 800084c:	f002 fd04 	bl	8003258 <HAL_UART_Transmit>
        for(uint16_t i = 0; i < uxTaskGetNumberOfTasks(); i++ )
 8000850:	8b7b      	ldrh	r3, [r7, #26]
 8000852:	3301      	adds	r3, #1
 8000854:	837b      	strh	r3, [r7, #26]
 8000856:	8b7c      	ldrh	r4, [r7, #26]
 8000858:	f004 fdae 	bl	80053b8 <uxTaskGetNumberOfTasks>
 800085c:	4603      	mov	r3, r0
 800085e:	429c      	cmp	r4, r3
 8000860:	f4ff af0f 	bcc.w	8000682 <threadsDumpThread+0x8e>
        }

        vPortFree(pcBuf);
 8000864:	6938      	ldr	r0, [r7, #16]
 8000866:	f006 f9b7 	bl	8006bd8 <vPortFree>
        vPortFree(pxTaskStatusArray);
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f006 f9b4 	bl	8006bd8 <vPortFree>
      }
    }
    osDelay(50);
 8000870:	2032      	movs	r0, #50	@ 0x32
 8000872:	f003 fc37 	bl	80040e4 <osDelay>
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8000876:	e6c5      	b.n	8000604 <threadsDumpThread+0x10>
 8000878:	48000800 	.word	0x48000800
 800087c:	08007d64 	.word	0x08007d64
 8000880:	20000088 	.word	0x20000088
 8000884:	08007dc0 	.word	0x08007dc0
 8000888:	08007dd0 	.word	0x08007dd0
 800088c:	08007de4 	.word	0x08007de4
 8000890:	08007dec 	.word	0x08007dec
 8000894:	08007df4 	.word	0x08007df4
 8000898:	08007dfc 	.word	0x08007dfc
 800089c:	08007e08 	.word	0x08007e08
 80008a0:	08007e10 	.word	0x08007e10
 80008a4:	08007e18 	.word	0x08007e18
 80008a8:	08007e28 	.word	0x08007e28
 80008ac:	08007e48 	.word	0x08007e48
 80008b0:	08007e5c 	.word	0x08007e5c
 80008b4:	42c80000 	.word	0x42c80000
 80008b8:	08007e74 	.word	0x08007e74

080008bc <blinkThread>:
  }
}

void blinkThread(void *argument) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  while(1) {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008c4:	2120      	movs	r1, #32
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ca:	f000 fe45 	bl	8001558 <HAL_GPIO_TogglePin>
    osDelay(500);
 80008ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008d2:	f003 fc07 	bl	80040e4 <osDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008d6:	bf00      	nop
 80008d8:	e7f4      	b.n	80008c4 <blinkThread+0x8>

080008da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b096      	sub	sp, #88	@ 0x58
 80008de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2244      	movs	r2, #68	@ 0x44
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f006 fc6e 	bl	80071ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ee:	463b      	mov	r3, r7
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008fc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000900:	f000 fe52 	bl	80015a8 <HAL_PWREx_ControlVoltageScaling>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800090a:	f000 f8df 	bl	8000acc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090e:	2302      	movs	r3, #2
 8000910:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000912:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000918:	2310      	movs	r3, #16
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091c:	2302      	movs	r3, #2
 800091e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000920:	2302      	movs	r3, #2
 8000922:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000924:	2301      	movs	r3, #1
 8000926:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000928:	230a      	movs	r3, #10
 800092a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800092c:	2307      	movs	r3, #7
 800092e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fe89 	bl	8001654 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000948:	f000 f8c0 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094c:	230f      	movs	r3, #15
 800094e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000950:	2303      	movs	r3, #3
 8000952:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	2104      	movs	r1, #4
 8000964:	4618      	mov	r0, r3
 8000966:	f001 fa51 	bl	8001e0c <HAL_RCC_ClockConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000970:	f000 f8ac 	bl	8000acc <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3758      	adds	r7, #88	@ 0x58
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 8000982:	4a15      	ldr	r2, [pc, #84]	@ (80009d8 <MX_USART2_UART_Init+0x5c>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009c0:	f002 fbfc 	bl	80031bc <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 f87f 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000088 	.word	0x20000088
 80009d8:	40004400 	.word	0x40004400

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a2a      	ldr	r2, [pc, #168]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a24      	ldr	r2, [pc, #144]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a18      	ldr	r2, [pc, #96]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2120      	movs	r1, #32
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5a:	f000 fd65 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a64:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <MX_GPIO_Init+0xc8>)
 8000a76:	f000 fb95 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a7a:	2320      	movs	r3, #32
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a94:	f000 fb86 	bl	80011a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	@ 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	48000800 	.word	0x48000800

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aba:	f000 fa71 	bl	8000fa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40000400 	.word	0x40000400

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000ae0:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <RetargetInit+0x28>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <RetargetInit+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6898      	ldr	r0, [r3, #8]
 8000aec:	2300      	movs	r3, #0
 8000aee:	2202      	movs	r2, #2
 8000af0:	2100      	movs	r1, #0
 8000af2:	f006 fa53 	bl	8006f9c <setvbuf>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000118 	.word	0x20000118
 8000b04:	2000001c 	.word	0x2000001c

08000b08 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d002      	beq.n	8000b20 <_write+0x18>
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d111      	bne.n	8000b44 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <_write+0x54>)
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	f002 fb93 	bl	8003258 <HAL_UART_Transmit>
 8000b32:	4603      	mov	r3, r0
 8000b34:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b36:	7dfb      	ldrb	r3, [r7, #23]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <_write+0x38>
      return len;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	e008      	b.n	8000b52 <_write+0x4a>
    else
      return EIO;
 8000b40:	2305      	movs	r3, #5
 8000b42:	e006      	b.n	8000b52 <_write+0x4a>
  }
  errno = EBADF;
 8000b44:	f006 fb90 	bl	8007268 <__errno>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2209      	movs	r2, #9
 8000b4c:	601a      	str	r2, [r3, #0]
  return -1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000118 	.word	0x20000118

08000b60 <_close>:

int _close(int fd) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db04      	blt.n	8000b78 <_close+0x18>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	dc01      	bgt.n	8000b78 <_close+0x18>
    return 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	e006      	b.n	8000b86 <_close+0x26>

  errno = EBADF;
 8000b78:	f006 fb76 	bl	8007268 <__errno>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2209      	movs	r2, #9
 8000b80:	601a      	str	r2, [r3, #0]
  return -1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <_read>:

int _read(int fd, char* ptr, int len) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d110      	bne.n	8000bc4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <_read+0x4c>)
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	2201      	movs	r2, #1
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	f002 fbdc 	bl	800336a <HAL_UART_Receive>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d101      	bne.n	8000bc0 <_read+0x30>
      return 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e008      	b.n	8000bd2 <_read+0x42>
    else
      return EIO;
 8000bc0:	2305      	movs	r3, #5
 8000bc2:	e006      	b.n	8000bd2 <_read+0x42>
  }
  errno = EBADF;
 8000bc4:	f006 fb50 	bl	8007268 <__errno>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2209      	movs	r2, #9
 8000bcc:	601a      	str	r2, [r3, #0]
  return -1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000118 	.word	0x20000118

08000be0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db08      	blt.n	8000c02 <_fstat+0x22>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	dc05      	bgt.n	8000c02 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bfc:	605a      	str	r2, [r3, #4]
    return 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e005      	b.n	8000c0e <_fstat+0x2e>
  }

  errno = EBADF;
 8000c02:	f006 fb31 	bl	8007268 <__errno>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2209      	movs	r2, #9
 8000c0a:	601a      	str	r2, [r3, #0]
  return 0;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c22:	4a10      	ldr	r2, [pc, #64]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	210f      	movs	r1, #15
 8000c52:	f06f 0001 	mvn.w	r0, #1
 8000c56:	f000 fa7b 	bl	8001150 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0ac      	sub	sp, #176	@ 0xb0
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2288      	movs	r2, #136	@ 0x88
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f006 fa9e 	bl	80071ca <memset>
  if(huart->Instance==USART2)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a21      	ldr	r2, [pc, #132]	@ (8000d18 <HAL_UART_MspInit+0xb0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d13b      	bne.n	8000d10 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 fb07 	bl	80022b8 <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cb0:	f7ff ff0c 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb4:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <HAL_UART_MspInit+0xb4>)
 8000cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb8:	4a18      	ldr	r2, [pc, #96]	@ (8000d1c <HAL_UART_MspInit+0xb4>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc0:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <HAL_UART_MspInit+0xb4>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <HAL_UART_MspInit+0xb4>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd0:	4a12      	ldr	r2, [pc, #72]	@ (8000d1c <HAL_UART_MspInit+0xb4>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd8:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <HAL_UART_MspInit+0xb4>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0c:	f000 fa4a 	bl	80011a4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d10:	bf00      	nop
 8000d12:	37b0      	adds	r7, #176	@ 0xb0
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40004400 	.word	0x40004400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	@ 0x38
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000d2e:	4b34      	ldr	r3, [pc, #208]	@ (8000e00 <HAL_InitTick+0xe0>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d32:	4a33      	ldr	r2, [pc, #204]	@ (8000e00 <HAL_InitTick+0xe0>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d3a:	4b31      	ldr	r3, [pc, #196]	@ (8000e00 <HAL_InitTick+0xe0>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d46:	f107 0210 	add.w	r2, r7, #16
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fa1f 	bl	8002194 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d103      	bne.n	8000d68 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d60:	f001 f9ec 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8000d64:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d66:	e004      	b.n	8000d72 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d68:	f001 f9e8 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d74:	4a23      	ldr	r2, [pc, #140]	@ (8000e04 <HAL_InitTick+0xe4>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	0c9b      	lsrs	r3, r3, #18
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000d80:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <HAL_InitTick+0xe8>)
 8000d82:	4a22      	ldr	r2, [pc, #136]	@ (8000e0c <HAL_InitTick+0xec>)
 8000d84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000d86:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <HAL_InitTick+0xe8>)
 8000d88:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d8c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000e08 <HAL_InitTick+0xe8>)
 8000d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d92:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HAL_InitTick+0xe8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <HAL_InitTick+0xe8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da0:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_InitTick+0xe8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000da6:	4818      	ldr	r0, [pc, #96]	@ (8000e08 <HAL_InitTick+0xe8>)
 8000da8:	f001 ff42 	bl	8002c30 <HAL_TIM_Base_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000db2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d11b      	bne.n	8000df2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000dba:	4813      	ldr	r0, [pc, #76]	@ (8000e08 <HAL_InitTick+0xe8>)
 8000dbc:	f001 ff9a 	bl	8002cf4 <HAL_TIM_Base_Start_IT>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000dc6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d111      	bne.n	8000df2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dce:	201d      	movs	r0, #29
 8000dd0:	f000 f9da 	bl	8001188 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b0f      	cmp	r3, #15
 8000dd8:	d808      	bhi.n	8000dec <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	201d      	movs	r0, #29
 8000de0:	f000 f9b6 	bl	8001150 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <HAL_InitTick+0xf0>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e002      	b.n	8000df2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000df2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3738      	adds	r7, #56	@ 0x38
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	431bde83 	.word	0x431bde83
 8000e08:	2000011c 	.word	0x2000011c
 8000e0c:	40000400 	.word	0x40000400
 8000e10:	20000004 	.word	0x20000004

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <NMI_Handler+0x4>

08000e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <TIM3_IRQHandler+0x10>)
 8000e52:	f001 ffbf 	bl	8002dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000011c 	.word	0x2000011c

08000e60 <_lseek>:
  }
  return len;
}

int _lseek(int file, int ptr, int dir)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	@ (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f006 f9dc 	bl	8007268 <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a05      	ldr	r2, [pc, #20]	@ (8000ee0 <_sbrk+0x64>)
 8000ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20018000 	.word	0x20018000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	20000168 	.word	0x20000168
 8000ee4:	20001bd8 	.word	0x20001bd8

08000ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	@ (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f10:	f7ff ffea 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f14:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f16:	490d      	ldr	r1, [pc, #52]	@ (8000f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f18:	4a0d      	ldr	r2, [pc, #52]	@ (8000f50 <LoopForever+0xe>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f1c:	e002      	b.n	8000f24 <LoopCopyDataInit>

08000f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f22:	3304      	adds	r3, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f28:	d3f9      	bcc.n	8000f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f58 <LoopForever+0x16>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f30:	e001      	b.n	8000f36 <LoopFillZerobss>

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f34:	3204      	adds	r2, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f006 f99b 	bl	8007274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f3e:	f7ff fb27 	bl	8000590 <main>

08000f42 <LoopForever>:

LoopForever:
    b LoopForever
 8000f42:	e7fe      	b.n	8000f42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f50:	08007f88 	.word	0x08007f88
  ldr r2, =_sbss
 8000f54:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f58:	20001bd4 	.word	0x20001bd4

08000f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_2_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <HAL_Init+0x3c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <HAL_Init+0x3c>)
 8000f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f76:	2003      	movs	r0, #3
 8000f78:	f000 f8df 	bl	800113a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7c:	200f      	movs	r0, #15
 8000f7e:	f7ff fecf 	bl	8000d20 <HAL_InitTick>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	e001      	b.n	8000f92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f8e:	f7ff fe43 	bl	8000c18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	2000016c 	.word	0x2000016c

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	@ (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2000016c 	.word	0x2000016c

08000fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db0b      	blt.n	800106e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f003 021f 	and.w	r2, r3, #31
 800105c:	4907      	ldr	r1, [pc, #28]	@ (800107c <__NVIC_EnableIRQ+0x38>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	2001      	movs	r0, #1
 8001066:	fa00 f202 	lsl.w	r2, r0, r2
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000e100 	.word	0xe000e100

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	@ (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	@ (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	@ 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	@ 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff4c 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001162:	f7ff ff61 	bl	8001028 <__NVIC_GetPriorityGrouping>
 8001166:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	68b9      	ldr	r1, [r7, #8]
 800116c:	6978      	ldr	r0, [r7, #20]
 800116e:	f7ff ffb1 	bl	80010d4 <NVIC_EncodePriority>
 8001172:	4602      	mov	r2, r0
 8001174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff80 	bl	8001080 <__NVIC_SetPriority>
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff54 	bl	8001044 <__NVIC_EnableIRQ>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b2:	e17f      	b.n	80014b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	2101      	movs	r1, #1
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 8171 	beq.w	80014ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d005      	beq.n	80011e4 <HAL_GPIO_Init+0x40>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d130      	bne.n	8001246 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800121a:	2201      	movs	r2, #1
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	f003 0201 	and.w	r2, r3, #1
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b03      	cmp	r3, #3
 8001250:	d118      	bne.n	8001284 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001258:	2201      	movs	r2, #1
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	08db      	lsrs	r3, r3, #3
 800126e:	f003 0201 	and.w	r2, r3, #1
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b03      	cmp	r3, #3
 800128e:	d017      	beq.n	80012c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d123      	bne.n	8001314 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	6939      	ldr	r1, [r7, #16]
 8001310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0203 	and.w	r2, r3, #3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80ac 	beq.w	80014ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b5f      	ldr	r3, [pc, #380]	@ (80014d4 <HAL_GPIO_Init+0x330>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135a:	4a5e      	ldr	r2, [pc, #376]	@ (80014d4 <HAL_GPIO_Init+0x330>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6613      	str	r3, [r2, #96]	@ 0x60
 8001362:	4b5c      	ldr	r3, [pc, #368]	@ (80014d4 <HAL_GPIO_Init+0x330>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800136e:	4a5a      	ldr	r2, [pc, #360]	@ (80014d8 <HAL_GPIO_Init+0x334>)
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001398:	d025      	beq.n	80013e6 <HAL_GPIO_Init+0x242>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4f      	ldr	r2, [pc, #316]	@ (80014dc <HAL_GPIO_Init+0x338>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d01f      	beq.n	80013e2 <HAL_GPIO_Init+0x23e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4e      	ldr	r2, [pc, #312]	@ (80014e0 <HAL_GPIO_Init+0x33c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d019      	beq.n	80013de <HAL_GPIO_Init+0x23a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4d      	ldr	r2, [pc, #308]	@ (80014e4 <HAL_GPIO_Init+0x340>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0x236>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4c      	ldr	r2, [pc, #304]	@ (80014e8 <HAL_GPIO_Init+0x344>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00d      	beq.n	80013d6 <HAL_GPIO_Init+0x232>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4b      	ldr	r2, [pc, #300]	@ (80014ec <HAL_GPIO_Init+0x348>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d007      	beq.n	80013d2 <HAL_GPIO_Init+0x22e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4a      	ldr	r2, [pc, #296]	@ (80014f0 <HAL_GPIO_Init+0x34c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_GPIO_Init+0x22a>
 80013ca:	2306      	movs	r3, #6
 80013cc:	e00c      	b.n	80013e8 <HAL_GPIO_Init+0x244>
 80013ce:	2307      	movs	r3, #7
 80013d0:	e00a      	b.n	80013e8 <HAL_GPIO_Init+0x244>
 80013d2:	2305      	movs	r3, #5
 80013d4:	e008      	b.n	80013e8 <HAL_GPIO_Init+0x244>
 80013d6:	2304      	movs	r3, #4
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x244>
 80013da:	2303      	movs	r3, #3
 80013dc:	e004      	b.n	80013e8 <HAL_GPIO_Init+0x244>
 80013de:	2302      	movs	r3, #2
 80013e0:	e002      	b.n	80013e8 <HAL_GPIO_Init+0x244>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_GPIO_Init+0x244>
 80013e6:	2300      	movs	r3, #0
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	f002 0203 	and.w	r2, r2, #3
 80013ee:	0092      	lsls	r2, r2, #2
 80013f0:	4093      	lsls	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013f8:	4937      	ldr	r1, [pc, #220]	@ (80014d8 <HAL_GPIO_Init+0x334>)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3302      	adds	r3, #2
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001406:	4b3b      	ldr	r3, [pc, #236]	@ (80014f4 <HAL_GPIO_Init+0x350>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800142a:	4a32      	ldr	r2, [pc, #200]	@ (80014f4 <HAL_GPIO_Init+0x350>)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001430:	4b30      	ldr	r3, [pc, #192]	@ (80014f4 <HAL_GPIO_Init+0x350>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001454:	4a27      	ldr	r2, [pc, #156]	@ (80014f4 <HAL_GPIO_Init+0x350>)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800145a:	4b26      	ldr	r3, [pc, #152]	@ (80014f4 <HAL_GPIO_Init+0x350>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800147e:	4a1d      	ldr	r2, [pc, #116]	@ (80014f4 <HAL_GPIO_Init+0x350>)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001484:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <HAL_GPIO_Init+0x350>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a8:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <HAL_GPIO_Init+0x350>)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f47f ae78 	bne.w	80011b4 <HAL_GPIO_Init+0x10>
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	371c      	adds	r7, #28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000
 80014dc:	48000400 	.word	0x48000400
 80014e0:	48000800 	.word	0x48000800
 80014e4:	48000c00 	.word	0x48000c00
 80014e8:	48001000 	.word	0x48001000
 80014ec:	48001400 	.word	0x48001400
 80014f0:	48001800 	.word	0x48001800
 80014f4:	40010400 	.word	0x40010400

080014f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	887b      	ldrh	r3, [r7, #2]
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e001      	b.n	800151a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001544:	e002      	b.n	800154c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43d9      	mvns	r1, r3
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	400b      	ands	r3, r1
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001590:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40007000 	.word	0x40007000

080015a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015b6:	d130      	bne.n	800161a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015b8:	4b23      	ldr	r3, [pc, #140]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c4:	d038      	beq.n	8001638 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015d6:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2232      	movs	r2, #50	@ 0x32
 80015dc:	fb02 f303 	mul.w	r3, r2, r3
 80015e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0c9b      	lsrs	r3, r3, #18
 80015e8:	3301      	adds	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ec:	e002      	b.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f4:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001600:	d102      	bne.n	8001608 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f2      	bne.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001614:	d110      	bne.n	8001638 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e00f      	b.n	800163a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001626:	d007      	beq.n	8001638 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001630:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001632:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001636:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40007000 	.word	0x40007000
 800164c:	20000000 	.word	0x20000000
 8001650:	431bde83 	.word	0x431bde83

08001654 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e3ca      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001666:	4b97      	ldr	r3, [pc, #604]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001670:	4b94      	ldr	r3, [pc, #592]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80e4 	beq.w	8001850 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <HAL_RCC_OscConfig+0x4a>
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	f040 808b 	bne.w	80017ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2b01      	cmp	r3, #1
 800169a:	f040 8087 	bne.w	80017ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800169e:	4b89      	ldr	r3, [pc, #548]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_RCC_OscConfig+0x62>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e3a2      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1a      	ldr	r2, [r3, #32]
 80016ba:	4b82      	ldr	r3, [pc, #520]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d004      	beq.n	80016d0 <HAL_RCC_OscConfig+0x7c>
 80016c6:	4b7f      	ldr	r3, [pc, #508]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016ce:	e005      	b.n	80016dc <HAL_RCC_OscConfig+0x88>
 80016d0:	4b7c      	ldr	r3, [pc, #496]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016dc:	4293      	cmp	r3, r2
 80016de:	d223      	bcs.n	8001728 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fd87 	bl	80021f8 <RCC_SetFlashLatencyFromMSIRange>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e383      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f4:	4b73      	ldr	r3, [pc, #460]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a72      	ldr	r2, [pc, #456]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b70      	ldr	r3, [pc, #448]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	496d      	ldr	r1, [pc, #436]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001712:	4b6c      	ldr	r3, [pc, #432]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	4968      	ldr	r1, [pc, #416]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001722:	4313      	orrs	r3, r2
 8001724:	604b      	str	r3, [r1, #4]
 8001726:	e025      	b.n	8001774 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001728:	4b66      	ldr	r3, [pc, #408]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a65      	ldr	r2, [pc, #404]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b63      	ldr	r3, [pc, #396]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4960      	ldr	r1, [pc, #384]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001746:	4b5f      	ldr	r3, [pc, #380]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	495b      	ldr	r1, [pc, #364]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001756:	4313      	orrs	r3, r2
 8001758:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d109      	bne.n	8001774 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fd47 	bl	80021f8 <RCC_SetFlashLatencyFromMSIRange>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e343      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001774:	f000 fc4a 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001778:	4602      	mov	r2, r0
 800177a:	4b52      	ldr	r3, [pc, #328]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	4950      	ldr	r1, [pc, #320]	@ (80018c8 <HAL_RCC_OscConfig+0x274>)
 8001786:	5ccb      	ldrb	r3, [r1, r3]
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	4a4e      	ldr	r2, [pc, #312]	@ (80018cc <HAL_RCC_OscConfig+0x278>)
 8001792:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001794:	4b4e      	ldr	r3, [pc, #312]	@ (80018d0 <HAL_RCC_OscConfig+0x27c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fac1 	bl	8000d20 <HAL_InitTick>
 800179e:	4603      	mov	r3, r0
 80017a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d052      	beq.n	800184e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	e327      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d032      	beq.n	800181a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017b4:	4b43      	ldr	r3, [pc, #268]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a42      	ldr	r2, [pc, #264]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fc02 	bl	8000fc8 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c8:	f7ff fbfe 	bl	8000fc8 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e310      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017da:	4b3a      	ldr	r3, [pc, #232]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e6:	4b37      	ldr	r3, [pc, #220]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a36      	ldr	r2, [pc, #216]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017ec:	f043 0308 	orr.w	r3, r3, #8
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b34      	ldr	r3, [pc, #208]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4931      	ldr	r1, [pc, #196]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001804:	4b2f      	ldr	r3, [pc, #188]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	492c      	ldr	r1, [pc, #176]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
 8001818:	e01a      	b.n	8001850 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800181a:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a29      	ldr	r2, [pc, #164]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001826:	f7ff fbcf 	bl	8000fc8 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800182e:	f7ff fbcb 	bl	8000fc8 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e2dd      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001840:	4b20      	ldr	r3, [pc, #128]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0x1da>
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800184e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d074      	beq.n	8001946 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b08      	cmp	r3, #8
 8001860:	d005      	beq.n	800186e <HAL_RCC_OscConfig+0x21a>
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	d10e      	bne.n	8001886 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b03      	cmp	r3, #3
 800186c:	d10b      	bne.n	8001886 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d064      	beq.n	8001944 <HAL_RCC_OscConfig+0x2f0>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d160      	bne.n	8001944 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e2ba      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x24a>
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0b      	ldr	r2, [pc, #44]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	e026      	b.n	80018ec <HAL_RCC_OscConfig+0x298>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018a6:	d115      	bne.n	80018d4 <HAL_RCC_OscConfig+0x280>
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80018ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a02      	ldr	r2, [pc, #8]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80018ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	e014      	b.n	80018ec <HAL_RCC_OscConfig+0x298>
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	08007efc 	.word	0x08007efc
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000004 	.word	0x20000004
 80018d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a9f      	ldr	r2, [pc, #636]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80018da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a9c      	ldr	r2, [pc, #624]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80018e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fb68 	bl	8000fc8 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fb64 	bl	8000fc8 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	@ 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e276      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800190e:	4b92      	ldr	r3, [pc, #584]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x2a8>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff fb54 	bl	8000fc8 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fb50 	bl	8000fc8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	@ 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e262      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001936:	4b88      	ldr	r3, [pc, #544]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x2d0>
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d060      	beq.n	8001a14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b04      	cmp	r3, #4
 8001956:	d005      	beq.n	8001964 <HAL_RCC_OscConfig+0x310>
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	d119      	bne.n	8001992 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d116      	bne.n	8001992 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001964:	4b7c      	ldr	r3, [pc, #496]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_OscConfig+0x328>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e23f      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b76      	ldr	r3, [pc, #472]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	4973      	ldr	r1, [pc, #460]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001990:	e040      	b.n	8001a14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d023      	beq.n	80019e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199a:	4b6f      	ldr	r3, [pc, #444]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff fb0f 	bl	8000fc8 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fb0b 	bl	8000fc8 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e21d      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c0:	4b65      	ldr	r3, [pc, #404]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b62      	ldr	r3, [pc, #392]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	495f      	ldr	r1, [pc, #380]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e018      	b.n	8001a14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff faeb 	bl	8000fc8 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff fae7 	bl	8000fc8 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e1f9      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a08:	4b53      	ldr	r3, [pc, #332]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f0      	bne.n	80019f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d03c      	beq.n	8001a9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01c      	beq.n	8001a62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a28:	4b4b      	ldr	r3, [pc, #300]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff fac6 	bl	8000fc8 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a40:	f7ff fac2 	bl	8000fc8 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e1d4      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a52:	4b41      	ldr	r3, [pc, #260]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ef      	beq.n	8001a40 <HAL_RCC_OscConfig+0x3ec>
 8001a60:	e01b      	b.n	8001a9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a62:	4b3d      	ldr	r3, [pc, #244]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a68:	4a3b      	ldr	r2, [pc, #236]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff faa9 	bl	8000fc8 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff faa5 	bl	8000fc8 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1b7      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a8c:	4b32      	ldr	r3, [pc, #200]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1ef      	bne.n	8001a7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80a6 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001aac:	4b2a      	ldr	r3, [pc, #168]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10d      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab8:	4b27      	ldr	r3, [pc, #156]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abc:	4a26      	ldr	r2, [pc, #152]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac4:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad4:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <HAL_RCC_OscConfig+0x508>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d118      	bne.n	8001b12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <HAL_RCC_OscConfig+0x508>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b5c <HAL_RCC_OscConfig+0x508>)
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aec:	f7ff fa6c 	bl	8000fc8 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af4:	f7ff fa68 	bl	8000fc8 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e17a      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_RCC_OscConfig+0x508>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d108      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4d8>
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b2a:	e029      	b.n	8001b80 <HAL_RCC_OscConfig+0x52c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d115      	bne.n	8001b60 <HAL_RCC_OscConfig+0x50c>
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b3a:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b44:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b4a:	4a03      	ldr	r2, [pc, #12]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b54:	e014      	b.n	8001b80 <HAL_RCC_OscConfig+0x52c>
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	4b9c      	ldr	r3, [pc, #624]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b66:	4a9b      	ldr	r2, [pc, #620]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b70:	4b98      	ldr	r3, [pc, #608]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b76:	4a97      	ldr	r2, [pc, #604]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001b78:	f023 0304 	bic.w	r3, r3, #4
 8001b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d016      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff fa1e 	bl	8000fc8 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7ff fa1a 	bl	8000fc8 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e12a      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba6:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0ed      	beq.n	8001b90 <HAL_RCC_OscConfig+0x53c>
 8001bb4:	e015      	b.n	8001be2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fa07 	bl	8000fc8 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7ff fa03 	bl	8000fc8 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e113      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd4:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ed      	bne.n	8001bbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b7a      	ldr	r3, [pc, #488]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	4a79      	ldr	r2, [pc, #484]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80fe 	beq.w	8001dfa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	f040 80d0 	bne.w	8001da8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c08:	4b72      	ldr	r3, [pc, #456]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f003 0203 	and.w	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d130      	bne.n	8001c7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	3b01      	subs	r3, #1
 8001c28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d127      	bne.n	8001c7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d11f      	bne.n	8001c7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c48:	2a07      	cmp	r2, #7
 8001c4a:	bf14      	ite	ne
 8001c4c:	2201      	movne	r2, #1
 8001c4e:	2200      	moveq	r2, #0
 8001c50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d113      	bne.n	8001c7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	3b01      	subs	r3, #1
 8001c64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d109      	bne.n	8001c7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	085b      	lsrs	r3, r3, #1
 8001c76:	3b01      	subs	r3, #1
 8001c78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d06e      	beq.n	8001d5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	d069      	beq.n	8001d58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c84:	4b53      	ldr	r3, [pc, #332]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d105      	bne.n	8001c9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c90:	4b50      	ldr	r3, [pc, #320]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0ad      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a4b      	ldr	r2, [pc, #300]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001caa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cac:	f7ff f98c 	bl	8000fc8 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff f988 	bl	8000fc8 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e09a      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc6:	4b43      	ldr	r3, [pc, #268]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd2:	4b40      	ldr	r3, [pc, #256]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	4b40      	ldr	r3, [pc, #256]	@ (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ce2:	3a01      	subs	r2, #1
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cec:	0212      	lsls	r2, r2, #8
 8001cee:	4311      	orrs	r1, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001cf4:	0852      	lsrs	r2, r2, #1
 8001cf6:	3a01      	subs	r2, #1
 8001cf8:	0552      	lsls	r2, r2, #21
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d00:	0852      	lsrs	r2, r2, #1
 8001d02:	3a01      	subs	r2, #1
 8001d04:	0652      	lsls	r2, r2, #25
 8001d06:	4311      	orrs	r1, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d0c:	0912      	lsrs	r2, r2, #4
 8001d0e:	0452      	lsls	r2, r2, #17
 8001d10:	430a      	orrs	r2, r1
 8001d12:	4930      	ldr	r1, [pc, #192]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d18:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d24:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4a2a      	ldr	r2, [pc, #168]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d30:	f7ff f94a 	bl	8000fc8 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff f946 	bl	8000fc8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e058      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4a:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d56:	e050      	b.n	8001dfa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e04f      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d148      	bne.n	8001dfa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a19      	ldr	r2, [pc, #100]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d74:	4b17      	ldr	r3, [pc, #92]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4a16      	ldr	r2, [pc, #88]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d80:	f7ff f922 	bl	8000fc8 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff f91e 	bl	8000fc8 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e030      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x734>
 8001da6:	e028      	b.n	8001dfa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d023      	beq.n	8001df6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a08      	ldr	r2, [pc, #32]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001db4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7ff f905 	bl	8000fc8 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc0:	e00c      	b.n	8001ddc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7ff f901 	bl	8000fc8 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d905      	bls.n	8001ddc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e013      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_RCC_OscConfig+0x7b0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1ec      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_RCC_OscConfig+0x7b0>)
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	4905      	ldr	r1, [pc, #20]	@ (8001e04 <HAL_RCC_OscConfig+0x7b0>)
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_RCC_OscConfig+0x7b4>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	60cb      	str	r3, [r1, #12]
 8001df4:	e001      	b.n	8001dfa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	feeefffc 	.word	0xfeeefffc

08001e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0e7      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b75      	ldr	r3, [pc, #468]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d910      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0207 	bic.w	r2, r3, #7
 8001e36:	4970      	ldr	r1, [pc, #448]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0cf      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d010      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	4b66      	ldr	r3, [pc, #408]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d908      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6c:	4b63      	ldr	r3, [pc, #396]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4960      	ldr	r1, [pc, #384]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d04c      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	4b5a      	ldr	r3, [pc, #360]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d121      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0a6      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eaa:	4b54      	ldr	r3, [pc, #336]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d115      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e09a      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e08e      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e086      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b46      	ldr	r3, [pc, #280]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4943      	ldr	r1, [pc, #268]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef4:	f7ff f868 	bl	8000fc8 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff f864 	bl	8000fc8 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e06e      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b3a      	ldr	r3, [pc, #232]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d010      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	4b31      	ldr	r3, [pc, #196]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d208      	bcs.n	8001f52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f40:	4b2e      	ldr	r3, [pc, #184]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	492b      	ldr	r1, [pc, #172]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f52:	4b29      	ldr	r3, [pc, #164]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d210      	bcs.n	8001f82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f60:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 0207 	bic.w	r2, r3, #7
 8001f68:	4923      	ldr	r1, [pc, #140]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f70:	4b21      	ldr	r3, [pc, #132]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e036      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	4918      	ldr	r1, [pc, #96]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d009      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4910      	ldr	r1, [pc, #64]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fc0:	f000 f824 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	490b      	ldr	r1, [pc, #44]	@ (8002000 <HAL_RCC_ClockConfig+0x1f4>)
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fdc:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <HAL_RCC_ClockConfig+0x1f8>)
 8001fde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_RCC_ClockConfig+0x1fc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fe9b 	bl	8000d20 <HAL_InitTick>
 8001fea:	4603      	mov	r3, r0
 8001fec:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fee:	7afb      	ldrb	r3, [r7, #11]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08007efc 	.word	0x08007efc
 8002004:	20000000 	.word	0x20000000
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	4b3e      	ldr	r3, [pc, #248]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002024:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x34>
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d121      	bne.n	800207e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d11e      	bne.n	800207e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002040:	4b34      	ldr	r3, [pc, #208]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800204c:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 800204e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e005      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800205c:	4b2d      	ldr	r3, [pc, #180]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002068:	4a2b      	ldr	r2, [pc, #172]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x10c>)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10d      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800207c:	e00a      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b04      	cmp	r3, #4
 8002082:	d102      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002084:	4b25      	ldr	r3, [pc, #148]	@ (800211c <HAL_RCC_GetSysClockFreq+0x110>)
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	e004      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b08      	cmp	r3, #8
 800208e:	d101      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002090:	4b23      	ldr	r3, [pc, #140]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x114>)
 8002092:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d134      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800209a:	4b1e      	ldr	r3, [pc, #120]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d003      	beq.n	80020b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d003      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0xac>
 80020b0:	e005      	b.n	80020be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	@ (800211c <HAL_RCC_GetSysClockFreq+0x110>)
 80020b4:	617b      	str	r3, [r7, #20]
      break;
 80020b6:	e005      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x114>)
 80020ba:	617b      	str	r3, [r7, #20]
      break;
 80020bc:	e002      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	617b      	str	r3, [r7, #20]
      break;
 80020c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c4:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	3301      	adds	r3, #1
 80020d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	fb03 f202 	mul.w	r2, r3, r2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	0e5b      	lsrs	r3, r3, #25
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	3301      	adds	r3, #1
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002104:	69bb      	ldr	r3, [r7, #24]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	08007f14 	.word	0x08007f14
 800211c:	00f42400 	.word	0x00f42400
 8002120:	007a1200 	.word	0x007a1200

08002124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <HAL_RCC_GetHCLKFreq+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002140:	f7ff fff0 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4904      	ldr	r1, [pc, #16]	@ (8002164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	08007f0c 	.word	0x08007f0c

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800216c:	f7ff ffda 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0adb      	lsrs	r3, r3, #11
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4904      	ldr	r1, [pc, #16]	@ (8002190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	08007f0c 	.word	0x08007f0c

08002194 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	220f      	movs	r2, #15
 80021a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_RCC_GetClockConfig+0x5c>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0203 	and.w	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80021b0:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <HAL_RCC_GetClockConfig+0x5c>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <HAL_RCC_GetClockConfig+0x5c>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021c8:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <HAL_RCC_GetClockConfig+0x5c>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	08db      	lsrs	r3, r3, #3
 80021ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021d6:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <HAL_RCC_GetClockConfig+0x60>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0207 	and.w	r2, r3, #7
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	601a      	str	r2, [r3, #0]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40022000 	.word	0x40022000

080021f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002204:	4b2a      	ldr	r3, [pc, #168]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002210:	f7ff f9bc 	bl	800158c <HAL_PWREx_GetVoltageRange>
 8002214:	6178      	str	r0, [r7, #20]
 8002216:	e014      	b.n	8002242 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	4b25      	ldr	r3, [pc, #148]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	4a24      	ldr	r2, [pc, #144]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002222:	6593      	str	r3, [r2, #88]	@ 0x58
 8002224:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002230:	f7ff f9ac 	bl	800158c <HAL_PWREx_GetVoltageRange>
 8002234:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b1e      	ldr	r3, [pc, #120]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	4a1d      	ldr	r2, [pc, #116]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002240:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002248:	d10b      	bne.n	8002262 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b80      	cmp	r3, #128	@ 0x80
 800224e:	d919      	bls.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2ba0      	cmp	r3, #160	@ 0xa0
 8002254:	d902      	bls.n	800225c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002256:	2302      	movs	r3, #2
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	e013      	b.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800225c:	2301      	movs	r3, #1
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	e010      	b.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b80      	cmp	r3, #128	@ 0x80
 8002266:	d902      	bls.n	800226e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002268:	2303      	movs	r3, #3
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	e00a      	b.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b80      	cmp	r3, #128	@ 0x80
 8002272:	d102      	bne.n	800227a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002274:	2302      	movs	r3, #2
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	e004      	b.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b70      	cmp	r3, #112	@ 0x70
 800227e:	d101      	bne.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002280:	2301      	movs	r3, #1
 8002282:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 0207 	bic.w	r2, r3, #7
 800228c:	4909      	ldr	r1, [pc, #36]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002294:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d001      	beq.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40022000 	.word	0x40022000

080022b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022c0:	2300      	movs	r3, #0
 80022c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022c4:	2300      	movs	r3, #0
 80022c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d041      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022dc:	d02a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022e2:	d824      	bhi.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022e8:	d008      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022ee:	d81e      	bhi.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022f8:	d010      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022fa:	e018      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022fc:	4b86      	ldr	r3, [pc, #536]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a85      	ldr	r2, [pc, #532]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002306:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002308:	e015      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fabb 	bl	800288c <RCCEx_PLLSAI1_Config>
 8002316:	4603      	mov	r3, r0
 8002318:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800231a:	e00c      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3320      	adds	r3, #32
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fba6 	bl	8002a74 <RCCEx_PLLSAI2_Config>
 8002328:	4603      	mov	r3, r0
 800232a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800232c:	e003      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	74fb      	strb	r3, [r7, #19]
      break;
 8002332:	e000      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10b      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800233c:	4b76      	ldr	r3, [pc, #472]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002342:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800234a:	4973      	ldr	r1, [pc, #460]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002352:	e001      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d041      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002368:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800236c:	d02a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800236e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002372:	d824      	bhi.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002374:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002378:	d008      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800237a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800237e:	d81e      	bhi.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002388:	d010      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800238a:	e018      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800238c:	4b62      	ldr	r3, [pc, #392]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a61      	ldr	r2, [pc, #388]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002396:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002398:	e015      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3304      	adds	r3, #4
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fa73 	bl	800288c <RCCEx_PLLSAI1_Config>
 80023a6:	4603      	mov	r3, r0
 80023a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023aa:	e00c      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3320      	adds	r3, #32
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fb5e 	bl	8002a74 <RCCEx_PLLSAI2_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023bc:	e003      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	74fb      	strb	r3, [r7, #19]
      break;
 80023c2:	e000      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023cc:	4b52      	ldr	r3, [pc, #328]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023da:	494f      	ldr	r1, [pc, #316]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023e2:	e001      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80a0 	beq.w	8002536 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023fa:	4b47      	ldr	r3, [pc, #284]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00d      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	4b41      	ldr	r3, [pc, #260]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	4a40      	ldr	r2, [pc, #256]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800241a:	6593      	str	r3, [r2, #88]	@ 0x58
 800241c:	4b3e      	ldr	r3, [pc, #248]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002428:	2301      	movs	r3, #1
 800242a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800242c:	4b3b      	ldr	r3, [pc, #236]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a3a      	ldr	r2, [pc, #232]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002436:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002438:	f7fe fdc6 	bl	8000fc8 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800243e:	e009      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002440:	f7fe fdc2 	bl	8000fc8 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d902      	bls.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	74fb      	strb	r3, [r7, #19]
        break;
 8002452:	e005      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002454:	4b31      	ldr	r3, [pc, #196]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ef      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d15c      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002466:	4b2c      	ldr	r3, [pc, #176]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002470:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01f      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	d019      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002484:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800248e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002490:	4b21      	ldr	r3, [pc, #132]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002496:	4a20      	ldr	r2, [pc, #128]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800249c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024b0:	4a19      	ldr	r2, [pc, #100]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d016      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7fe fd81 	bl	8000fc8 <HAL_GetTick>
 80024c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c8:	e00b      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe fd7d 	bl	8000fc8 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d902      	bls.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	74fb      	strb	r3, [r7, #19]
            break;
 80024e0:	e006      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ec      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10c      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024f6:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002506:	4904      	ldr	r1, [pc, #16]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800250e:	e009      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	74bb      	strb	r3, [r7, #18]
 8002514:	e006      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002524:	7c7b      	ldrb	r3, [r7, #17]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d105      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252a:	4b9e      	ldr	r3, [pc, #632]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	4a9d      	ldr	r2, [pc, #628]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002534:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002542:	4b98      	ldr	r3, [pc, #608]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002548:	f023 0203 	bic.w	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002550:	4994      	ldr	r1, [pc, #592]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00a      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002564:	4b8f      	ldr	r3, [pc, #572]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256a:	f023 020c 	bic.w	r2, r3, #12
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002572:	498c      	ldr	r1, [pc, #560]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002586:	4b87      	ldr	r3, [pc, #540]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	4983      	ldr	r1, [pc, #524]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00a      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025a8:	4b7e      	ldr	r3, [pc, #504]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	497b      	ldr	r1, [pc, #492]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ca:	4b76      	ldr	r3, [pc, #472]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d8:	4972      	ldr	r1, [pc, #456]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025ec:	4b6d      	ldr	r3, [pc, #436]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	496a      	ldr	r1, [pc, #424]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800260e:	4b65      	ldr	r3, [pc, #404]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002614:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261c:	4961      	ldr	r1, [pc, #388]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002630:	4b5c      	ldr	r3, [pc, #368]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002636:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263e:	4959      	ldr	r1, [pc, #356]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002652:	4b54      	ldr	r3, [pc, #336]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002658:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002660:	4950      	ldr	r1, [pc, #320]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002674:	4b4b      	ldr	r3, [pc, #300]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002682:	4948      	ldr	r1, [pc, #288]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002696:	4b43      	ldr	r3, [pc, #268]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a4:	493f      	ldr	r1, [pc, #252]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d028      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026b8:	4b3a      	ldr	r3, [pc, #232]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026c6:	4937      	ldr	r1, [pc, #220]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026d6:	d106      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d8:	4b32      	ldr	r3, [pc, #200]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a31      	ldr	r2, [pc, #196]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026e2:	60d3      	str	r3, [r2, #12]
 80026e4:	e011      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026ee:	d10c      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3304      	adds	r3, #4
 80026f4:	2101      	movs	r1, #1
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f8c8 	bl	800288c <RCCEx_PLLSAI1_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d028      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002716:	4b23      	ldr	r3, [pc, #140]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	491f      	ldr	r1, [pc, #124]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002734:	d106      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002736:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	4a1a      	ldr	r2, [pc, #104]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002740:	60d3      	str	r3, [r2, #12]
 8002742:	e011      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800274c:	d10c      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	2101      	movs	r1, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f899 	bl	800288c <RCCEx_PLLSAI1_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800275e:	7cfb      	ldrb	r3, [r7, #19]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d02b      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002782:	4908      	ldr	r1, [pc, #32]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002792:	d109      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002794:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a02      	ldr	r2, [pc, #8]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800279e:	60d3      	str	r3, [r2, #12]
 80027a0:	e014      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2101      	movs	r1, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f867 	bl	800288c <RCCEx_PLLSAI1_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d02f      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027e6:	4928      	ldr	r1, [pc, #160]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027f6:	d10d      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3304      	adds	r3, #4
 80027fc:	2102      	movs	r1, #2
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f844 	bl	800288c <RCCEx_PLLSAI1_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d014      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800280e:	7cfb      	ldrb	r3, [r7, #19]
 8002810:	74bb      	strb	r3, [r7, #18]
 8002812:	e011      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800281c:	d10c      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3320      	adds	r3, #32
 8002822:	2102      	movs	r1, #2
 8002824:	4618      	mov	r0, r3
 8002826:	f000 f925 	bl	8002a74 <RCCEx_PLLSAI2_Config>
 800282a:	4603      	mov	r3, r0
 800282c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800282e:	7cfb      	ldrb	r3, [r7, #19]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002852:	490d      	ldr	r1, [pc, #52]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002866:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002876:	4904      	ldr	r1, [pc, #16]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800287e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000

0800288c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800289a:	4b75      	ldr	r3, [pc, #468]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d018      	beq.n	80028d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028a6:	4b72      	ldr	r3, [pc, #456]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0203 	and.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d10d      	bne.n	80028d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
       ||
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028be:	4b6c      	ldr	r3, [pc, #432]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
       ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d047      	beq.n	8002962 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	e044      	b.n	8002962 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d018      	beq.n	8002912 <RCCEx_PLLSAI1_Config+0x86>
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d825      	bhi.n	8002930 <RCCEx_PLLSAI1_Config+0xa4>
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d002      	beq.n	80028ee <RCCEx_PLLSAI1_Config+0x62>
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d009      	beq.n	8002900 <RCCEx_PLLSAI1_Config+0x74>
 80028ec:	e020      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ee:	4b60      	ldr	r3, [pc, #384]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d11d      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fe:	e01a      	b.n	8002936 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002900:	4b5b      	ldr	r3, [pc, #364]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d116      	bne.n	800293a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002910:	e013      	b.n	800293a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002912:	4b57      	ldr	r3, [pc, #348]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800291e:	4b54      	ldr	r3, [pc, #336]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800292e:	e006      	b.n	800293e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      break;
 8002934:	e004      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002936:	bf00      	nop
 8002938:	e002      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800293a:	bf00      	nop
 800293c:	e000      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800293e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002946:	4b4a      	ldr	r3, [pc, #296]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	430b      	orrs	r3, r1
 800295c:	4944      	ldr	r1, [pc, #272]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d17d      	bne.n	8002a64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002968:	4b41      	ldr	r3, [pc, #260]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a40      	ldr	r2, [pc, #256]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002974:	f7fe fb28 	bl	8000fc8 <HAL_GetTick>
 8002978:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800297a:	e009      	b.n	8002990 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800297c:	f7fe fb24 	bl	8000fc8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d902      	bls.n	8002990 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	73fb      	strb	r3, [r7, #15]
        break;
 800298e:	e005      	b.n	800299c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002990:	4b37      	ldr	r3, [pc, #220]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ef      	bne.n	800297c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d160      	bne.n	8002a64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d111      	bne.n	80029cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a8:	4b31      	ldr	r3, [pc, #196]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80029b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6892      	ldr	r2, [r2, #8]
 80029b8:	0211      	lsls	r1, r2, #8
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68d2      	ldr	r2, [r2, #12]
 80029be:	0912      	lsrs	r2, r2, #4
 80029c0:	0452      	lsls	r2, r2, #17
 80029c2:	430a      	orrs	r2, r1
 80029c4:	492a      	ldr	r1, [pc, #168]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	610b      	str	r3, [r1, #16]
 80029ca:	e027      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d112      	bne.n	80029f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029d2:	4b27      	ldr	r3, [pc, #156]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80029da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6892      	ldr	r2, [r2, #8]
 80029e2:	0211      	lsls	r1, r2, #8
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6912      	ldr	r2, [r2, #16]
 80029e8:	0852      	lsrs	r2, r2, #1
 80029ea:	3a01      	subs	r2, #1
 80029ec:	0552      	lsls	r2, r2, #21
 80029ee:	430a      	orrs	r2, r1
 80029f0:	491f      	ldr	r1, [pc, #124]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	610b      	str	r3, [r1, #16]
 80029f6:	e011      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6892      	ldr	r2, [r2, #8]
 8002a08:	0211      	lsls	r1, r2, #8
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6952      	ldr	r2, [r2, #20]
 8002a0e:	0852      	lsrs	r2, r2, #1
 8002a10:	3a01      	subs	r2, #1
 8002a12:	0652      	lsls	r2, r2, #25
 8002a14:	430a      	orrs	r2, r1
 8002a16:	4916      	ldr	r1, [pc, #88]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a1c:	4b14      	ldr	r3, [pc, #80]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a13      	ldr	r2, [pc, #76]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe face 	bl	8000fc8 <HAL_GetTick>
 8002a2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a2e:	e009      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a30:	f7fe faca 	bl	8000fc8 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d902      	bls.n	8002a44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	73fb      	strb	r3, [r7, #15]
          break;
 8002a42:	e005      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a44:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ef      	beq.n	8002a30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	4904      	ldr	r1, [pc, #16]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000

08002a74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a82:	4b6a      	ldr	r3, [pc, #424]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d018      	beq.n	8002ac0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a8e:	4b67      	ldr	r3, [pc, #412]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0203 	and.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d10d      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
       ||
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002aa6:	4b61      	ldr	r3, [pc, #388]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d047      	beq.n	8002b4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
 8002abe:	e044      	b.n	8002b4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d018      	beq.n	8002afa <RCCEx_PLLSAI2_Config+0x86>
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d825      	bhi.n	8002b18 <RCCEx_PLLSAI2_Config+0xa4>
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d002      	beq.n	8002ad6 <RCCEx_PLLSAI2_Config+0x62>
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d009      	beq.n	8002ae8 <RCCEx_PLLSAI2_Config+0x74>
 8002ad4:	e020      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ad6:	4b55      	ldr	r3, [pc, #340]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11d      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae6:	e01a      	b.n	8002b1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ae8:	4b50      	ldr	r3, [pc, #320]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d116      	bne.n	8002b22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af8:	e013      	b.n	8002b22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002afa:	4b4c      	ldr	r3, [pc, #304]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10f      	bne.n	8002b26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b06:	4b49      	ldr	r3, [pc, #292]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b16:	e006      	b.n	8002b26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1c:	e004      	b.n	8002b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e002      	b.n	8002b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b22:	bf00      	nop
 8002b24:	e000      	b.n	8002b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10d      	bne.n	8002b4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	430b      	orrs	r3, r1
 8002b44:	4939      	ldr	r1, [pc, #228]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d167      	bne.n	8002c20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b50:	4b36      	ldr	r3, [pc, #216]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a35      	ldr	r2, [pc, #212]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fa34 	bl	8000fc8 <HAL_GetTick>
 8002b60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b62:	e009      	b.n	8002b78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b64:	f7fe fa30 	bl	8000fc8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d902      	bls.n	8002b78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	73fb      	strb	r3, [r7, #15]
        break;
 8002b76:	e005      	b.n	8002b84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b78:	4b2c      	ldr	r3, [pc, #176]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1ef      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d14a      	bne.n	8002c20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d111      	bne.n	8002bb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b90:	4b26      	ldr	r3, [pc, #152]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6892      	ldr	r2, [r2, #8]
 8002ba0:	0211      	lsls	r1, r2, #8
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68d2      	ldr	r2, [r2, #12]
 8002ba6:	0912      	lsrs	r2, r2, #4
 8002ba8:	0452      	lsls	r2, r2, #17
 8002baa:	430a      	orrs	r2, r1
 8002bac:	491f      	ldr	r1, [pc, #124]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	614b      	str	r3, [r1, #20]
 8002bb2:	e011      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6892      	ldr	r2, [r2, #8]
 8002bc4:	0211      	lsls	r1, r2, #8
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6912      	ldr	r2, [r2, #16]
 8002bca:	0852      	lsrs	r2, r2, #1
 8002bcc:	3a01      	subs	r2, #1
 8002bce:	0652      	lsls	r2, r2, #25
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	4916      	ldr	r1, [pc, #88]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bd8:	4b14      	ldr	r3, [pc, #80]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a13      	ldr	r2, [pc, #76]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7fe f9f0 	bl	8000fc8 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bea:	e009      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bec:	f7fe f9ec 	bl	8000fc8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d902      	bls.n	8002c00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	73fb      	strb	r3, [r7, #15]
          break;
 8002bfe:	e005      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c00:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ef      	beq.n	8002bec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	4904      	ldr	r1, [pc, #16]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000

08002c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e049      	b.n	8002cd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f841 	bl	8002cde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f000 f9e0 	bl	8003034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d001      	beq.n	8002d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e04f      	b.n	8002dac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a23      	ldr	r2, [pc, #140]	@ (8002db8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01d      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x76>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d36:	d018      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x76>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dbc <HAL_TIM_Base_Start_IT+0xc8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d013      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x76>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00e      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x76>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x76>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d004      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x76>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a19      	ldr	r2, [pc, #100]	@ (8002dcc <HAL_TIM_Base_Start_IT+0xd8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d115      	bne.n	8002d96 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b06      	cmp	r3, #6
 8002d7a:	d015      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0xb4>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d82:	d011      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d94:	e008      	b.n	8002da8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0201 	orr.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e000      	b.n	8002daa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40012c00 	.word	0x40012c00
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	40000800 	.word	0x40000800
 8002dc4:	40000c00 	.word	0x40000c00
 8002dc8:	40013400 	.word	0x40013400
 8002dcc:	40014000 	.word	0x40014000
 8002dd0:	00010007 	.word	0x00010007

08002dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d020      	beq.n	8002e38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01b      	beq.n	8002e38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0202 	mvn.w	r2, #2
 8002e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8e9 	bl	8002ff6 <HAL_TIM_IC_CaptureCallback>
 8002e24:	e005      	b.n	8002e32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f8db 	bl	8002fe2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f8ec 	bl	800300a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d020      	beq.n	8002e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01b      	beq.n	8002e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0204 	mvn.w	r2, #4
 8002e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f8c3 	bl	8002ff6 <HAL_TIM_IC_CaptureCallback>
 8002e70:	e005      	b.n	8002e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f8b5 	bl	8002fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f8c6 	bl	800300a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d020      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01b      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0208 	mvn.w	r2, #8
 8002ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f89d 	bl	8002ff6 <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f88f 	bl	8002fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8a0 	bl	800300a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d020      	beq.n	8002f1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01b      	beq.n	8002f1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0210 	mvn.w	r2, #16
 8002eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f877 	bl	8002ff6 <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f869 	bl	8002fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f87a 	bl	800300a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00c      	beq.n	8002f40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0201 	mvn.w	r2, #1
 8002f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fd fdb4 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d104      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00c      	beq.n	8002f6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f913 	bl	8003194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00c      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f90b 	bl	80031a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00c      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f834 	bl	800301e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00c      	beq.n	8002fda <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f06f 0220 	mvn.w	r2, #32
 8002fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f8d3 	bl	8003180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a46      	ldr	r2, [pc, #280]	@ (8003160 <TIM_Base_SetConfig+0x12c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d013      	beq.n	8003074 <TIM_Base_SetConfig+0x40>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003052:	d00f      	beq.n	8003074 <TIM_Base_SetConfig+0x40>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a43      	ldr	r2, [pc, #268]	@ (8003164 <TIM_Base_SetConfig+0x130>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00b      	beq.n	8003074 <TIM_Base_SetConfig+0x40>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a42      	ldr	r2, [pc, #264]	@ (8003168 <TIM_Base_SetConfig+0x134>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <TIM_Base_SetConfig+0x40>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a41      	ldr	r2, [pc, #260]	@ (800316c <TIM_Base_SetConfig+0x138>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_Base_SetConfig+0x40>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a40      	ldr	r2, [pc, #256]	@ (8003170 <TIM_Base_SetConfig+0x13c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d108      	bne.n	8003086 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800307a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a35      	ldr	r2, [pc, #212]	@ (8003160 <TIM_Base_SetConfig+0x12c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d01f      	beq.n	80030ce <TIM_Base_SetConfig+0x9a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003094:	d01b      	beq.n	80030ce <TIM_Base_SetConfig+0x9a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a32      	ldr	r2, [pc, #200]	@ (8003164 <TIM_Base_SetConfig+0x130>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d017      	beq.n	80030ce <TIM_Base_SetConfig+0x9a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a31      	ldr	r2, [pc, #196]	@ (8003168 <TIM_Base_SetConfig+0x134>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <TIM_Base_SetConfig+0x9a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a30      	ldr	r2, [pc, #192]	@ (800316c <TIM_Base_SetConfig+0x138>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00f      	beq.n	80030ce <TIM_Base_SetConfig+0x9a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003170 <TIM_Base_SetConfig+0x13c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00b      	beq.n	80030ce <TIM_Base_SetConfig+0x9a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003174 <TIM_Base_SetConfig+0x140>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <TIM_Base_SetConfig+0x9a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003178 <TIM_Base_SetConfig+0x144>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d003      	beq.n	80030ce <TIM_Base_SetConfig+0x9a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a2c      	ldr	r2, [pc, #176]	@ (800317c <TIM_Base_SetConfig+0x148>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d108      	bne.n	80030e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a16      	ldr	r2, [pc, #88]	@ (8003160 <TIM_Base_SetConfig+0x12c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00f      	beq.n	800312c <TIM_Base_SetConfig+0xf8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a18      	ldr	r2, [pc, #96]	@ (8003170 <TIM_Base_SetConfig+0x13c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00b      	beq.n	800312c <TIM_Base_SetConfig+0xf8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a17      	ldr	r2, [pc, #92]	@ (8003174 <TIM_Base_SetConfig+0x140>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d007      	beq.n	800312c <TIM_Base_SetConfig+0xf8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a16      	ldr	r2, [pc, #88]	@ (8003178 <TIM_Base_SetConfig+0x144>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <TIM_Base_SetConfig+0xf8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a15      	ldr	r2, [pc, #84]	@ (800317c <TIM_Base_SetConfig+0x148>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d103      	bne.n	8003134 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d105      	bne.n	8003152 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f023 0201 	bic.w	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	611a      	str	r2, [r3, #16]
  }
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800
 800316c:	40000c00 	.word	0x40000c00
 8003170:	40013400 	.word	0x40013400
 8003174:	40014000 	.word	0x40014000
 8003178:	40014400 	.word	0x40014400
 800317c:	40014800 	.word	0x40014800

08003180 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e040      	b.n	8003250 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fd42 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2224      	movs	r2, #36	@ 0x24
 80031e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0201 	bic.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fc32 	bl	8003a6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f977 	bl	80034fc <UART_SetConfig>
 800320e:	4603      	mov	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e01b      	b.n	8003250 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003226:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003236:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fcb1 	bl	8003bb0 <UART_CheckIdleState>
 800324e:	4603      	mov	r3, r0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	@ 0x28
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800326c:	2b20      	cmp	r3, #32
 800326e:	d177      	bne.n	8003360 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_UART_Transmit+0x24>
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e070      	b.n	8003362 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2221      	movs	r2, #33	@ 0x21
 800328c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800328e:	f7fd fe9b 	bl	8000fc8 <HAL_GetTick>
 8003292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	88fa      	ldrh	r2, [r7, #6]
 8003298:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	88fa      	ldrh	r2, [r7, #6]
 80032a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ac:	d108      	bne.n	80032c0 <HAL_UART_Transmit+0x68>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d104      	bne.n	80032c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	e003      	b.n	80032c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032c8:	e02f      	b.n	800332a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2200      	movs	r2, #0
 80032d2:	2180      	movs	r1, #128	@ 0x80
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 fd13 	bl	8003d00 <UART_WaitOnFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d004      	beq.n	80032ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e03b      	b.n	8003362 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	881a      	ldrh	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032fc:	b292      	uxth	r2, r2
 80032fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	3302      	adds	r3, #2
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	e007      	b.n	8003318 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3301      	adds	r3, #1
 8003316:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1c9      	bne.n	80032ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	2140      	movs	r1, #64	@ 0x40
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fcdd 	bl	8003d00 <UART_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d004      	beq.n	8003356 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e005      	b.n	8003362 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e000      	b.n	8003362 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003360:	2302      	movs	r3, #2
  }
}
 8003362:	4618      	mov	r0, r3
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b08a      	sub	sp, #40	@ 0x28
 800336e:	af02      	add	r7, sp, #8
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003380:	2b20      	cmp	r3, #32
 8003382:	f040 80b6 	bne.w	80034f2 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_UART_Receive+0x28>
 800338c:	88fb      	ldrh	r3, [r7, #6]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e0ae      	b.n	80034f4 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2222      	movs	r2, #34	@ 0x22
 80033a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ac:	f7fd fe0c 	bl	8000fc8 <HAL_GetTick>
 80033b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	88fa      	ldrh	r2, [r7, #6]
 80033b6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ca:	d10e      	bne.n	80033ea <HAL_UART_Receive+0x80>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <HAL_UART_Receive+0x76>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80033da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033de:	e02d      	b.n	800343c <HAL_UART_Receive+0xd2>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	22ff      	movs	r2, #255	@ 0xff
 80033e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033e8:	e028      	b.n	800343c <HAL_UART_Receive+0xd2>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10d      	bne.n	800340e <HAL_UART_Receive+0xa4>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d104      	bne.n	8003404 <HAL_UART_Receive+0x9a>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	22ff      	movs	r2, #255	@ 0xff
 80033fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003402:	e01b      	b.n	800343c <HAL_UART_Receive+0xd2>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	227f      	movs	r2, #127	@ 0x7f
 8003408:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800340c:	e016      	b.n	800343c <HAL_UART_Receive+0xd2>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003416:	d10d      	bne.n	8003434 <HAL_UART_Receive+0xca>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <HAL_UART_Receive+0xc0>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	227f      	movs	r2, #127	@ 0x7f
 8003424:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003428:	e008      	b.n	800343c <HAL_UART_Receive+0xd2>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	223f      	movs	r2, #63	@ 0x3f
 800342e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003432:	e003      	b.n	800343c <HAL_UART_Receive+0xd2>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003442:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800344c:	d108      	bne.n	8003460 <HAL_UART_Receive+0xf6>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	e003      	b.n	8003468 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003468:	e037      	b.n	80034da <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2200      	movs	r2, #0
 8003472:	2120      	movs	r1, #32
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fc43 	bl	8003d00 <UART_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e033      	b.n	80034f4 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10c      	bne.n	80034ac <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003498:	b29a      	uxth	r2, r3
 800349a:	8a7b      	ldrh	r3, [r7, #18]
 800349c:	4013      	ands	r3, r2
 800349e:	b29a      	uxth	r2, r3
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	3302      	adds	r3, #2
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	e00d      	b.n	80034c8 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	8a7b      	ldrh	r3, [r7, #18]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	4013      	ands	r3, r2
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3301      	adds	r3, #1
 80034c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1c1      	bne.n	800346a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3720      	adds	r7, #32
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003500:	b08a      	sub	sp, #40	@ 0x28
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	431a      	orrs	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	431a      	orrs	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	4313      	orrs	r3, r2
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4ba4      	ldr	r3, [pc, #656]	@ (80037bc <UART_SetConfig+0x2c0>)
 800352c:	4013      	ands	r3, r2
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003534:	430b      	orrs	r3, r1
 8003536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a99      	ldr	r2, [pc, #612]	@ (80037c0 <UART_SetConfig+0x2c4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003564:	4313      	orrs	r3, r2
 8003566:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003578:	430a      	orrs	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a90      	ldr	r2, [pc, #576]	@ (80037c4 <UART_SetConfig+0x2c8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d126      	bne.n	80035d4 <UART_SetConfig+0xd8>
 8003586:	4b90      	ldr	r3, [pc, #576]	@ (80037c8 <UART_SetConfig+0x2cc>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b03      	cmp	r3, #3
 8003592:	d81b      	bhi.n	80035cc <UART_SetConfig+0xd0>
 8003594:	a201      	add	r2, pc, #4	@ (adr r2, 800359c <UART_SetConfig+0xa0>)
 8003596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359a:	bf00      	nop
 800359c:	080035ad 	.word	0x080035ad
 80035a0:	080035bd 	.word	0x080035bd
 80035a4:	080035b5 	.word	0x080035b5
 80035a8:	080035c5 	.word	0x080035c5
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035b2:	e116      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80035b4:	2302      	movs	r3, #2
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ba:	e112      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80035bc:	2304      	movs	r3, #4
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035c2:	e10e      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80035c4:	2308      	movs	r3, #8
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ca:	e10a      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80035cc:	2310      	movs	r3, #16
 80035ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035d2:	e106      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a7c      	ldr	r2, [pc, #496]	@ (80037cc <UART_SetConfig+0x2d0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d138      	bne.n	8003650 <UART_SetConfig+0x154>
 80035de:	4b7a      	ldr	r3, [pc, #488]	@ (80037c8 <UART_SetConfig+0x2cc>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	d82d      	bhi.n	8003648 <UART_SetConfig+0x14c>
 80035ec:	a201      	add	r2, pc, #4	@ (adr r2, 80035f4 <UART_SetConfig+0xf8>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003629 	.word	0x08003629
 80035f8:	08003649 	.word	0x08003649
 80035fc:	08003649 	.word	0x08003649
 8003600:	08003649 	.word	0x08003649
 8003604:	08003639 	.word	0x08003639
 8003608:	08003649 	.word	0x08003649
 800360c:	08003649 	.word	0x08003649
 8003610:	08003649 	.word	0x08003649
 8003614:	08003631 	.word	0x08003631
 8003618:	08003649 	.word	0x08003649
 800361c:	08003649 	.word	0x08003649
 8003620:	08003649 	.word	0x08003649
 8003624:	08003641 	.word	0x08003641
 8003628:	2300      	movs	r3, #0
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800362e:	e0d8      	b.n	80037e2 <UART_SetConfig+0x2e6>
 8003630:	2302      	movs	r3, #2
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003636:	e0d4      	b.n	80037e2 <UART_SetConfig+0x2e6>
 8003638:	2304      	movs	r3, #4
 800363a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800363e:	e0d0      	b.n	80037e2 <UART_SetConfig+0x2e6>
 8003640:	2308      	movs	r3, #8
 8003642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003646:	e0cc      	b.n	80037e2 <UART_SetConfig+0x2e6>
 8003648:	2310      	movs	r3, #16
 800364a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800364e:	e0c8      	b.n	80037e2 <UART_SetConfig+0x2e6>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a5e      	ldr	r2, [pc, #376]	@ (80037d0 <UART_SetConfig+0x2d4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d125      	bne.n	80036a6 <UART_SetConfig+0x1aa>
 800365a:	4b5b      	ldr	r3, [pc, #364]	@ (80037c8 <UART_SetConfig+0x2cc>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003660:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003664:	2b30      	cmp	r3, #48	@ 0x30
 8003666:	d016      	beq.n	8003696 <UART_SetConfig+0x19a>
 8003668:	2b30      	cmp	r3, #48	@ 0x30
 800366a:	d818      	bhi.n	800369e <UART_SetConfig+0x1a2>
 800366c:	2b20      	cmp	r3, #32
 800366e:	d00a      	beq.n	8003686 <UART_SetConfig+0x18a>
 8003670:	2b20      	cmp	r3, #32
 8003672:	d814      	bhi.n	800369e <UART_SetConfig+0x1a2>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <UART_SetConfig+0x182>
 8003678:	2b10      	cmp	r3, #16
 800367a:	d008      	beq.n	800368e <UART_SetConfig+0x192>
 800367c:	e00f      	b.n	800369e <UART_SetConfig+0x1a2>
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003684:	e0ad      	b.n	80037e2 <UART_SetConfig+0x2e6>
 8003686:	2302      	movs	r3, #2
 8003688:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368c:	e0a9      	b.n	80037e2 <UART_SetConfig+0x2e6>
 800368e:	2304      	movs	r3, #4
 8003690:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003694:	e0a5      	b.n	80037e2 <UART_SetConfig+0x2e6>
 8003696:	2308      	movs	r3, #8
 8003698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800369c:	e0a1      	b.n	80037e2 <UART_SetConfig+0x2e6>
 800369e:	2310      	movs	r3, #16
 80036a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036a4:	e09d      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a4a      	ldr	r2, [pc, #296]	@ (80037d4 <UART_SetConfig+0x2d8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d125      	bne.n	80036fc <UART_SetConfig+0x200>
 80036b0:	4b45      	ldr	r3, [pc, #276]	@ (80037c8 <UART_SetConfig+0x2cc>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80036ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80036bc:	d016      	beq.n	80036ec <UART_SetConfig+0x1f0>
 80036be:	2bc0      	cmp	r3, #192	@ 0xc0
 80036c0:	d818      	bhi.n	80036f4 <UART_SetConfig+0x1f8>
 80036c2:	2b80      	cmp	r3, #128	@ 0x80
 80036c4:	d00a      	beq.n	80036dc <UART_SetConfig+0x1e0>
 80036c6:	2b80      	cmp	r3, #128	@ 0x80
 80036c8:	d814      	bhi.n	80036f4 <UART_SetConfig+0x1f8>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <UART_SetConfig+0x1d8>
 80036ce:	2b40      	cmp	r3, #64	@ 0x40
 80036d0:	d008      	beq.n	80036e4 <UART_SetConfig+0x1e8>
 80036d2:	e00f      	b.n	80036f4 <UART_SetConfig+0x1f8>
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036da:	e082      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80036dc:	2302      	movs	r3, #2
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e2:	e07e      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80036e4:	2304      	movs	r3, #4
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ea:	e07a      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80036ec:	2308      	movs	r3, #8
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f2:	e076      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80036f4:	2310      	movs	r3, #16
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036fa:	e072      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a35      	ldr	r2, [pc, #212]	@ (80037d8 <UART_SetConfig+0x2dc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d12a      	bne.n	800375c <UART_SetConfig+0x260>
 8003706:	4b30      	ldr	r3, [pc, #192]	@ (80037c8 <UART_SetConfig+0x2cc>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003710:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003714:	d01a      	beq.n	800374c <UART_SetConfig+0x250>
 8003716:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800371a:	d81b      	bhi.n	8003754 <UART_SetConfig+0x258>
 800371c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003720:	d00c      	beq.n	800373c <UART_SetConfig+0x240>
 8003722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003726:	d815      	bhi.n	8003754 <UART_SetConfig+0x258>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <UART_SetConfig+0x238>
 800372c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003730:	d008      	beq.n	8003744 <UART_SetConfig+0x248>
 8003732:	e00f      	b.n	8003754 <UART_SetConfig+0x258>
 8003734:	2300      	movs	r3, #0
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373a:	e052      	b.n	80037e2 <UART_SetConfig+0x2e6>
 800373c:	2302      	movs	r3, #2
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003742:	e04e      	b.n	80037e2 <UART_SetConfig+0x2e6>
 8003744:	2304      	movs	r3, #4
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800374a:	e04a      	b.n	80037e2 <UART_SetConfig+0x2e6>
 800374c:	2308      	movs	r3, #8
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003752:	e046      	b.n	80037e2 <UART_SetConfig+0x2e6>
 8003754:	2310      	movs	r3, #16
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800375a:	e042      	b.n	80037e2 <UART_SetConfig+0x2e6>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a17      	ldr	r2, [pc, #92]	@ (80037c0 <UART_SetConfig+0x2c4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d13a      	bne.n	80037dc <UART_SetConfig+0x2e0>
 8003766:	4b18      	ldr	r3, [pc, #96]	@ (80037c8 <UART_SetConfig+0x2cc>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003770:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003774:	d01a      	beq.n	80037ac <UART_SetConfig+0x2b0>
 8003776:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800377a:	d81b      	bhi.n	80037b4 <UART_SetConfig+0x2b8>
 800377c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003780:	d00c      	beq.n	800379c <UART_SetConfig+0x2a0>
 8003782:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003786:	d815      	bhi.n	80037b4 <UART_SetConfig+0x2b8>
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <UART_SetConfig+0x298>
 800378c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003790:	d008      	beq.n	80037a4 <UART_SetConfig+0x2a8>
 8003792:	e00f      	b.n	80037b4 <UART_SetConfig+0x2b8>
 8003794:	2300      	movs	r3, #0
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800379a:	e022      	b.n	80037e2 <UART_SetConfig+0x2e6>
 800379c:	2302      	movs	r3, #2
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037a2:	e01e      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80037a4:	2304      	movs	r3, #4
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037aa:	e01a      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80037ac:	2308      	movs	r3, #8
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b2:	e016      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80037b4:	2310      	movs	r3, #16
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ba:	e012      	b.n	80037e2 <UART_SetConfig+0x2e6>
 80037bc:	efff69f3 	.word	0xefff69f3
 80037c0:	40008000 	.word	0x40008000
 80037c4:	40013800 	.word	0x40013800
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40004400 	.word	0x40004400
 80037d0:	40004800 	.word	0x40004800
 80037d4:	40004c00 	.word	0x40004c00
 80037d8:	40005000 	.word	0x40005000
 80037dc:	2310      	movs	r3, #16
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a9f      	ldr	r2, [pc, #636]	@ (8003a64 <UART_SetConfig+0x568>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d17a      	bne.n	80038e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d824      	bhi.n	800383e <UART_SetConfig+0x342>
 80037f4:	a201      	add	r2, pc, #4	@ (adr r2, 80037fc <UART_SetConfig+0x300>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003821 	.word	0x08003821
 8003800:	0800383f 	.word	0x0800383f
 8003804:	08003829 	.word	0x08003829
 8003808:	0800383f 	.word	0x0800383f
 800380c:	0800382f 	.word	0x0800382f
 8003810:	0800383f 	.word	0x0800383f
 8003814:	0800383f 	.word	0x0800383f
 8003818:	0800383f 	.word	0x0800383f
 800381c:	08003837 	.word	0x08003837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003820:	f7fe fc8c 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8003824:	61f8      	str	r0, [r7, #28]
        break;
 8003826:	e010      	b.n	800384a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003828:	4b8f      	ldr	r3, [pc, #572]	@ (8003a68 <UART_SetConfig+0x56c>)
 800382a:	61fb      	str	r3, [r7, #28]
        break;
 800382c:	e00d      	b.n	800384a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800382e:	f7fe fbed 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8003832:	61f8      	str	r0, [r7, #28]
        break;
 8003834:	e009      	b.n	800384a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800383a:	61fb      	str	r3, [r7, #28]
        break;
 800383c:	e005      	b.n	800384a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003848:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80fb 	beq.w	8003a48 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	429a      	cmp	r2, r3
 8003860:	d305      	bcc.n	800386e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	429a      	cmp	r2, r3
 800386c:	d903      	bls.n	8003876 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003874:	e0e8      	b.n	8003a48 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	2200      	movs	r2, #0
 800387a:	461c      	mov	r4, r3
 800387c:	4615      	mov	r5, r2
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	022b      	lsls	r3, r5, #8
 8003888:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800388c:	0222      	lsls	r2, r4, #8
 800388e:	68f9      	ldr	r1, [r7, #12]
 8003890:	6849      	ldr	r1, [r1, #4]
 8003892:	0849      	lsrs	r1, r1, #1
 8003894:	2000      	movs	r0, #0
 8003896:	4688      	mov	r8, r1
 8003898:	4681      	mov	r9, r0
 800389a:	eb12 0a08 	adds.w	sl, r2, r8
 800389e:	eb43 0b09 	adc.w	fp, r3, r9
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038b0:	4650      	mov	r0, sl
 80038b2:	4659      	mov	r1, fp
 80038b4:	f7fc fce4 	bl	8000280 <__aeabi_uldivmod>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4613      	mov	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038c6:	d308      	bcc.n	80038da <UART_SetConfig+0x3de>
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038ce:	d204      	bcs.n	80038da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	60da      	str	r2, [r3, #12]
 80038d8:	e0b6      	b.n	8003a48 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038e0:	e0b2      	b.n	8003a48 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ea:	d15e      	bne.n	80039aa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80038ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d828      	bhi.n	8003946 <UART_SetConfig+0x44a>
 80038f4:	a201      	add	r2, pc, #4	@ (adr r2, 80038fc <UART_SetConfig+0x400>)
 80038f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fa:	bf00      	nop
 80038fc:	08003921 	.word	0x08003921
 8003900:	08003929 	.word	0x08003929
 8003904:	08003931 	.word	0x08003931
 8003908:	08003947 	.word	0x08003947
 800390c:	08003937 	.word	0x08003937
 8003910:	08003947 	.word	0x08003947
 8003914:	08003947 	.word	0x08003947
 8003918:	08003947 	.word	0x08003947
 800391c:	0800393f 	.word	0x0800393f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003920:	f7fe fc0c 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8003924:	61f8      	str	r0, [r7, #28]
        break;
 8003926:	e014      	b.n	8003952 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003928:	f7fe fc1e 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 800392c:	61f8      	str	r0, [r7, #28]
        break;
 800392e:	e010      	b.n	8003952 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003930:	4b4d      	ldr	r3, [pc, #308]	@ (8003a68 <UART_SetConfig+0x56c>)
 8003932:	61fb      	str	r3, [r7, #28]
        break;
 8003934:	e00d      	b.n	8003952 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003936:	f7fe fb69 	bl	800200c <HAL_RCC_GetSysClockFreq>
 800393a:	61f8      	str	r0, [r7, #28]
        break;
 800393c:	e009      	b.n	8003952 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003942:	61fb      	str	r3, [r7, #28]
        break;
 8003944:	e005      	b.n	8003952 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003950:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d077      	beq.n	8003a48 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005a      	lsls	r2, r3, #1
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	085b      	lsrs	r3, r3, #1
 8003962:	441a      	add	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b0f      	cmp	r3, #15
 8003972:	d916      	bls.n	80039a2 <UART_SetConfig+0x4a6>
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800397a:	d212      	bcs.n	80039a2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	b29b      	uxth	r3, r3
 8003980:	f023 030f 	bic.w	r3, r3, #15
 8003984:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	085b      	lsrs	r3, r3, #1
 800398a:	b29b      	uxth	r3, r3
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	b29a      	uxth	r2, r3
 8003992:	8afb      	ldrh	r3, [r7, #22]
 8003994:	4313      	orrs	r3, r2
 8003996:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	8afa      	ldrh	r2, [r7, #22]
 800399e:	60da      	str	r2, [r3, #12]
 80039a0:	e052      	b.n	8003a48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039a8:	e04e      	b.n	8003a48 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d827      	bhi.n	8003a02 <UART_SetConfig+0x506>
 80039b2:	a201      	add	r2, pc, #4	@ (adr r2, 80039b8 <UART_SetConfig+0x4bc>)
 80039b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b8:	080039dd 	.word	0x080039dd
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	080039ed 	.word	0x080039ed
 80039c4:	08003a03 	.word	0x08003a03
 80039c8:	080039f3 	.word	0x080039f3
 80039cc:	08003a03 	.word	0x08003a03
 80039d0:	08003a03 	.word	0x08003a03
 80039d4:	08003a03 	.word	0x08003a03
 80039d8:	080039fb 	.word	0x080039fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039dc:	f7fe fbae 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 80039e0:	61f8      	str	r0, [r7, #28]
        break;
 80039e2:	e014      	b.n	8003a0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e4:	f7fe fbc0 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 80039e8:	61f8      	str	r0, [r7, #28]
        break;
 80039ea:	e010      	b.n	8003a0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003a68 <UART_SetConfig+0x56c>)
 80039ee:	61fb      	str	r3, [r7, #28]
        break;
 80039f0:	e00d      	b.n	8003a0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f2:	f7fe fb0b 	bl	800200c <HAL_RCC_GetSysClockFreq>
 80039f6:	61f8      	str	r0, [r7, #28]
        break;
 80039f8:	e009      	b.n	8003a0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039fe:	61fb      	str	r3, [r7, #28]
        break;
 8003a00:	e005      	b.n	8003a0e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a0c:	bf00      	nop
    }

    if (pclk != 0U)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d019      	beq.n	8003a48 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	085a      	lsrs	r2, r3, #1
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	441a      	add	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	d909      	bls.n	8003a42 <UART_SetConfig+0x546>
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a34:	d205      	bcs.n	8003a42 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60da      	str	r2, [r3, #12]
 8003a40:	e002      	b.n	8003a48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3728      	adds	r7, #40	@ 0x28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a62:	bf00      	nop
 8003a64:	40008000 	.word	0x40008000
 8003a68:	00f42400 	.word	0x00f42400

08003a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01a      	beq.n	8003b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b6a:	d10a      	bne.n	8003b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b098      	sub	sp, #96	@ 0x60
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bc0:	f7fd fa02 	bl	8000fc8 <HAL_GetTick>
 8003bc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d12e      	bne.n	8003c32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f88c 	bl	8003d00 <UART_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d021      	beq.n	8003c32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c02:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e6      	bne.n	8003bee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e062      	b.n	8003cf8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d149      	bne.n	8003cd4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f856 	bl	8003d00 <UART_WaitOnFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d03c      	beq.n	8003cd4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	623b      	str	r3, [r7, #32]
   return(result);
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e6      	bne.n	8003c5a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3308      	adds	r3, #8
 8003c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3308      	adds	r3, #8
 8003caa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cac:	61fa      	str	r2, [r7, #28]
 8003cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	69b9      	ldr	r1, [r7, #24]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e5      	bne.n	8003c8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e011      	b.n	8003cf8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3758      	adds	r7, #88	@ 0x58
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d10:	e04f      	b.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d04b      	beq.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1a:	f7fd f955 	bl	8000fc8 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d302      	bcc.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e04e      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d037      	beq.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b80      	cmp	r3, #128	@ 0x80
 8003d46:	d034      	beq.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b40      	cmp	r3, #64	@ 0x40
 8003d4c:	d031      	beq.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d110      	bne.n	8003d7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2208      	movs	r2, #8
 8003d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f838 	bl	8003dda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e029      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d8c:	d111      	bne.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f81e 	bl	8003dda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e00f      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	bf0c      	ite	eq
 8003dc2:	2301      	moveq	r3, #1
 8003dc4:	2300      	movne	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d0a0      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b095      	sub	sp, #84	@ 0x54
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e6      	bne.n	8003de2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3308      	adds	r3, #8
 8003e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	e853 3f00 	ldrex	r3, [r3]
 8003e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3308      	adds	r3, #8
 8003e32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e3c:	e841 2300 	strex	r3, r2, [r1]
 8003e40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e5      	bne.n	8003e14 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d118      	bne.n	8003e82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f023 0310 	bic.w	r3, r3, #16
 8003e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	6979      	ldr	r1, [r7, #20]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e6      	bne.n	8003e50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e96:	bf00      	nop
 8003e98:	3754      	adds	r7, #84	@ 0x54
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <__NVIC_SetPriority>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	6039      	str	r1, [r7, #0]
 8003eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	db0a      	blt.n	8003ece <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	490c      	ldr	r1, [pc, #48]	@ (8003ef0 <__NVIC_SetPriority+0x4c>)
 8003ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec2:	0112      	lsls	r2, r2, #4
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ecc:	e00a      	b.n	8003ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	4908      	ldr	r1, [pc, #32]	@ (8003ef4 <__NVIC_SetPriority+0x50>)
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	3b04      	subs	r3, #4
 8003edc:	0112      	lsls	r2, r2, #4
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	761a      	strb	r2, [r3, #24]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000e100 	.word	0xe000e100
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <SysTick_Handler+0x1c>)
 8003efe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f00:	f001 ff10 	bl	8005d24 <xTaskGetSchedulerState>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d001      	beq.n	8003f0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f0a:	f002 fd05 	bl	8006918 <xPortSysTickHandler>
  }
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	e000e010 	.word	0xe000e010

08003f18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	f06f 0004 	mvn.w	r0, #4
 8003f22:	f7ff ffbf 	bl	8003ea4 <__NVIC_SetPriority>
#endif
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f32:	f3ef 8305 	mrs	r3, IPSR
 8003f36:	603b      	str	r3, [r7, #0]
  return(result);
 8003f38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f3e:	f06f 0305 	mvn.w	r3, #5
 8003f42:	607b      	str	r3, [r7, #4]
 8003f44:	e00c      	b.n	8003f60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f46:	4b0a      	ldr	r3, [pc, #40]	@ (8003f70 <osKernelInitialize+0x44>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f4e:	4b08      	ldr	r3, [pc, #32]	@ (8003f70 <osKernelInitialize+0x44>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	607b      	str	r3, [r7, #4]
 8003f58:	e002      	b.n	8003f60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f60:	687b      	ldr	r3, [r7, #4]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000170 	.word	0x20000170

08003f74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f7a:	f3ef 8305 	mrs	r3, IPSR
 8003f7e:	603b      	str	r3, [r7, #0]
  return(result);
 8003f80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003f86:	f06f 0305 	mvn.w	r3, #5
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	e010      	b.n	8003fb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fbc <osKernelStart+0x48>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d109      	bne.n	8003faa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f96:	f7ff ffbf 	bl	8003f18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f9a:	4b08      	ldr	r3, [pc, #32]	@ (8003fbc <osKernelStart+0x48>)
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003fa0:	f001 f8e4 	bl	800516c <vTaskStartScheduler>
      stat = osOK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	607b      	str	r3, [r7, #4]
 8003fa8:	e002      	b.n	8003fb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295
 8003fae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fb0:	687b      	ldr	r3, [r7, #4]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000170 	.word	0x20000170

08003fc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08e      	sub	sp, #56	@ 0x38
 8003fc4:	af04      	add	r7, sp, #16
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fd0:	f3ef 8305 	mrs	r3, IPSR
 8003fd4:	617b      	str	r3, [r7, #20]
  return(result);
 8003fd6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d17e      	bne.n	80040da <osThreadNew+0x11a>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d07b      	beq.n	80040da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003fe2:	2380      	movs	r3, #128	@ 0x80
 8003fe4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003fe6:	2318      	movs	r3, #24
 8003fe8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d045      	beq.n	8004086 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <osThreadNew+0x48>
        name = attr->name;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <osThreadNew+0x6e>
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2b38      	cmp	r3, #56	@ 0x38
 8004020:	d805      	bhi.n	800402e <osThreadNew+0x6e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <osThreadNew+0x72>
        return (NULL);
 800402e:	2300      	movs	r3, #0
 8004030:	e054      	b.n	80040dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	089b      	lsrs	r3, r3, #2
 8004040:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00e      	beq.n	8004068 <osThreadNew+0xa8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b5f      	cmp	r3, #95	@ 0x5f
 8004050:	d90a      	bls.n	8004068 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004056:	2b00      	cmp	r3, #0
 8004058:	d006      	beq.n	8004068 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <osThreadNew+0xa8>
        mem = 1;
 8004062:	2301      	movs	r3, #1
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	e010      	b.n	800408a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10c      	bne.n	800408a <osThreadNew+0xca>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d108      	bne.n	800408a <osThreadNew+0xca>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d104      	bne.n	800408a <osThreadNew+0xca>
          mem = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	e001      	b.n	800408a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d110      	bne.n	80040b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004098:	9202      	str	r2, [sp, #8]
 800409a:	9301      	str	r3, [sp, #4]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	6a3a      	ldr	r2, [r7, #32]
 80040a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fe1a 	bl	8004ce0 <xTaskCreateStatic>
 80040ac:	4603      	mov	r3, r0
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	e013      	b.n	80040da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d110      	bne.n	80040da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	f107 0310 	add.w	r3, r7, #16
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fe68 	bl	8004da0 <xTaskCreate>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d001      	beq.n	80040da <osThreadNew+0x11a>
            hTask = NULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040da:	693b      	ldr	r3, [r7, #16]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3728      	adds	r7, #40	@ 0x28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ec:	f3ef 8305 	mrs	r3, IPSR
 80040f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80040f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <osDelay+0x1c>
    stat = osErrorISR;
 80040f8:	f06f 0305 	mvn.w	r3, #5
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	e007      	b.n	8004110 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <osDelay+0x2c>
      vTaskDelay(ticks);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 ff90 	bl	8005030 <vTaskDelay>
    }
  }

  return (stat);
 8004110:	68fb      	ldr	r3, [r7, #12]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a07      	ldr	r2, [pc, #28]	@ (8004148 <vApplicationGetIdleTaskMemory+0x2c>)
 800412c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4a06      	ldr	r2, [pc, #24]	@ (800414c <vApplicationGetIdleTaskMemory+0x30>)
 8004132:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2280      	movs	r2, #128	@ 0x80
 8004138:	601a      	str	r2, [r3, #0]
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000174 	.word	0x20000174
 800414c:	200001d4 	.word	0x200001d4

08004150 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a07      	ldr	r2, [pc, #28]	@ (800417c <vApplicationGetTimerTaskMemory+0x2c>)
 8004160:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4a06      	ldr	r2, [pc, #24]	@ (8004180 <vApplicationGetTimerTaskMemory+0x30>)
 8004166:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800416e:	601a      	str	r2, [r3, #0]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	200003d4 	.word	0x200003d4
 8004180:	20000434 	.word	0x20000434

08004184 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f103 0208 	add.w	r2, r3, #8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f04f 32ff 	mov.w	r2, #4294967295
 800419c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f103 0208 	add.w	r2, r3, #8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f103 0208 	add.w	r2, r3, #8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	601a      	str	r2, [r3, #0]
}
 800421a:	bf00      	nop
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d103      	bne.n	8004246 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e00c      	b.n	8004260 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3308      	adds	r3, #8
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e002      	b.n	8004254 <vListInsert+0x2e>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	429a      	cmp	r2, r3
 800425e:	d2f6      	bcs.n	800424e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	601a      	str	r2, [r3, #0]
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6892      	ldr	r2, [r2, #8]
 80042ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6852      	ldr	r2, [r2, #4]
 80042b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d103      	bne.n	80042cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	1e5a      	subs	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10b      	bne.n	8004318 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	e7fd      	b.n	8004314 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004318:	f002 fa6e 	bl	80067f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004324:	68f9      	ldr	r1, [r7, #12]
 8004326:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	441a      	add	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004348:	3b01      	subs	r3, #1
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	441a      	add	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	22ff      	movs	r2, #255	@ 0xff
 800435c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	22ff      	movs	r2, #255	@ 0xff
 8004364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d114      	bne.n	8004398 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01a      	beq.n	80043ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3310      	adds	r3, #16
 800437a:	4618      	mov	r0, r3
 800437c:	f001 fa3e 	bl	80057fc <xTaskRemoveFromEventList>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d012      	beq.n	80043ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004386:	4b0d      	ldr	r3, [pc, #52]	@ (80043bc <xQueueGenericReset+0xd0>)
 8004388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	e009      	b.n	80043ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3310      	adds	r3, #16
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fef1 	bl	8004184 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3324      	adds	r3, #36	@ 0x24
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff feec 	bl	8004184 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043ac:	f002 fa56 	bl	800685c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043b0:	2301      	movs	r3, #1
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	e000ed04 	.word	0xe000ed04

080043c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08e      	sub	sp, #56	@ 0x38
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	e7fd      	b.n	8004406 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <xQueueGenericCreateStatic+0x56>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <xQueueGenericCreateStatic+0x5a>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <xQueueGenericCreateStatic+0x5c>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	623b      	str	r3, [r7, #32]
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d102      	bne.n	8004444 <xQueueGenericCreateStatic+0x84>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <xQueueGenericCreateStatic+0x88>
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <xQueueGenericCreateStatic+0x8a>
 8004448:	2300      	movs	r3, #0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	61fb      	str	r3, [r7, #28]
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	e7fd      	b.n	8004462 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004466:	2350      	movs	r3, #80	@ 0x50
 8004468:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b50      	cmp	r3, #80	@ 0x50
 800446e:	d00b      	beq.n	8004488 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	61bb      	str	r3, [r7, #24]
}
 8004482:	bf00      	nop
 8004484:	bf00      	nop
 8004486:	e7fd      	b.n	8004484 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004488:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800448e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00d      	beq.n	80044b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800449c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80044a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f805 	bl	80044ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3730      	adds	r7, #48	@ 0x30
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e002      	b.n	80044dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044e8:	2101      	movs	r1, #1
 80044ea:	69b8      	ldr	r0, [r7, #24]
 80044ec:	f7ff fefe 	bl	80042ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08e      	sub	sp, #56	@ 0x38
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800450e:	2300      	movs	r3, #0
 8004510:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <xQueueGenericSend+0x34>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	e7fd      	b.n	8004530 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d103      	bne.n	8004542 <xQueueGenericSend+0x42>
 800453a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <xQueueGenericSend+0x46>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <xQueueGenericSend+0x48>
 8004546:	2300      	movs	r3, #0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10b      	bne.n	8004564 <xQueueGenericSend+0x64>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800455e:	bf00      	nop
 8004560:	bf00      	nop
 8004562:	e7fd      	b.n	8004560 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d103      	bne.n	8004572 <xQueueGenericSend+0x72>
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <xQueueGenericSend+0x76>
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <xQueueGenericSend+0x78>
 8004576:	2300      	movs	r3, #0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <xQueueGenericSend+0x94>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	623b      	str	r3, [r7, #32]
}
 800458e:	bf00      	nop
 8004590:	bf00      	nop
 8004592:	e7fd      	b.n	8004590 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004594:	f001 fbc6 	bl	8005d24 <xTaskGetSchedulerState>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d102      	bne.n	80045a4 <xQueueGenericSend+0xa4>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <xQueueGenericSend+0xa8>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <xQueueGenericSend+0xaa>
 80045a8:	2300      	movs	r3, #0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	61fb      	str	r3, [r7, #28]
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	e7fd      	b.n	80045c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045c6:	f002 f917 	bl	80067f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d302      	bcc.n	80045dc <xQueueGenericSend+0xdc>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d129      	bne.n	8004630 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045e2:	f000 fa0f 	bl	8004a04 <prvCopyDataToQueue>
 80045e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d010      	beq.n	8004612 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f2:	3324      	adds	r3, #36	@ 0x24
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 f901 	bl	80057fc <xTaskRemoveFromEventList>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d013      	beq.n	8004628 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004600:	4b3f      	ldr	r3, [pc, #252]	@ (8004700 <xQueueGenericSend+0x200>)
 8004602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	e00a      	b.n	8004628 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004618:	4b39      	ldr	r3, [pc, #228]	@ (8004700 <xQueueGenericSend+0x200>)
 800461a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004628:	f002 f918 	bl	800685c <vPortExitCritical>
				return pdPASS;
 800462c:	2301      	movs	r3, #1
 800462e:	e063      	b.n	80046f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004636:	f002 f911 	bl	800685c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800463a:	2300      	movs	r3, #0
 800463c:	e05c      	b.n	80046f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800463e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	4618      	mov	r0, r3
 800464a:	f001 f93b 	bl	80058c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800464e:	2301      	movs	r3, #1
 8004650:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004652:	f002 f903 	bl	800685c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004656:	f000 fdf3 	bl	8005240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800465a:	f002 f8cd 	bl	80067f8 <vPortEnterCritical>
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004664:	b25b      	sxtb	r3, r3
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d103      	bne.n	8004674 <xQueueGenericSend+0x174>
 800466c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004676:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800467a:	b25b      	sxtb	r3, r3
 800467c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004680:	d103      	bne.n	800468a <xQueueGenericSend+0x18a>
 8004682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800468a:	f002 f8e7 	bl	800685c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800468e:	1d3a      	adds	r2, r7, #4
 8004690:	f107 0314 	add.w	r3, r7, #20
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f001 f92a 	bl	80058f0 <xTaskCheckForTimeOut>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d124      	bne.n	80046ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046a4:	f000 faa6 	bl	8004bf4 <prvIsQueueFull>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d018      	beq.n	80046e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b0:	3310      	adds	r3, #16
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 f84e 	bl	8005758 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046be:	f000 fa31 	bl	8004b24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046c2:	f000 fdcb 	bl	800525c <xTaskResumeAll>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f47f af7c 	bne.w	80045c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80046ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004700 <xQueueGenericSend+0x200>)
 80046d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	e772      	b.n	80045c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046e2:	f000 fa1f 	bl	8004b24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046e6:	f000 fdb9 	bl	800525c <xTaskResumeAll>
 80046ea:	e76c      	b.n	80045c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046ee:	f000 fa19 	bl	8004b24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046f2:	f000 fdb3 	bl	800525c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3738      	adds	r7, #56	@ 0x38
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	e000ed04 	.word	0xe000ed04

08004704 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b090      	sub	sp, #64	@ 0x40
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <xQueueGenericSendFromISR+0x3e>
 800473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <xQueueGenericSendFromISR+0x42>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <xQueueGenericSendFromISR+0x44>
 8004746:	2300      	movs	r3, #0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10b      	bne.n	8004764 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	e7fd      	b.n	8004760 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d103      	bne.n	8004772 <xQueueGenericSendFromISR+0x6e>
 800476a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <xQueueGenericSendFromISR+0x72>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <xQueueGenericSendFromISR+0x74>
 8004776:	2300      	movs	r3, #0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10b      	bne.n	8004794 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	623b      	str	r3, [r7, #32]
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	e7fd      	b.n	8004790 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004794:	f002 f910 	bl	80069b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004798:	f3ef 8211 	mrs	r2, BASEPRI
 800479c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	61fa      	str	r2, [r7, #28]
 80047ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047bc:	429a      	cmp	r2, r3
 80047be:	d302      	bcc.n	80047c6 <xQueueGenericSendFromISR+0xc2>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d12f      	bne.n	8004826 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80047dc:	f000 f912 	bl	8004a04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d112      	bne.n	8004810 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d016      	beq.n	8004820 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f4:	3324      	adds	r3, #36	@ 0x24
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 f800 	bl	80057fc <xTaskRemoveFromEventList>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00e      	beq.n	8004820 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00b      	beq.n	8004820 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	e007      	b.n	8004820 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004810:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004814:	3301      	adds	r3, #1
 8004816:	b2db      	uxtb	r3, r3
 8004818:	b25a      	sxtb	r2, r3
 800481a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004820:	2301      	movs	r3, #1
 8004822:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004824:	e001      	b.n	800482a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004826:	2300      	movs	r3, #0
 8004828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800482a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004834:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004838:	4618      	mov	r0, r3
 800483a:	3740      	adds	r7, #64	@ 0x40
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08c      	sub	sp, #48	@ 0x30
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800484c:	2300      	movs	r3, #0
 800484e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10b      	bne.n	8004872 <xQueueReceive+0x32>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	623b      	str	r3, [r7, #32]
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	e7fd      	b.n	800486e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d103      	bne.n	8004880 <xQueueReceive+0x40>
 8004878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <xQueueReceive+0x44>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <xQueueReceive+0x46>
 8004884:	2300      	movs	r3, #0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <xQueueReceive+0x62>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	61fb      	str	r3, [r7, #28]
}
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	e7fd      	b.n	800489e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048a2:	f001 fa3f 	bl	8005d24 <xTaskGetSchedulerState>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d102      	bne.n	80048b2 <xQueueReceive+0x72>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <xQueueReceive+0x76>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <xQueueReceive+0x78>
 80048b6:	2300      	movs	r3, #0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <xQueueReceive+0x94>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	61bb      	str	r3, [r7, #24]
}
 80048ce:	bf00      	nop
 80048d0:	bf00      	nop
 80048d2:	e7fd      	b.n	80048d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048d4:	f001 ff90 	bl	80067f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01f      	beq.n	8004924 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048e8:	f000 f8f6 	bl	8004ad8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	1e5a      	subs	r2, r3, #1
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00f      	beq.n	800491c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fe:	3310      	adds	r3, #16
 8004900:	4618      	mov	r0, r3
 8004902:	f000 ff7b 	bl	80057fc <xTaskRemoveFromEventList>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800490c:	4b3c      	ldr	r3, [pc, #240]	@ (8004a00 <xQueueReceive+0x1c0>)
 800490e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800491c:	f001 ff9e 	bl	800685c <vPortExitCritical>
				return pdPASS;
 8004920:	2301      	movs	r3, #1
 8004922:	e069      	b.n	80049f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d103      	bne.n	8004932 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800492a:	f001 ff97 	bl	800685c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800492e:	2300      	movs	r3, #0
 8004930:	e062      	b.n	80049f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004938:	f107 0310 	add.w	r3, r7, #16
 800493c:	4618      	mov	r0, r3
 800493e:	f000 ffc1 	bl	80058c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004942:	2301      	movs	r3, #1
 8004944:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004946:	f001 ff89 	bl	800685c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800494a:	f000 fc79 	bl	8005240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800494e:	f001 ff53 	bl	80067f8 <vPortEnterCritical>
 8004952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004958:	b25b      	sxtb	r3, r3
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d103      	bne.n	8004968 <xQueueReceive+0x128>
 8004960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800496e:	b25b      	sxtb	r3, r3
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d103      	bne.n	800497e <xQueueReceive+0x13e>
 8004976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800497e:	f001 ff6d 	bl	800685c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004982:	1d3a      	adds	r2, r7, #4
 8004984:	f107 0310 	add.w	r3, r7, #16
 8004988:	4611      	mov	r1, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f000 ffb0 	bl	80058f0 <xTaskCheckForTimeOut>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d123      	bne.n	80049de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004998:	f000 f916 	bl	8004bc8 <prvIsQueueEmpty>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d017      	beq.n	80049d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a4:	3324      	adds	r3, #36	@ 0x24
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fed4 	bl	8005758 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049b2:	f000 f8b7 	bl	8004b24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049b6:	f000 fc51 	bl	800525c <xTaskResumeAll>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d189      	bne.n	80048d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80049c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a00 <xQueueReceive+0x1c0>)
 80049c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	e780      	b.n	80048d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049d4:	f000 f8a6 	bl	8004b24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049d8:	f000 fc40 	bl	800525c <xTaskResumeAll>
 80049dc:	e77a      	b.n	80048d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049e0:	f000 f8a0 	bl	8004b24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049e4:	f000 fc3a 	bl	800525c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049ea:	f000 f8ed 	bl	8004bc8 <prvIsQueueEmpty>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f43f af6f 	beq.w	80048d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3730      	adds	r7, #48	@ 0x30
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	e000ed04 	.word	0xe000ed04

08004a04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10d      	bne.n	8004a3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d14d      	bne.n	8004ac6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 f996 	bl	8005d60 <xTaskPriorityDisinherit>
 8004a34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	e043      	b.n	8004ac6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d119      	bne.n	8004a78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6858      	ldr	r0, [r3, #4]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	f002 fc37 	bl	80072c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	441a      	add	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d32b      	bcc.n	8004ac6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	605a      	str	r2, [r3, #4]
 8004a76:	e026      	b.n	8004ac6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	68d8      	ldr	r0, [r3, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	461a      	mov	r2, r3
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	f002 fc1d 	bl	80072c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a90:	425b      	negs	r3, r3
 8004a92:	441a      	add	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d207      	bcs.n	8004ab4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aac:	425b      	negs	r3, r3
 8004aae:	441a      	add	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d105      	bne.n	8004ac6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004ace:	697b      	ldr	r3, [r7, #20]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	441a      	add	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d303      	bcc.n	8004b0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68d9      	ldr	r1, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	461a      	mov	r2, r3
 8004b16:	6838      	ldr	r0, [r7, #0]
 8004b18:	f002 fbd3 	bl	80072c2 <memcpy>
	}
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b2c:	f001 fe64 	bl	80067f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b38:	e011      	b.n	8004b5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d012      	beq.n	8004b68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3324      	adds	r3, #36	@ 0x24
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fe58 	bl	80057fc <xTaskRemoveFromEventList>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b52:	f000 ff31 	bl	80059b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	dce9      	bgt.n	8004b3a <prvUnlockQueue+0x16>
 8004b66:	e000      	b.n	8004b6a <prvUnlockQueue+0x46>
					break;
 8004b68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	22ff      	movs	r2, #255	@ 0xff
 8004b6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004b72:	f001 fe73 	bl	800685c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b76:	f001 fe3f 	bl	80067f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b82:	e011      	b.n	8004ba8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d012      	beq.n	8004bb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3310      	adds	r3, #16
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fe33 	bl	80057fc <xTaskRemoveFromEventList>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b9c:	f000 ff0c 	bl	80059b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ba0:	7bbb      	ldrb	r3, [r7, #14]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	dce9      	bgt.n	8004b84 <prvUnlockQueue+0x60>
 8004bb0:	e000      	b.n	8004bb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	22ff      	movs	r2, #255	@ 0xff
 8004bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004bbc:	f001 fe4e 	bl	800685c <vPortExitCritical>
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bd0:	f001 fe12 	bl	80067f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e001      	b.n	8004be6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004be6:	f001 fe39 	bl	800685c <vPortExitCritical>

	return xReturn;
 8004bea:	68fb      	ldr	r3, [r7, #12]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bfc:	f001 fdfc 	bl	80067f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d102      	bne.n	8004c12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	e001      	b.n	8004c16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c16:	f001 fe21 	bl	800685c <vPortExitCritical>

	return xReturn;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	e014      	b.n	8004c5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c34:	4a0f      	ldr	r2, [pc, #60]	@ (8004c74 <vQueueAddToRegistry+0x50>)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10b      	bne.n	8004c58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c40:	490c      	ldr	r1, [pc, #48]	@ (8004c74 <vQueueAddToRegistry+0x50>)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c74 <vQueueAddToRegistry+0x50>)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4413      	add	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c56:	e006      	b.n	8004c66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b07      	cmp	r3, #7
 8004c62:	d9e7      	bls.n	8004c34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20000834 	.word	0x20000834

08004c78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c88:	f001 fdb6 	bl	80067f8 <vPortEnterCritical>
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c92:	b25b      	sxtb	r3, r3
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d103      	bne.n	8004ca2 <vQueueWaitForMessageRestricted+0x2a>
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ca8:	b25b      	sxtb	r3, r3
 8004caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cae:	d103      	bne.n	8004cb8 <vQueueWaitForMessageRestricted+0x40>
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cb8:	f001 fdd0 	bl	800685c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	3324      	adds	r3, #36	@ 0x24
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fd69 	bl	80057a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004cd2:	6978      	ldr	r0, [r7, #20]
 8004cd4:	f7ff ff26 	bl	8004b24 <prvUnlockQueue>
	}
 8004cd8:	bf00      	nop
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08e      	sub	sp, #56	@ 0x38
 8004ce4:	af04      	add	r7, sp, #16
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	623b      	str	r3, [r7, #32]
}
 8004d06:	bf00      	nop
 8004d08:	bf00      	nop
 8004d0a:	e7fd      	b.n	8004d08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	61fb      	str	r3, [r7, #28]
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	e7fd      	b.n	8004d26 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d2a:	2360      	movs	r3, #96	@ 0x60
 8004d2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b60      	cmp	r3, #96	@ 0x60
 8004d32:	d00b      	beq.n	8004d4c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	61bb      	str	r3, [r7, #24]
}
 8004d46:	bf00      	nop
 8004d48:	bf00      	nop
 8004d4a:	e7fd      	b.n	8004d48 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01e      	beq.n	8004d92 <xTaskCreateStatic+0xb2>
 8004d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d01b      	beq.n	8004d92 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d5c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d62:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9303      	str	r3, [sp, #12]
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	9302      	str	r3, [sp, #8]
 8004d74:	f107 0314 	add.w	r3, r7, #20
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f850 	bl	8004e2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d8c:	f000 f8e0 	bl	8004f50 <prvAddNewTaskToReadyList>
 8004d90:	e001      	b.n	8004d96 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d96:	697b      	ldr	r3, [r7, #20]
	}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3728      	adds	r7, #40	@ 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08c      	sub	sp, #48	@ 0x30
 8004da4:	af04      	add	r7, sp, #16
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	603b      	str	r3, [r7, #0]
 8004dac:	4613      	mov	r3, r2
 8004dae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004db0:	88fb      	ldrh	r3, [r7, #6]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f001 fe41 	bl	8006a3c <pvPortMalloc>
 8004dba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00e      	beq.n	8004de0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004dc2:	2060      	movs	r0, #96	@ 0x60
 8004dc4:	f001 fe3a 	bl	8006a3c <pvPortMalloc>
 8004dc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dd6:	e005      	b.n	8004de4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004dd8:	6978      	ldr	r0, [r7, #20]
 8004dda:	f001 fefd 	bl	8006bd8 <vPortFree>
 8004dde:	e001      	b.n	8004de4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d017      	beq.n	8004e1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004df2:	88fa      	ldrh	r2, [r7, #6]
 8004df4:	2300      	movs	r3, #0
 8004df6:	9303      	str	r3, [sp, #12]
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	9302      	str	r3, [sp, #8]
 8004dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f80e 	bl	8004e2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e0e:	69f8      	ldr	r0, [r7, #28]
 8004e10:	f000 f89e 	bl	8004f50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e14:	2301      	movs	r3, #1
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	e002      	b.n	8004e20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e20:	69bb      	ldr	r3, [r7, #24]
	}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b088      	sub	sp, #32
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	461a      	mov	r2, r3
 8004e42:	21a5      	movs	r1, #165	@ 0xa5
 8004e44:	f002 f9c1 	bl	80071ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e52:	3b01      	subs	r3, #1
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	f023 0307 	bic.w	r3, r3, #7
 8004e60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00b      	beq.n	8004e84 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	617b      	str	r3, [r7, #20]
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	e7fd      	b.n	8004e80 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01f      	beq.n	8004eca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	e012      	b.n	8004eb6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	4413      	add	r3, r2
 8004e96:	7819      	ldrb	r1, [r3, #0]
 8004e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	3334      	adds	r3, #52	@ 0x34
 8004ea0:	460a      	mov	r2, r1
 8004ea2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d006      	beq.n	8004ebe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b0f      	cmp	r3, #15
 8004eba:	d9e9      	bls.n	8004e90 <prvInitialiseNewTask+0x66>
 8004ebc:	e000      	b.n	8004ec0 <prvInitialiseNewTask+0x96>
			{
				break;
 8004ebe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ec8:	e003      	b.n	8004ed2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed4:	2b37      	cmp	r3, #55	@ 0x37
 8004ed6:	d901      	bls.n	8004edc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ed8:	2337      	movs	r3, #55	@ 0x37
 8004eda:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ede:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ee6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eea:	2200      	movs	r2, #0
 8004eec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff f966 	bl	80041c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efa:	3318      	adds	r3, #24
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff f961 	bl	80041c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f16:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f20:	2200      	movs	r2, #0
 8004f22:	659a      	str	r2, [r3, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	68f9      	ldr	r1, [r7, #12]
 8004f30:	69b8      	ldr	r0, [r7, #24]
 8004f32:	f001 fb33 	bl	800659c <pxPortInitialiseStack>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f48:	bf00      	nop
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f58:	f001 fc4e 	bl	80067f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8005014 <prvAddNewTaskToReadyList+0xc4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3301      	adds	r3, #1
 8004f62:	4a2c      	ldr	r2, [pc, #176]	@ (8005014 <prvAddNewTaskToReadyList+0xc4>)
 8004f64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f66:	4b2c      	ldr	r3, [pc, #176]	@ (8005018 <prvAddNewTaskToReadyList+0xc8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005018 <prvAddNewTaskToReadyList+0xc8>)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f74:	4b27      	ldr	r3, [pc, #156]	@ (8005014 <prvAddNewTaskToReadyList+0xc4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d110      	bne.n	8004f9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f7c:	f000 fd40 	bl	8005a00 <prvInitialiseTaskLists>
 8004f80:	e00d      	b.n	8004f9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f82:	4b26      	ldr	r3, [pc, #152]	@ (800501c <prvAddNewTaskToReadyList+0xcc>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f8a:	4b23      	ldr	r3, [pc, #140]	@ (8005018 <prvAddNewTaskToReadyList+0xc8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d802      	bhi.n	8004f9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f98:	4a1f      	ldr	r2, [pc, #124]	@ (8005018 <prvAddNewTaskToReadyList+0xc8>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f9e:	4b20      	ldr	r3, [pc, #128]	@ (8005020 <prvAddNewTaskToReadyList+0xd0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8005020 <prvAddNewTaskToReadyList+0xd0>)
 8004fa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8005020 <prvAddNewTaskToReadyList+0xd0>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005024 <prvAddNewTaskToReadyList+0xd4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d903      	bls.n	8004fc4 <prvAddNewTaskToReadyList+0x74>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <prvAddNewTaskToReadyList+0xd4>)
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4a15      	ldr	r2, [pc, #84]	@ (8005028 <prvAddNewTaskToReadyList+0xd8>)
 8004fd2:	441a      	add	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f7ff f8ff 	bl	80041de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fe0:	f001 fc3c 	bl	800685c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800501c <prvAddNewTaskToReadyList+0xcc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00e      	beq.n	800500a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fec:	4b0a      	ldr	r3, [pc, #40]	@ (8005018 <prvAddNewTaskToReadyList+0xc8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d207      	bcs.n	800500a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800502c <prvAddNewTaskToReadyList+0xdc>)
 8004ffc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000d48 	.word	0x20000d48
 8005018:	20000874 	.word	0x20000874
 800501c:	20000d54 	.word	0x20000d54
 8005020:	20000d64 	.word	0x20000d64
 8005024:	20000d50 	.word	0x20000d50
 8005028:	20000878 	.word	0x20000878
 800502c:	e000ed04 	.word	0xe000ed04

08005030 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d018      	beq.n	8005074 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005042:	4b14      	ldr	r3, [pc, #80]	@ (8005094 <vTaskDelay+0x64>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <vTaskDelay+0x32>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	60bb      	str	r3, [r7, #8]
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	e7fd      	b.n	800505e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005062:	f000 f8ed 	bl	8005240 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005066:	2100      	movs	r1, #0
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fee9 	bl	8005e40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800506e:	f000 f8f5 	bl	800525c <xTaskResumeAll>
 8005072:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d107      	bne.n	800508a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800507a:	4b07      	ldr	r3, [pc, #28]	@ (8005098 <vTaskDelay+0x68>)
 800507c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800508a:	bf00      	nop
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000d70 	.word	0x20000d70
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10b      	bne.n	80050c6 <eTaskGetState+0x2a>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	60bb      	str	r3, [r7, #8]
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	e7fd      	b.n	80050c2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80050c6:	4b24      	ldr	r3, [pc, #144]	@ (8005158 <eTaskGetState+0xbc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d102      	bne.n	80050d6 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80050d0:	2300      	movs	r3, #0
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e03a      	b.n	800514c <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 80050d6:	f001 fb8f 	bl	80067f8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80050e0:	4b1e      	ldr	r3, [pc, #120]	@ (800515c <eTaskGetState+0xc0>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80050e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005160 <eTaskGetState+0xc4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80050ec:	f001 fbb6 	bl	800685c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d003      	beq.n	8005100 <eTaskGetState+0x64>
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d102      	bne.n	8005106 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8005100:	2302      	movs	r3, #2
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e022      	b.n	800514c <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	4a16      	ldr	r2, [pc, #88]	@ (8005164 <eTaskGetState+0xc8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d112      	bne.n	8005134 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10b      	bne.n	800512e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b01      	cmp	r3, #1
 8005120:	d102      	bne.n	8005128 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8005122:	2302      	movs	r3, #2
 8005124:	77fb      	strb	r3, [r7, #31]
 8005126:	e011      	b.n	800514c <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8005128:	2303      	movs	r3, #3
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e00e      	b.n	800514c <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800512e:	2302      	movs	r3, #2
 8005130:	77fb      	strb	r3, [r7, #31]
 8005132:	e00b      	b.n	800514c <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	4a0c      	ldr	r2, [pc, #48]	@ (8005168 <eTaskGetState+0xcc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d002      	beq.n	8005142 <eTaskGetState+0xa6>
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8005142:	2304      	movs	r3, #4
 8005144:	77fb      	strb	r3, [r7, #31]
 8005146:	e001      	b.n	800514c <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8005148:	2301      	movs	r3, #1
 800514a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800514c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800514e:	4618      	mov	r0, r3
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000874 	.word	0x20000874
 800515c:	20000d00 	.word	0x20000d00
 8005160:	20000d04 	.word	0x20000d04
 8005164:	20000d34 	.word	0x20000d34
 8005168:	20000d1c 	.word	0x20000d1c

0800516c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	@ 0x28
 8005170:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800517a:	463a      	mov	r2, r7
 800517c:	1d39      	adds	r1, r7, #4
 800517e:	f107 0308 	add.w	r3, r7, #8
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe ffca 	bl	800411c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	9202      	str	r2, [sp, #8]
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	2300      	movs	r3, #0
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	2300      	movs	r3, #0
 8005198:	460a      	mov	r2, r1
 800519a:	4923      	ldr	r1, [pc, #140]	@ (8005228 <vTaskStartScheduler+0xbc>)
 800519c:	4823      	ldr	r0, [pc, #140]	@ (800522c <vTaskStartScheduler+0xc0>)
 800519e:	f7ff fd9f 	bl	8004ce0 <xTaskCreateStatic>
 80051a2:	4603      	mov	r3, r0
 80051a4:	4a22      	ldr	r2, [pc, #136]	@ (8005230 <vTaskStartScheduler+0xc4>)
 80051a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051a8:	4b21      	ldr	r3, [pc, #132]	@ (8005230 <vTaskStartScheduler+0xc4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051b0:	2301      	movs	r3, #1
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	e001      	b.n	80051ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d102      	bne.n	80051c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051c0:	f000 fe92 	bl	8005ee8 <xTimerCreateTimerTask>
 80051c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d118      	bne.n	80051fe <vTaskStartScheduler+0x92>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	613b      	str	r3, [r7, #16]
}
 80051de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051e0:	4b14      	ldr	r3, [pc, #80]	@ (8005234 <vTaskStartScheduler+0xc8>)
 80051e2:	f04f 32ff 	mov.w	r2, #4294967295
 80051e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051e8:	4b13      	ldr	r3, [pc, #76]	@ (8005238 <vTaskStartScheduler+0xcc>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051ee:	4b13      	ldr	r3, [pc, #76]	@ (800523c <vTaskStartScheduler+0xd0>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80051f4:	f7fb f9bc 	bl	8000570 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051f8:	f001 fa5a 	bl	80066b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051fc:	e00f      	b.n	800521e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d10b      	bne.n	800521e <vTaskStartScheduler+0xb2>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	60fb      	str	r3, [r7, #12]
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	e7fd      	b.n	800521a <vTaskStartScheduler+0xae>
}
 800521e:	bf00      	nop
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	08007e9c 	.word	0x08007e9c
 800522c:	080059d1 	.word	0x080059d1
 8005230:	20000d6c 	.word	0x20000d6c
 8005234:	20000d68 	.word	0x20000d68
 8005238:	20000d54 	.word	0x20000d54
 800523c:	20000d4c 	.word	0x20000d4c

08005240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005244:	4b04      	ldr	r3, [pc, #16]	@ (8005258 <vTaskSuspendAll+0x18>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3301      	adds	r3, #1
 800524a:	4a03      	ldr	r2, [pc, #12]	@ (8005258 <vTaskSuspendAll+0x18>)
 800524c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800524e:	bf00      	nop
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	20000d70 	.word	0x20000d70

0800525c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005266:	2300      	movs	r3, #0
 8005268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800526a:	4b42      	ldr	r3, [pc, #264]	@ (8005374 <xTaskResumeAll+0x118>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <xTaskResumeAll+0x2e>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	603b      	str	r3, [r7, #0]
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	e7fd      	b.n	8005286 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800528a:	f001 fab5 	bl	80067f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800528e:	4b39      	ldr	r3, [pc, #228]	@ (8005374 <xTaskResumeAll+0x118>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3b01      	subs	r3, #1
 8005294:	4a37      	ldr	r2, [pc, #220]	@ (8005374 <xTaskResumeAll+0x118>)
 8005296:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005298:	4b36      	ldr	r3, [pc, #216]	@ (8005374 <xTaskResumeAll+0x118>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d162      	bne.n	8005366 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052a0:	4b35      	ldr	r3, [pc, #212]	@ (8005378 <xTaskResumeAll+0x11c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d05e      	beq.n	8005366 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052a8:	e02f      	b.n	800530a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052aa:	4b34      	ldr	r3, [pc, #208]	@ (800537c <xTaskResumeAll+0x120>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3318      	adds	r3, #24
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fe ffee 	bl	8004298 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3304      	adds	r3, #4
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fe ffe9 	bl	8004298 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005380 <xTaskResumeAll+0x124>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d903      	bls.n	80052da <xTaskResumeAll+0x7e>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005380 <xTaskResumeAll+0x124>)
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4a27      	ldr	r2, [pc, #156]	@ (8005384 <xTaskResumeAll+0x128>)
 80052e8:	441a      	add	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3304      	adds	r3, #4
 80052ee:	4619      	mov	r1, r3
 80052f0:	4610      	mov	r0, r2
 80052f2:	f7fe ff74 	bl	80041de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052fa:	4b23      	ldr	r3, [pc, #140]	@ (8005388 <xTaskResumeAll+0x12c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005300:	429a      	cmp	r2, r3
 8005302:	d302      	bcc.n	800530a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005304:	4b21      	ldr	r3, [pc, #132]	@ (800538c <xTaskResumeAll+0x130>)
 8005306:	2201      	movs	r2, #1
 8005308:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800530a:	4b1c      	ldr	r3, [pc, #112]	@ (800537c <xTaskResumeAll+0x120>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1cb      	bne.n	80052aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005318:	f000 fce4 	bl	8005ce4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800531c:	4b1c      	ldr	r3, [pc, #112]	@ (8005390 <xTaskResumeAll+0x134>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d010      	beq.n	800534a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005328:	f000 f8e2 	bl	80054f0 <xTaskIncrementTick>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005332:	4b16      	ldr	r3, [pc, #88]	@ (800538c <xTaskResumeAll+0x130>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3b01      	subs	r3, #1
 800533c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f1      	bne.n	8005328 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005344:	4b12      	ldr	r3, [pc, #72]	@ (8005390 <xTaskResumeAll+0x134>)
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800534a:	4b10      	ldr	r3, [pc, #64]	@ (800538c <xTaskResumeAll+0x130>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005352:	2301      	movs	r3, #1
 8005354:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005356:	4b0f      	ldr	r3, [pc, #60]	@ (8005394 <xTaskResumeAll+0x138>)
 8005358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005366:	f001 fa79 	bl	800685c <vPortExitCritical>

	return xAlreadyYielded;
 800536a:	68bb      	ldr	r3, [r7, #8]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20000d70 	.word	0x20000d70
 8005378:	20000d48 	.word	0x20000d48
 800537c:	20000d08 	.word	0x20000d08
 8005380:	20000d50 	.word	0x20000d50
 8005384:	20000878 	.word	0x20000878
 8005388:	20000874 	.word	0x20000874
 800538c:	20000d5c 	.word	0x20000d5c
 8005390:	20000d58 	.word	0x20000d58
 8005394:	e000ed04 	.word	0xe000ed04

08005398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800539e:	4b05      	ldr	r3, [pc, #20]	@ (80053b4 <xTaskGetTickCount+0x1c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053a4:	687b      	ldr	r3, [r7, #4]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000d4c 	.word	0x20000d4c

080053b8 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 80053bc:	4b03      	ldr	r3, [pc, #12]	@ (80053cc <uxTaskGetNumberOfTasks+0x14>)
 80053be:	681b      	ldr	r3, [r3, #0]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	20000d48 	.word	0x20000d48

080053d0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	2338      	movs	r3, #56	@ 0x38
 80053e2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80053e4:	f7ff ff2c 	bl	8005240 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80053e8:	4b3b      	ldr	r3, [pc, #236]	@ (80054d8 <uxTaskGetSystemState+0x108>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d36a      	bcc.n	80054c8 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4613      	mov	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	461a      	mov	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	1898      	adds	r0, r3, r2
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4a32      	ldr	r2, [pc, #200]	@ (80054dc <uxTaskGetSystemState+0x10c>)
 8005414:	4413      	add	r3, r2
 8005416:	2201      	movs	r2, #1
 8005418:	4619      	mov	r1, r3
 800541a:	f000 fbc5 	bl	8005ba8 <prvListTasksWithinSingleList>
 800541e:	4602      	mov	r2, r0
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	4413      	add	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e2      	bne.n	80053f2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4613      	mov	r3, r2
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	461a      	mov	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	4a28      	ldr	r2, [pc, #160]	@ (80054e0 <uxTaskGetSystemState+0x110>)
 800543e:	6811      	ldr	r1, [r2, #0]
 8005440:	2202      	movs	r2, #2
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fbb0 	bl	8005ba8 <prvListTasksWithinSingleList>
 8005448:	4602      	mov	r2, r0
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	4413      	add	r3, r2
 800544e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4613      	mov	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	461a      	mov	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	4a20      	ldr	r2, [pc, #128]	@ (80054e4 <uxTaskGetSystemState+0x114>)
 8005462:	6811      	ldr	r1, [r2, #0]
 8005464:	2202      	movs	r2, #2
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fb9e 	bl	8005ba8 <prvListTasksWithinSingleList>
 800546c:	4602      	mov	r2, r0
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	4413      	add	r3, r2
 8005472:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4613      	mov	r3, r2
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	461a      	mov	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	2204      	movs	r2, #4
 8005486:	4918      	ldr	r1, [pc, #96]	@ (80054e8 <uxTaskGetSystemState+0x118>)
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fb8d 	bl	8005ba8 <prvListTasksWithinSingleList>
 800548e:	4602      	mov	r2, r0
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	4413      	add	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	461a      	mov	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	2203      	movs	r2, #3
 80054a8:	4910      	ldr	r1, [pc, #64]	@ (80054ec <uxTaskGetSystemState+0x11c>)
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fb7c 	bl	8005ba8 <prvListTasksWithinSingleList>
 80054b0:	4602      	mov	r2, r0
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	4413      	add	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80054be:	f7fb f85e 	bl	800057e <getRunTimeCounterValue>
 80054c2:	4602      	mov	r2, r0
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80054c8:	f7ff fec8 	bl	800525c <xTaskResumeAll>

		return uxTask;
 80054cc:	697b      	ldr	r3, [r7, #20]
	}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000d48 	.word	0x20000d48
 80054dc:	20000878 	.word	0x20000878
 80054e0:	20000d00 	.word	0x20000d00
 80054e4:	20000d04 	.word	0x20000d04
 80054e8:	20000d1c 	.word	0x20000d1c
 80054ec:	20000d34 	.word	0x20000d34

080054f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054fa:	4b4f      	ldr	r3, [pc, #316]	@ (8005638 <xTaskIncrementTick+0x148>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f040 8090 	bne.w	8005624 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005504:	4b4d      	ldr	r3, [pc, #308]	@ (800563c <xTaskIncrementTick+0x14c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800550c:	4a4b      	ldr	r2, [pc, #300]	@ (800563c <xTaskIncrementTick+0x14c>)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d121      	bne.n	800555c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005518:	4b49      	ldr	r3, [pc, #292]	@ (8005640 <xTaskIncrementTick+0x150>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	603b      	str	r3, [r7, #0]
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	e7fd      	b.n	8005536 <xTaskIncrementTick+0x46>
 800553a:	4b41      	ldr	r3, [pc, #260]	@ (8005640 <xTaskIncrementTick+0x150>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	4b40      	ldr	r3, [pc, #256]	@ (8005644 <xTaskIncrementTick+0x154>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a3e      	ldr	r2, [pc, #248]	@ (8005640 <xTaskIncrementTick+0x150>)
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	4a3e      	ldr	r2, [pc, #248]	@ (8005644 <xTaskIncrementTick+0x154>)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	4b3e      	ldr	r3, [pc, #248]	@ (8005648 <xTaskIncrementTick+0x158>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3301      	adds	r3, #1
 8005554:	4a3c      	ldr	r2, [pc, #240]	@ (8005648 <xTaskIncrementTick+0x158>)
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	f000 fbc4 	bl	8005ce4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800555c:	4b3b      	ldr	r3, [pc, #236]	@ (800564c <xTaskIncrementTick+0x15c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	429a      	cmp	r2, r3
 8005564:	d349      	bcc.n	80055fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005566:	4b36      	ldr	r3, [pc, #216]	@ (8005640 <xTaskIncrementTick+0x150>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005570:	4b36      	ldr	r3, [pc, #216]	@ (800564c <xTaskIncrementTick+0x15c>)
 8005572:	f04f 32ff 	mov.w	r2, #4294967295
 8005576:	601a      	str	r2, [r3, #0]
					break;
 8005578:	e03f      	b.n	80055fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800557a:	4b31      	ldr	r3, [pc, #196]	@ (8005640 <xTaskIncrementTick+0x150>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	429a      	cmp	r2, r3
 8005590:	d203      	bcs.n	800559a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005592:	4a2e      	ldr	r2, [pc, #184]	@ (800564c <xTaskIncrementTick+0x15c>)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005598:	e02f      	b.n	80055fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	3304      	adds	r3, #4
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe fe7a 	bl	8004298 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	3318      	adds	r3, #24
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fe fe71 	bl	8004298 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ba:	4b25      	ldr	r3, [pc, #148]	@ (8005650 <xTaskIncrementTick+0x160>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d903      	bls.n	80055ca <xTaskIncrementTick+0xda>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c6:	4a22      	ldr	r2, [pc, #136]	@ (8005650 <xTaskIncrementTick+0x160>)
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005654 <xTaskIncrementTick+0x164>)
 80055d8:	441a      	add	r2, r3
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	3304      	adds	r3, #4
 80055de:	4619      	mov	r1, r3
 80055e0:	4610      	mov	r0, r2
 80055e2:	f7fe fdfc 	bl	80041de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005658 <xTaskIncrementTick+0x168>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d3b8      	bcc.n	8005566 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80055f4:	2301      	movs	r3, #1
 80055f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055f8:	e7b5      	b.n	8005566 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055fa:	4b17      	ldr	r3, [pc, #92]	@ (8005658 <xTaskIncrementTick+0x168>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005600:	4914      	ldr	r1, [pc, #80]	@ (8005654 <xTaskIncrementTick+0x164>)
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d901      	bls.n	8005616 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005612:	2301      	movs	r3, #1
 8005614:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005616:	4b11      	ldr	r3, [pc, #68]	@ (800565c <xTaskIncrementTick+0x16c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d007      	beq.n	800562e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800561e:	2301      	movs	r3, #1
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e004      	b.n	800562e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005624:	4b0e      	ldr	r3, [pc, #56]	@ (8005660 <xTaskIncrementTick+0x170>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	4a0d      	ldr	r2, [pc, #52]	@ (8005660 <xTaskIncrementTick+0x170>)
 800562c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800562e:	697b      	ldr	r3, [r7, #20]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000d70 	.word	0x20000d70
 800563c:	20000d4c 	.word	0x20000d4c
 8005640:	20000d00 	.word	0x20000d00
 8005644:	20000d04 	.word	0x20000d04
 8005648:	20000d60 	.word	0x20000d60
 800564c:	20000d68 	.word	0x20000d68
 8005650:	20000d50 	.word	0x20000d50
 8005654:	20000878 	.word	0x20000878
 8005658:	20000874 	.word	0x20000874
 800565c:	20000d5c 	.word	0x20000d5c
 8005660:	20000d58 	.word	0x20000d58

08005664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800566a:	4b34      	ldr	r3, [pc, #208]	@ (800573c <vTaskSwitchContext+0xd8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005672:	4b33      	ldr	r3, [pc, #204]	@ (8005740 <vTaskSwitchContext+0xdc>)
 8005674:	2201      	movs	r2, #1
 8005676:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005678:	e05b      	b.n	8005732 <vTaskSwitchContext+0xce>
		xYieldPending = pdFALSE;
 800567a:	4b31      	ldr	r3, [pc, #196]	@ (8005740 <vTaskSwitchContext+0xdc>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005680:	f7fa ff7d 	bl	800057e <getRunTimeCounterValue>
 8005684:	4603      	mov	r3, r0
 8005686:	4a2f      	ldr	r2, [pc, #188]	@ (8005744 <vTaskSwitchContext+0xe0>)
 8005688:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800568a:	4b2e      	ldr	r3, [pc, #184]	@ (8005744 <vTaskSwitchContext+0xe0>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b2e      	ldr	r3, [pc, #184]	@ (8005748 <vTaskSwitchContext+0xe4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d909      	bls.n	80056aa <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005696:	4b2d      	ldr	r3, [pc, #180]	@ (800574c <vTaskSwitchContext+0xe8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800569c:	4a29      	ldr	r2, [pc, #164]	@ (8005744 <vTaskSwitchContext+0xe0>)
 800569e:	6810      	ldr	r0, [r2, #0]
 80056a0:	4a29      	ldr	r2, [pc, #164]	@ (8005748 <vTaskSwitchContext+0xe4>)
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	1a82      	subs	r2, r0, r2
 80056a6:	440a      	add	r2, r1
 80056a8:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80056aa:	4b26      	ldr	r3, [pc, #152]	@ (8005744 <vTaskSwitchContext+0xe0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a26      	ldr	r2, [pc, #152]	@ (8005748 <vTaskSwitchContext+0xe4>)
 80056b0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b2:	4b27      	ldr	r3, [pc, #156]	@ (8005750 <vTaskSwitchContext+0xec>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	e011      	b.n	80056de <vTaskSwitchContext+0x7a>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10b      	bne.n	80056d8 <vTaskSwitchContext+0x74>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	607b      	str	r3, [r7, #4]
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	e7fd      	b.n	80056d4 <vTaskSwitchContext+0x70>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3b01      	subs	r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	491d      	ldr	r1, [pc, #116]	@ (8005754 <vTaskSwitchContext+0xf0>)
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	440b      	add	r3, r1
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0e3      	beq.n	80056ba <vTaskSwitchContext+0x56>
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4a15      	ldr	r2, [pc, #84]	@ (8005754 <vTaskSwitchContext+0xf0>)
 80056fe:	4413      	add	r3, r2
 8005700:	60bb      	str	r3, [r7, #8]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	605a      	str	r2, [r3, #4]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	3308      	adds	r3, #8
 8005714:	429a      	cmp	r2, r3
 8005716:	d104      	bne.n	8005722 <vTaskSwitchContext+0xbe>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	605a      	str	r2, [r3, #4]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	4a08      	ldr	r2, [pc, #32]	@ (800574c <vTaskSwitchContext+0xe8>)
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	4a08      	ldr	r2, [pc, #32]	@ (8005750 <vTaskSwitchContext+0xec>)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6013      	str	r3, [r2, #0]
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000d70 	.word	0x20000d70
 8005740:	20000d5c 	.word	0x20000d5c
 8005744:	20000d78 	.word	0x20000d78
 8005748:	20000d74 	.word	0x20000d74
 800574c:	20000874 	.word	0x20000874
 8005750:	20000d50 	.word	0x20000d50
 8005754:	20000878 	.word	0x20000878

08005758 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10b      	bne.n	8005780 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	60fb      	str	r3, [r7, #12]
}
 800577a:	bf00      	nop
 800577c:	bf00      	nop
 800577e:	e7fd      	b.n	800577c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005780:	4b07      	ldr	r3, [pc, #28]	@ (80057a0 <vTaskPlaceOnEventList+0x48>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3318      	adds	r3, #24
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7fe fd4c 	bl	8004226 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800578e:	2101      	movs	r1, #1
 8005790:	6838      	ldr	r0, [r7, #0]
 8005792:	f000 fb55 	bl	8005e40 <prvAddCurrentTaskToDelayedList>
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20000874 	.word	0x20000874

080057a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10b      	bne.n	80057ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	617b      	str	r3, [r7, #20]
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	e7fd      	b.n	80057ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057ce:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3318      	adds	r3, #24
 80057d4:	4619      	mov	r1, r3
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f7fe fd01 	bl	80041de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295
 80057e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	68b8      	ldr	r0, [r7, #8]
 80057ec:	f000 fb28 	bl	8005e40 <prvAddCurrentTaskToDelayedList>
	}
 80057f0:	bf00      	nop
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000874 	.word	0x20000874

080057fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10b      	bne.n	800582a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	60fb      	str	r3, [r7, #12]
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop
 8005828:	e7fd      	b.n	8005826 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	3318      	adds	r3, #24
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fd32 	bl	8004298 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005834:	4b1d      	ldr	r3, [pc, #116]	@ (80058ac <xTaskRemoveFromEventList+0xb0>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d11d      	bne.n	8005878 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	3304      	adds	r3, #4
 8005840:	4618      	mov	r0, r3
 8005842:	f7fe fd29 	bl	8004298 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800584a:	4b19      	ldr	r3, [pc, #100]	@ (80058b0 <xTaskRemoveFromEventList+0xb4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d903      	bls.n	800585a <xTaskRemoveFromEventList+0x5e>
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005856:	4a16      	ldr	r2, [pc, #88]	@ (80058b0 <xTaskRemoveFromEventList+0xb4>)
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4a13      	ldr	r2, [pc, #76]	@ (80058b4 <xTaskRemoveFromEventList+0xb8>)
 8005868:	441a      	add	r2, r3
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	3304      	adds	r3, #4
 800586e:	4619      	mov	r1, r3
 8005870:	4610      	mov	r0, r2
 8005872:	f7fe fcb4 	bl	80041de <vListInsertEnd>
 8005876:	e005      	b.n	8005884 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	3318      	adds	r3, #24
 800587c:	4619      	mov	r1, r3
 800587e:	480e      	ldr	r0, [pc, #56]	@ (80058b8 <xTaskRemoveFromEventList+0xbc>)
 8005880:	f7fe fcad 	bl	80041de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005888:	4b0c      	ldr	r3, [pc, #48]	@ (80058bc <xTaskRemoveFromEventList+0xc0>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588e:	429a      	cmp	r2, r3
 8005890:	d905      	bls.n	800589e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005892:	2301      	movs	r3, #1
 8005894:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005896:	4b0a      	ldr	r3, [pc, #40]	@ (80058c0 <xTaskRemoveFromEventList+0xc4>)
 8005898:	2201      	movs	r2, #1
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	e001      	b.n	80058a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80058a2:	697b      	ldr	r3, [r7, #20]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20000d70 	.word	0x20000d70
 80058b0:	20000d50 	.word	0x20000d50
 80058b4:	20000878 	.word	0x20000878
 80058b8:	20000d08 	.word	0x20000d08
 80058bc:	20000874 	.word	0x20000874
 80058c0:	20000d5c 	.word	0x20000d5c

080058c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058cc:	4b06      	ldr	r3, [pc, #24]	@ (80058e8 <vTaskInternalSetTimeOutState+0x24>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058d4:	4b05      	ldr	r3, [pc, #20]	@ (80058ec <vTaskInternalSetTimeOutState+0x28>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	605a      	str	r2, [r3, #4]
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	20000d60 	.word	0x20000d60
 80058ec:	20000d4c 	.word	0x20000d4c

080058f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10b      	bne.n	8005918 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	613b      	str	r3, [r7, #16]
}
 8005912:	bf00      	nop
 8005914:	bf00      	nop
 8005916:	e7fd      	b.n	8005914 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10b      	bne.n	8005936 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	60fb      	str	r3, [r7, #12]
}
 8005930:	bf00      	nop
 8005932:	bf00      	nop
 8005934:	e7fd      	b.n	8005932 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005936:	f000 ff5f 	bl	80067f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800593a:	4b1d      	ldr	r3, [pc, #116]	@ (80059b0 <xTaskCheckForTimeOut+0xc0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d102      	bne.n	800595a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
 8005958:	e023      	b.n	80059a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	4b15      	ldr	r3, [pc, #84]	@ (80059b4 <xTaskCheckForTimeOut+0xc4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d007      	beq.n	8005976 <xTaskCheckForTimeOut+0x86>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	429a      	cmp	r2, r3
 800596e:	d302      	bcc.n	8005976 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005970:	2301      	movs	r3, #1
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	e015      	b.n	80059a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	429a      	cmp	r2, r3
 800597e:	d20b      	bcs.n	8005998 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	1ad2      	subs	r2, r2, r3
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff ff99 	bl	80058c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005992:	2300      	movs	r3, #0
 8005994:	61fb      	str	r3, [r7, #28]
 8005996:	e004      	b.n	80059a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800599e:	2301      	movs	r3, #1
 80059a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059a2:	f000 ff5b 	bl	800685c <vPortExitCritical>

	return xReturn;
 80059a6:	69fb      	ldr	r3, [r7, #28]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3720      	adds	r7, #32
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20000d4c 	.word	0x20000d4c
 80059b4:	20000d60 	.word	0x20000d60

080059b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059bc:	4b03      	ldr	r3, [pc, #12]	@ (80059cc <vTaskMissedYield+0x14>)
 80059be:	2201      	movs	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
}
 80059c2:	bf00      	nop
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	20000d5c 	.word	0x20000d5c

080059d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059d8:	f000 f852 	bl	8005a80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059dc:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <prvIdleTask+0x28>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d9f9      	bls.n	80059d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059e4:	4b05      	ldr	r3, [pc, #20]	@ (80059fc <prvIdleTask+0x2c>)
 80059e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059f4:	e7f0      	b.n	80059d8 <prvIdleTask+0x8>
 80059f6:	bf00      	nop
 80059f8:	20000878 	.word	0x20000878
 80059fc:	e000ed04 	.word	0xe000ed04

08005a00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a06:	2300      	movs	r3, #0
 8005a08:	607b      	str	r3, [r7, #4]
 8005a0a:	e00c      	b.n	8005a26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4a12      	ldr	r2, [pc, #72]	@ (8005a60 <prvInitialiseTaskLists+0x60>)
 8005a18:	4413      	add	r3, r2
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fe fbb2 	bl	8004184 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3301      	adds	r3, #1
 8005a24:	607b      	str	r3, [r7, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b37      	cmp	r3, #55	@ 0x37
 8005a2a:	d9ef      	bls.n	8005a0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a2c:	480d      	ldr	r0, [pc, #52]	@ (8005a64 <prvInitialiseTaskLists+0x64>)
 8005a2e:	f7fe fba9 	bl	8004184 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a32:	480d      	ldr	r0, [pc, #52]	@ (8005a68 <prvInitialiseTaskLists+0x68>)
 8005a34:	f7fe fba6 	bl	8004184 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a38:	480c      	ldr	r0, [pc, #48]	@ (8005a6c <prvInitialiseTaskLists+0x6c>)
 8005a3a:	f7fe fba3 	bl	8004184 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a3e:	480c      	ldr	r0, [pc, #48]	@ (8005a70 <prvInitialiseTaskLists+0x70>)
 8005a40:	f7fe fba0 	bl	8004184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a44:	480b      	ldr	r0, [pc, #44]	@ (8005a74 <prvInitialiseTaskLists+0x74>)
 8005a46:	f7fe fb9d 	bl	8004184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a78 <prvInitialiseTaskLists+0x78>)
 8005a4c:	4a05      	ldr	r2, [pc, #20]	@ (8005a64 <prvInitialiseTaskLists+0x64>)
 8005a4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a50:	4b0a      	ldr	r3, [pc, #40]	@ (8005a7c <prvInitialiseTaskLists+0x7c>)
 8005a52:	4a05      	ldr	r2, [pc, #20]	@ (8005a68 <prvInitialiseTaskLists+0x68>)
 8005a54:	601a      	str	r2, [r3, #0]
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000878 	.word	0x20000878
 8005a64:	20000cd8 	.word	0x20000cd8
 8005a68:	20000cec 	.word	0x20000cec
 8005a6c:	20000d08 	.word	0x20000d08
 8005a70:	20000d1c 	.word	0x20000d1c
 8005a74:	20000d34 	.word	0x20000d34
 8005a78:	20000d00 	.word	0x20000d00
 8005a7c:	20000d04 	.word	0x20000d04

08005a80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a86:	e019      	b.n	8005abc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a88:	f000 feb6 	bl	80067f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a8c:	4b10      	ldr	r3, [pc, #64]	@ (8005ad0 <prvCheckTasksWaitingTermination+0x50>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fe fbfd 	bl	8004298 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad4 <prvCheckTasksWaitingTermination+0x54>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8005ad4 <prvCheckTasksWaitingTermination+0x54>)
 8005aa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad8 <prvCheckTasksWaitingTermination+0x58>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	4a0a      	ldr	r2, [pc, #40]	@ (8005ad8 <prvCheckTasksWaitingTermination+0x58>)
 8005ab0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ab2:	f000 fed3 	bl	800685c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8e4 	bl	8005c84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005abc:	4b06      	ldr	r3, [pc, #24]	@ (8005ad8 <prvCheckTasksWaitingTermination+0x58>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e1      	bne.n	8005a88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000d1c 	.word	0x20000d1c
 8005ad4:	20000d48 	.word	0x20000d48
 8005ad8:	20000d30 	.word	0x20000d30

08005adc <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <vTaskGetInfo+0x1a>
 8005af0:	4b2c      	ldr	r3, [pc, #176]	@ (8005ba4 <vTaskGetInfo+0xc8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	e000      	b.n	8005af8 <vTaskGetInfo+0x1c>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	2b05      	cmp	r3, #5
 8005b36:	d01a      	beq.n	8005b6e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8005b38:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba4 <vTaskGetInfo+0xc8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d103      	bne.n	8005b4a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2200      	movs	r2, #0
 8005b46:	731a      	strb	r2, [r3, #12]
 8005b48:	e018      	b.n	8005b7c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	78fa      	ldrb	r2, [r7, #3]
 8005b4e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d112      	bne.n	8005b7c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8005b56:	f7ff fb73 	bl	8005240 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2202      	movs	r2, #2
 8005b66:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8005b68:	f7ff fb78 	bl	800525c <xTaskResumeAll>
 8005b6c:	e006      	b.n	8005b7c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8005b6e:	6978      	ldr	r0, [r7, #20]
 8005b70:	f7ff fa94 	bl	800509c <eTaskGetState>
 8005b74:	4603      	mov	r3, r0
 8005b76:	461a      	mov	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 f860 	bl	8005c4c <prvTaskCheckFreeStackSpace>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	461a      	mov	r2, r3
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8005b94:	e002      	b.n	8005b9c <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	841a      	strh	r2, [r3, #32]
	}
 8005b9c:	bf00      	nop
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20000874 	.word	0x20000874

08005ba8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08a      	sub	sp, #40	@ 0x28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d03f      	beq.n	8005c42 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	623b      	str	r3, [r7, #32]
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	605a      	str	r2, [r3, #4]
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d104      	bne.n	8005be6 <prvListTasksWithinSingleList+0x3e>
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	3308      	adds	r3, #8
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d104      	bne.n	8005c12 <prvListTasksWithinSingleList+0x6a>
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8005c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	461a      	mov	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1899      	adds	r1, r3, r2
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	6978      	ldr	r0, [r7, #20]
 8005c30:	f7ff ff54 	bl	8005adc <vTaskGetInfo>
				uxTask++;
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	3301      	adds	r3, #1
 8005c38:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d1d5      	bne.n	8005bee <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3728      	adds	r7, #40	@ 0x28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005c58:	e005      	b.n	8005c66 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2ba5      	cmp	r3, #165	@ 0xa5
 8005c6c:	d0f5      	beq.n	8005c5a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	089b      	lsrs	r3, r3, #2
 8005c72:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	b29b      	uxth	r3, r3
	}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d108      	bne.n	8005ca8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 ff9c 	bl	8006bd8 <vPortFree>
				vPortFree( pxTCB );
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 ff99 	bl	8006bd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ca6:	e019      	b.n	8005cdc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d103      	bne.n	8005cba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 ff90 	bl	8006bd8 <vPortFree>
	}
 8005cb8:	e010      	b.n	8005cdc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d00b      	beq.n	8005cdc <prvDeleteTCB+0x58>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	60fb      	str	r3, [r7, #12]
}
 8005cd6:	bf00      	nop
 8005cd8:	bf00      	nop
 8005cda:	e7fd      	b.n	8005cd8 <prvDeleteTCB+0x54>
	}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cea:	4b0c      	ldr	r3, [pc, #48]	@ (8005d1c <prvResetNextTaskUnblockTime+0x38>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d104      	bne.n	8005cfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8005d20 <prvResetNextTaskUnblockTime+0x3c>)
 8005cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cfc:	e008      	b.n	8005d10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cfe:	4b07      	ldr	r3, [pc, #28]	@ (8005d1c <prvResetNextTaskUnblockTime+0x38>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	4a04      	ldr	r2, [pc, #16]	@ (8005d20 <prvResetNextTaskUnblockTime+0x3c>)
 8005d0e:	6013      	str	r3, [r2, #0]
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	20000d00 	.word	0x20000d00
 8005d20:	20000d68 	.word	0x20000d68

08005d24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d58 <xTaskGetSchedulerState+0x34>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d32:	2301      	movs	r3, #1
 8005d34:	607b      	str	r3, [r7, #4]
 8005d36:	e008      	b.n	8005d4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d38:	4b08      	ldr	r3, [pc, #32]	@ (8005d5c <xTaskGetSchedulerState+0x38>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d102      	bne.n	8005d46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d40:	2302      	movs	r3, #2
 8005d42:	607b      	str	r3, [r7, #4]
 8005d44:	e001      	b.n	8005d4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d4a:	687b      	ldr	r3, [r7, #4]
	}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	20000d54 	.word	0x20000d54
 8005d5c:	20000d70 	.word	0x20000d70

08005d60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d058      	beq.n	8005e28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d76:	4b2f      	ldr	r3, [pc, #188]	@ (8005e34 <xTaskPriorityDisinherit+0xd4>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d00b      	beq.n	8005d98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	60fb      	str	r3, [r7, #12]
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	e7fd      	b.n	8005d94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10b      	bne.n	8005db8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	60bb      	str	r3, [r7, #8]
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dbc:	1e5a      	subs	r2, r3, #1
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d02c      	beq.n	8005e28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d128      	bne.n	8005e28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe fa5c 	bl	8004298 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e38 <xTaskPriorityDisinherit+0xd8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d903      	bls.n	8005e08 <xTaskPriorityDisinherit+0xa8>
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e04:	4a0c      	ldr	r2, [pc, #48]	@ (8005e38 <xTaskPriorityDisinherit+0xd8>)
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4a09      	ldr	r2, [pc, #36]	@ (8005e3c <xTaskPriorityDisinherit+0xdc>)
 8005e16:	441a      	add	r2, r3
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	f7fe f9dd 	bl	80041de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e24:	2301      	movs	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e28:	697b      	ldr	r3, [r7, #20]
	}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000874 	.word	0x20000874
 8005e38:	20000d50 	.word	0x20000d50
 8005e3c:	20000878 	.word	0x20000878

08005e40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e4a:	4b21      	ldr	r3, [pc, #132]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e50:	4b20      	ldr	r3, [pc, #128]	@ (8005ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3304      	adds	r3, #4
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fe fa1e 	bl	8004298 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d10a      	bne.n	8005e7a <prvAddCurrentTaskToDelayedList+0x3a>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d007      	beq.n	8005e7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4619      	mov	r1, r3
 8005e72:	4819      	ldr	r0, [pc, #100]	@ (8005ed8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e74:	f7fe f9b3 	bl	80041de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e78:	e026      	b.n	8005ec8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4413      	add	r3, r2
 8005e80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e82:	4b14      	ldr	r3, [pc, #80]	@ (8005ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d209      	bcs.n	8005ea6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e92:	4b12      	ldr	r3, [pc, #72]	@ (8005edc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f7fe f9c1 	bl	8004226 <vListInsert>
}
 8005ea4:	e010      	b.n	8005ec8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	f7fe f9b7 	bl	8004226 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d202      	bcs.n	8005ec8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ec2:	4a08      	ldr	r2, [pc, #32]	@ (8005ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	6013      	str	r3, [r2, #0]
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000d4c 	.word	0x20000d4c
 8005ed4:	20000874 	.word	0x20000874
 8005ed8:	20000d34 	.word	0x20000d34
 8005edc:	20000d04 	.word	0x20000d04
 8005ee0:	20000d00 	.word	0x20000d00
 8005ee4:	20000d68 	.word	0x20000d68

08005ee8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	@ 0x28
 8005eec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ef2:	f000 fb13 	bl	800651c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8005f6c <xTimerCreateTimerTask+0x84>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d021      	beq.n	8005f42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f06:	1d3a      	adds	r2, r7, #4
 8005f08:	f107 0108 	add.w	r1, r7, #8
 8005f0c:	f107 030c 	add.w	r3, r7, #12
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fe f91d 	bl	8004150 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	9202      	str	r2, [sp, #8]
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	2302      	movs	r3, #2
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	2300      	movs	r3, #0
 8005f26:	460a      	mov	r2, r1
 8005f28:	4911      	ldr	r1, [pc, #68]	@ (8005f70 <xTimerCreateTimerTask+0x88>)
 8005f2a:	4812      	ldr	r0, [pc, #72]	@ (8005f74 <xTimerCreateTimerTask+0x8c>)
 8005f2c:	f7fe fed8 	bl	8004ce0 <xTaskCreateStatic>
 8005f30:	4603      	mov	r3, r0
 8005f32:	4a11      	ldr	r2, [pc, #68]	@ (8005f78 <xTimerCreateTimerTask+0x90>)
 8005f34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f36:	4b10      	ldr	r3, [pc, #64]	@ (8005f78 <xTimerCreateTimerTask+0x90>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	613b      	str	r3, [r7, #16]
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f60:	697b      	ldr	r3, [r7, #20]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000dac 	.word	0x20000dac
 8005f70:	08007ea4 	.word	0x08007ea4
 8005f74:	080060b5 	.word	0x080060b5
 8005f78:	20000db0 	.word	0x20000db0

08005f7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08a      	sub	sp, #40	@ 0x28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10b      	bne.n	8005fac <xTimerGenericCommand+0x30>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	623b      	str	r3, [r7, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	bf00      	nop
 8005faa:	e7fd      	b.n	8005fa8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fac:	4b19      	ldr	r3, [pc, #100]	@ (8006014 <xTimerGenericCommand+0x98>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d02a      	beq.n	800600a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b05      	cmp	r3, #5
 8005fc4:	dc18      	bgt.n	8005ff8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005fc6:	f7ff fead 	bl	8005d24 <xTaskGetSchedulerState>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d109      	bne.n	8005fe4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005fd0:	4b10      	ldr	r3, [pc, #64]	@ (8006014 <xTimerGenericCommand+0x98>)
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	f107 0110 	add.w	r1, r7, #16
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fdc:	f7fe fa90 	bl	8004500 <xQueueGenericSend>
 8005fe0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fe2:	e012      	b.n	800600a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8006014 <xTimerGenericCommand+0x98>)
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	f107 0110 	add.w	r1, r7, #16
 8005fec:	2300      	movs	r3, #0
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f7fe fa86 	bl	8004500 <xQueueGenericSend>
 8005ff4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ff6:	e008      	b.n	800600a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ff8:	4b06      	ldr	r3, [pc, #24]	@ (8006014 <xTimerGenericCommand+0x98>)
 8005ffa:	6818      	ldr	r0, [r3, #0]
 8005ffc:	f107 0110 	add.w	r1, r7, #16
 8006000:	2300      	movs	r3, #0
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	f7fe fb7e 	bl	8004704 <xQueueGenericSendFromISR>
 8006008:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800600c:	4618      	mov	r0, r3
 800600e:	3728      	adds	r7, #40	@ 0x28
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000dac 	.word	0x20000dac

08006018 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af02      	add	r7, sp, #8
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006022:	4b23      	ldr	r3, [pc, #140]	@ (80060b0 <prvProcessExpiredTimer+0x98>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	3304      	adds	r3, #4
 8006030:	4618      	mov	r0, r3
 8006032:	f7fe f931 	bl	8004298 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d023      	beq.n	800608c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	699a      	ldr	r2, [r3, #24]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	18d1      	adds	r1, r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	6978      	ldr	r0, [r7, #20]
 8006052:	f000 f8d5 	bl	8006200 <prvInsertTimerInActiveList>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d020      	beq.n	800609e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800605c:	2300      	movs	r3, #0
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2300      	movs	r3, #0
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	2100      	movs	r1, #0
 8006066:	6978      	ldr	r0, [r7, #20]
 8006068:	f7ff ff88 	bl	8005f7c <xTimerGenericCommand>
 800606c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d114      	bne.n	800609e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	60fb      	str	r3, [r7, #12]
}
 8006086:	bf00      	nop
 8006088:	bf00      	nop
 800608a:	e7fd      	b.n	8006088 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	b2da      	uxtb	r2, r3
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	6978      	ldr	r0, [r7, #20]
 80060a4:	4798      	blx	r3
}
 80060a6:	bf00      	nop
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	20000da4 	.word	0x20000da4

080060b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060bc:	f107 0308 	add.w	r3, r7, #8
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 f859 	bl	8006178 <prvGetNextExpireTime>
 80060c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4619      	mov	r1, r3
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 f805 	bl	80060dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060d2:	f000 f8d7 	bl	8006284 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060d6:	bf00      	nop
 80060d8:	e7f0      	b.n	80060bc <prvTimerTask+0x8>
	...

080060dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060e6:	f7ff f8ab 	bl	8005240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060ea:	f107 0308 	add.w	r3, r7, #8
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 f866 	bl	80061c0 <prvSampleTimeNow>
 80060f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d130      	bne.n	800615e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <prvProcessTimerOrBlockTask+0x3c>
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	429a      	cmp	r2, r3
 8006108:	d806      	bhi.n	8006118 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800610a:	f7ff f8a7 	bl	800525c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800610e:	68f9      	ldr	r1, [r7, #12]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff ff81 	bl	8006018 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006116:	e024      	b.n	8006162 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d008      	beq.n	8006130 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800611e:	4b13      	ldr	r3, [pc, #76]	@ (800616c <prvProcessTimerOrBlockTask+0x90>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <prvProcessTimerOrBlockTask+0x50>
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <prvProcessTimerOrBlockTask+0x52>
 800612c:	2300      	movs	r3, #0
 800612e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006130:	4b0f      	ldr	r3, [pc, #60]	@ (8006170 <prvProcessTimerOrBlockTask+0x94>)
 8006132:	6818      	ldr	r0, [r3, #0]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	4619      	mov	r1, r3
 800613e:	f7fe fd9b 	bl	8004c78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006142:	f7ff f88b 	bl	800525c <xTaskResumeAll>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800614c:	4b09      	ldr	r3, [pc, #36]	@ (8006174 <prvProcessTimerOrBlockTask+0x98>)
 800614e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	f3bf 8f6f 	isb	sy
}
 800615c:	e001      	b.n	8006162 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800615e:	f7ff f87d 	bl	800525c <xTaskResumeAll>
}
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000da8 	.word	0x20000da8
 8006170:	20000dac 	.word	0x20000dac
 8006174:	e000ed04 	.word	0xe000ed04

08006178 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006180:	4b0e      	ldr	r3, [pc, #56]	@ (80061bc <prvGetNextExpireTime+0x44>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <prvGetNextExpireTime+0x16>
 800618a:	2201      	movs	r2, #1
 800618c:	e000      	b.n	8006190 <prvGetNextExpireTime+0x18>
 800618e:	2200      	movs	r2, #0
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d105      	bne.n	80061a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800619c:	4b07      	ldr	r3, [pc, #28]	@ (80061bc <prvGetNextExpireTime+0x44>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	e001      	b.n	80061ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061ac:	68fb      	ldr	r3, [r7, #12]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	20000da4 	.word	0x20000da4

080061c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061c8:	f7ff f8e6 	bl	8005398 <xTaskGetTickCount>
 80061cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061ce:	4b0b      	ldr	r3, [pc, #44]	@ (80061fc <prvSampleTimeNow+0x3c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d205      	bcs.n	80061e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061d8:	f000 f93a 	bl	8006450 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	e002      	b.n	80061ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061ea:	4a04      	ldr	r2, [pc, #16]	@ (80061fc <prvSampleTimeNow+0x3c>)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061f0:	68fb      	ldr	r3, [r7, #12]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000db4 	.word	0x20000db4

08006200 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	429a      	cmp	r2, r3
 8006224:	d812      	bhi.n	800624c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	1ad2      	subs	r2, r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	429a      	cmp	r2, r3
 8006232:	d302      	bcc.n	800623a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006234:	2301      	movs	r3, #1
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	e01b      	b.n	8006272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800623a:	4b10      	ldr	r3, [pc, #64]	@ (800627c <prvInsertTimerInActiveList+0x7c>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3304      	adds	r3, #4
 8006242:	4619      	mov	r1, r3
 8006244:	4610      	mov	r0, r2
 8006246:	f7fd ffee 	bl	8004226 <vListInsert>
 800624a:	e012      	b.n	8006272 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d206      	bcs.n	8006262 <prvInsertTimerInActiveList+0x62>
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d302      	bcc.n	8006262 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800625c:	2301      	movs	r3, #1
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	e007      	b.n	8006272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006262:	4b07      	ldr	r3, [pc, #28]	@ (8006280 <prvInsertTimerInActiveList+0x80>)
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3304      	adds	r3, #4
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f7fd ffda 	bl	8004226 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006272:	697b      	ldr	r3, [r7, #20]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	20000da8 	.word	0x20000da8
 8006280:	20000da4 	.word	0x20000da4

08006284 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08e      	sub	sp, #56	@ 0x38
 8006288:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800628a:	e0ce      	b.n	800642a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	da19      	bge.n	80062c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006292:	1d3b      	adds	r3, r7, #4
 8006294:	3304      	adds	r3, #4
 8006296:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	61fb      	str	r3, [r7, #28]
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	e7fd      	b.n	80062b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062bc:	6850      	ldr	r0, [r2, #4]
 80062be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062c0:	6892      	ldr	r2, [r2, #8]
 80062c2:	4611      	mov	r1, r2
 80062c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f2c0 80ae 	blt.w	800642a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d004      	beq.n	80062e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062dc:	3304      	adds	r3, #4
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fd ffda 	bl	8004298 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062e4:	463b      	mov	r3, r7
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff ff6a 	bl	80061c0 <prvSampleTimeNow>
 80062ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b09      	cmp	r3, #9
 80062f2:	f200 8097 	bhi.w	8006424 <prvProcessReceivedCommands+0x1a0>
 80062f6:	a201      	add	r2, pc, #4	@ (adr r2, 80062fc <prvProcessReceivedCommands+0x78>)
 80062f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fc:	08006325 	.word	0x08006325
 8006300:	08006325 	.word	0x08006325
 8006304:	08006325 	.word	0x08006325
 8006308:	0800639b 	.word	0x0800639b
 800630c:	080063af 	.word	0x080063af
 8006310:	080063fb 	.word	0x080063fb
 8006314:	08006325 	.word	0x08006325
 8006318:	08006325 	.word	0x08006325
 800631c:	0800639b 	.word	0x0800639b
 8006320:	080063af 	.word	0x080063af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006326:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800632a:	f043 0301 	orr.w	r3, r3, #1
 800632e:	b2da      	uxtb	r2, r3
 8006330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006332:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	18d1      	adds	r1, r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006344:	f7ff ff5c 	bl	8006200 <prvInsertTimerInActiveList>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d06c      	beq.n	8006428 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800634e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006354:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d061      	beq.n	8006428 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	441a      	add	r2, r3
 800636c:	2300      	movs	r3, #0
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	2300      	movs	r3, #0
 8006372:	2100      	movs	r1, #0
 8006374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006376:	f7ff fe01 	bl	8005f7c <xTimerGenericCommand>
 800637a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d152      	bne.n	8006428 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	61bb      	str	r3, [r7, #24]
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	e7fd      	b.n	8006396 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800639a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063ac:	e03d      	b.n	800642a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063b4:	f043 0301 	orr.w	r3, r3, #1
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	617b      	str	r3, [r7, #20]
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	e7fd      	b.n	80063e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	18d1      	adds	r1, r2, r3
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063f4:	f7ff ff04 	bl	8006200 <prvInsertTimerInActiveList>
					break;
 80063f8:	e017      	b.n	800642a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80063fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006408:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800640a:	f000 fbe5 	bl	8006bd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800640e:	e00c      	b.n	800642a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006412:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006422:	e002      	b.n	800642a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006424:	bf00      	nop
 8006426:	e000      	b.n	800642a <prvProcessReceivedCommands+0x1a6>
					break;
 8006428:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800642a:	4b08      	ldr	r3, [pc, #32]	@ (800644c <prvProcessReceivedCommands+0x1c8>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	1d39      	adds	r1, r7, #4
 8006430:	2200      	movs	r2, #0
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fa04 	bl	8004840 <xQueueReceive>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	f47f af26 	bne.w	800628c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	3730      	adds	r7, #48	@ 0x30
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000dac 	.word	0x20000dac

08006450 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006456:	e049      	b.n	80064ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006458:	4b2e      	ldr	r3, [pc, #184]	@ (8006514 <prvSwitchTimerLists+0xc4>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006462:	4b2c      	ldr	r3, [pc, #176]	@ (8006514 <prvSwitchTimerLists+0xc4>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3304      	adds	r3, #4
 8006470:	4618      	mov	r0, r3
 8006472:	f7fd ff11 	bl	8004298 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d02f      	beq.n	80064ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4413      	add	r3, r2
 8006494:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	429a      	cmp	r2, r3
 800649c:	d90e      	bls.n	80064bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006514 <prvSwitchTimerLists+0xc4>)
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3304      	adds	r3, #4
 80064b2:	4619      	mov	r1, r3
 80064b4:	4610      	mov	r0, r2
 80064b6:	f7fd feb6 	bl	8004226 <vListInsert>
 80064ba:	e017      	b.n	80064ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064bc:	2300      	movs	r3, #0
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2300      	movs	r3, #0
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	2100      	movs	r1, #0
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f7ff fd58 	bl	8005f7c <xTimerGenericCommand>
 80064cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10b      	bne.n	80064ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	603b      	str	r3, [r7, #0]
}
 80064e6:	bf00      	nop
 80064e8:	bf00      	nop
 80064ea:	e7fd      	b.n	80064e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064ec:	4b09      	ldr	r3, [pc, #36]	@ (8006514 <prvSwitchTimerLists+0xc4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1b0      	bne.n	8006458 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064f6:	4b07      	ldr	r3, [pc, #28]	@ (8006514 <prvSwitchTimerLists+0xc4>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064fc:	4b06      	ldr	r3, [pc, #24]	@ (8006518 <prvSwitchTimerLists+0xc8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a04      	ldr	r2, [pc, #16]	@ (8006514 <prvSwitchTimerLists+0xc4>)
 8006502:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006504:	4a04      	ldr	r2, [pc, #16]	@ (8006518 <prvSwitchTimerLists+0xc8>)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	6013      	str	r3, [r2, #0]
}
 800650a:	bf00      	nop
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000da4 	.word	0x20000da4
 8006518:	20000da8 	.word	0x20000da8

0800651c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006522:	f000 f969 	bl	80067f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006526:	4b15      	ldr	r3, [pc, #84]	@ (800657c <prvCheckForValidListAndQueue+0x60>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d120      	bne.n	8006570 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800652e:	4814      	ldr	r0, [pc, #80]	@ (8006580 <prvCheckForValidListAndQueue+0x64>)
 8006530:	f7fd fe28 	bl	8004184 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006534:	4813      	ldr	r0, [pc, #76]	@ (8006584 <prvCheckForValidListAndQueue+0x68>)
 8006536:	f7fd fe25 	bl	8004184 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800653a:	4b13      	ldr	r3, [pc, #76]	@ (8006588 <prvCheckForValidListAndQueue+0x6c>)
 800653c:	4a10      	ldr	r2, [pc, #64]	@ (8006580 <prvCheckForValidListAndQueue+0x64>)
 800653e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006540:	4b12      	ldr	r3, [pc, #72]	@ (800658c <prvCheckForValidListAndQueue+0x70>)
 8006542:	4a10      	ldr	r2, [pc, #64]	@ (8006584 <prvCheckForValidListAndQueue+0x68>)
 8006544:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006546:	2300      	movs	r3, #0
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	4b11      	ldr	r3, [pc, #68]	@ (8006590 <prvCheckForValidListAndQueue+0x74>)
 800654c:	4a11      	ldr	r2, [pc, #68]	@ (8006594 <prvCheckForValidListAndQueue+0x78>)
 800654e:	2110      	movs	r1, #16
 8006550:	200a      	movs	r0, #10
 8006552:	f7fd ff35 	bl	80043c0 <xQueueGenericCreateStatic>
 8006556:	4603      	mov	r3, r0
 8006558:	4a08      	ldr	r2, [pc, #32]	@ (800657c <prvCheckForValidListAndQueue+0x60>)
 800655a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800655c:	4b07      	ldr	r3, [pc, #28]	@ (800657c <prvCheckForValidListAndQueue+0x60>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006564:	4b05      	ldr	r3, [pc, #20]	@ (800657c <prvCheckForValidListAndQueue+0x60>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	490b      	ldr	r1, [pc, #44]	@ (8006598 <prvCheckForValidListAndQueue+0x7c>)
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe fb5a 	bl	8004c24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006570:	f000 f974 	bl	800685c <vPortExitCritical>
}
 8006574:	bf00      	nop
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	20000dac 	.word	0x20000dac
 8006580:	20000d7c 	.word	0x20000d7c
 8006584:	20000d90 	.word	0x20000d90
 8006588:	20000da4 	.word	0x20000da4
 800658c:	20000da8 	.word	0x20000da8
 8006590:	20000e58 	.word	0x20000e58
 8006594:	20000db8 	.word	0x20000db8
 8006598:	08007eac 	.word	0x08007eac

0800659c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3b04      	subs	r3, #4
 80065ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3b04      	subs	r3, #4
 80065ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f023 0201 	bic.w	r2, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3b04      	subs	r3, #4
 80065ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065cc:	4a0c      	ldr	r2, [pc, #48]	@ (8006600 <pxPortInitialiseStack+0x64>)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3b14      	subs	r3, #20
 80065d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3b04      	subs	r3, #4
 80065e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f06f 0202 	mvn.w	r2, #2
 80065ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3b20      	subs	r3, #32
 80065f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065f2:	68fb      	ldr	r3, [r7, #12]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	08006605 	.word	0x08006605

08006604 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800660e:	4b13      	ldr	r3, [pc, #76]	@ (800665c <prvTaskExitError+0x58>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006616:	d00b      	beq.n	8006630 <prvTaskExitError+0x2c>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	60fb      	str	r3, [r7, #12]
}
 800662a:	bf00      	nop
 800662c:	bf00      	nop
 800662e:	e7fd      	b.n	800662c <prvTaskExitError+0x28>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60bb      	str	r3, [r7, #8]
}
 8006642:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006644:	bf00      	nop
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0fc      	beq.n	8006646 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	2000000c 	.word	0x2000000c

08006660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006660:	4b07      	ldr	r3, [pc, #28]	@ (8006680 <pxCurrentTCBConst2>)
 8006662:	6819      	ldr	r1, [r3, #0]
 8006664:	6808      	ldr	r0, [r1, #0]
 8006666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666a:	f380 8809 	msr	PSP, r0
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f380 8811 	msr	BASEPRI, r0
 800667a:	4770      	bx	lr
 800667c:	f3af 8000 	nop.w

08006680 <pxCurrentTCBConst2>:
 8006680:	20000874 	.word	0x20000874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop

08006688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006688:	4808      	ldr	r0, [pc, #32]	@ (80066ac <prvPortStartFirstTask+0x24>)
 800668a:	6800      	ldr	r0, [r0, #0]
 800668c:	6800      	ldr	r0, [r0, #0]
 800668e:	f380 8808 	msr	MSP, r0
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f380 8814 	msr	CONTROL, r0
 800669a:	b662      	cpsie	i
 800669c:	b661      	cpsie	f
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	df00      	svc	0
 80066a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066aa:	bf00      	nop
 80066ac:	e000ed08 	.word	0xe000ed08

080066b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066b6:	4b47      	ldr	r3, [pc, #284]	@ (80067d4 <xPortStartScheduler+0x124>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a47      	ldr	r2, [pc, #284]	@ (80067d8 <xPortStartScheduler+0x128>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d10b      	bne.n	80066d8 <xPortStartScheduler+0x28>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	613b      	str	r3, [r7, #16]
}
 80066d2:	bf00      	nop
 80066d4:	bf00      	nop
 80066d6:	e7fd      	b.n	80066d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066d8:	4b3e      	ldr	r3, [pc, #248]	@ (80067d4 <xPortStartScheduler+0x124>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a3f      	ldr	r2, [pc, #252]	@ (80067dc <xPortStartScheduler+0x12c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d10b      	bne.n	80066fa <xPortStartScheduler+0x4a>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	60fb      	str	r3, [r7, #12]
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	e7fd      	b.n	80066f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066fa:	4b39      	ldr	r3, [pc, #228]	@ (80067e0 <xPortStartScheduler+0x130>)
 80066fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	22ff      	movs	r2, #255	@ 0xff
 800670a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	b2db      	uxtb	r3, r3
 8006712:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	b2db      	uxtb	r3, r3
 8006718:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800671c:	b2da      	uxtb	r2, r3
 800671e:	4b31      	ldr	r3, [pc, #196]	@ (80067e4 <xPortStartScheduler+0x134>)
 8006720:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006722:	4b31      	ldr	r3, [pc, #196]	@ (80067e8 <xPortStartScheduler+0x138>)
 8006724:	2207      	movs	r2, #7
 8006726:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006728:	e009      	b.n	800673e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800672a:	4b2f      	ldr	r3, [pc, #188]	@ (80067e8 <xPortStartScheduler+0x138>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3b01      	subs	r3, #1
 8006730:	4a2d      	ldr	r2, [pc, #180]	@ (80067e8 <xPortStartScheduler+0x138>)
 8006732:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	b2db      	uxtb	r3, r3
 800673c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006746:	2b80      	cmp	r3, #128	@ 0x80
 8006748:	d0ef      	beq.n	800672a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800674a:	4b27      	ldr	r3, [pc, #156]	@ (80067e8 <xPortStartScheduler+0x138>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f1c3 0307 	rsb	r3, r3, #7
 8006752:	2b04      	cmp	r3, #4
 8006754:	d00b      	beq.n	800676e <xPortStartScheduler+0xbe>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	60bb      	str	r3, [r7, #8]
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	e7fd      	b.n	800676a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800676e:	4b1e      	ldr	r3, [pc, #120]	@ (80067e8 <xPortStartScheduler+0x138>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	021b      	lsls	r3, r3, #8
 8006774:	4a1c      	ldr	r2, [pc, #112]	@ (80067e8 <xPortStartScheduler+0x138>)
 8006776:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006778:	4b1b      	ldr	r3, [pc, #108]	@ (80067e8 <xPortStartScheduler+0x138>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006780:	4a19      	ldr	r2, [pc, #100]	@ (80067e8 <xPortStartScheduler+0x138>)
 8006782:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	b2da      	uxtb	r2, r3
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800678c:	4b17      	ldr	r3, [pc, #92]	@ (80067ec <xPortStartScheduler+0x13c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a16      	ldr	r2, [pc, #88]	@ (80067ec <xPortStartScheduler+0x13c>)
 8006792:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006796:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006798:	4b14      	ldr	r3, [pc, #80]	@ (80067ec <xPortStartScheduler+0x13c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a13      	ldr	r2, [pc, #76]	@ (80067ec <xPortStartScheduler+0x13c>)
 800679e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80067a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067a4:	f000 f8da 	bl	800695c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067a8:	4b11      	ldr	r3, [pc, #68]	@ (80067f0 <xPortStartScheduler+0x140>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067ae:	f000 f8f9 	bl	80069a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067b2:	4b10      	ldr	r3, [pc, #64]	@ (80067f4 <xPortStartScheduler+0x144>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a0f      	ldr	r2, [pc, #60]	@ (80067f4 <xPortStartScheduler+0x144>)
 80067b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80067bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067be:	f7ff ff63 	bl	8006688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067c2:	f7fe ff4f 	bl	8005664 <vTaskSwitchContext>
	prvTaskExitError();
 80067c6:	f7ff ff1d 	bl	8006604 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	e000ed00 	.word	0xe000ed00
 80067d8:	410fc271 	.word	0x410fc271
 80067dc:	410fc270 	.word	0x410fc270
 80067e0:	e000e400 	.word	0xe000e400
 80067e4:	20000ea8 	.word	0x20000ea8
 80067e8:	20000eac 	.word	0x20000eac
 80067ec:	e000ed20 	.word	0xe000ed20
 80067f0:	2000000c 	.word	0x2000000c
 80067f4:	e000ef34 	.word	0xe000ef34

080067f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	607b      	str	r3, [r7, #4]
}
 8006810:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006812:	4b10      	ldr	r3, [pc, #64]	@ (8006854 <vPortEnterCritical+0x5c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3301      	adds	r3, #1
 8006818:	4a0e      	ldr	r2, [pc, #56]	@ (8006854 <vPortEnterCritical+0x5c>)
 800681a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800681c:	4b0d      	ldr	r3, [pc, #52]	@ (8006854 <vPortEnterCritical+0x5c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d110      	bne.n	8006846 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006824:	4b0c      	ldr	r3, [pc, #48]	@ (8006858 <vPortEnterCritical+0x60>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00b      	beq.n	8006846 <vPortEnterCritical+0x4e>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	603b      	str	r3, [r7, #0]
}
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	e7fd      	b.n	8006842 <vPortEnterCritical+0x4a>
	}
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	2000000c 	.word	0x2000000c
 8006858:	e000ed04 	.word	0xe000ed04

0800685c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006862:	4b12      	ldr	r3, [pc, #72]	@ (80068ac <vPortExitCritical+0x50>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10b      	bne.n	8006882 <vPortExitCritical+0x26>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	607b      	str	r3, [r7, #4]
}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	e7fd      	b.n	800687e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006882:	4b0a      	ldr	r3, [pc, #40]	@ (80068ac <vPortExitCritical+0x50>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3b01      	subs	r3, #1
 8006888:	4a08      	ldr	r2, [pc, #32]	@ (80068ac <vPortExitCritical+0x50>)
 800688a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800688c:	4b07      	ldr	r3, [pc, #28]	@ (80068ac <vPortExitCritical+0x50>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d105      	bne.n	80068a0 <vPortExitCritical+0x44>
 8006894:	2300      	movs	r3, #0
 8006896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	f383 8811 	msr	BASEPRI, r3
}
 800689e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	2000000c 	.word	0x2000000c

080068b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068b0:	f3ef 8009 	mrs	r0, PSP
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	4b15      	ldr	r3, [pc, #84]	@ (8006910 <pxCurrentTCBConst>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	f01e 0f10 	tst.w	lr, #16
 80068c0:	bf08      	it	eq
 80068c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ca:	6010      	str	r0, [r2, #0]
 80068cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80068d4:	f380 8811 	msr	BASEPRI, r0
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f7fe fec0 	bl	8005664 <vTaskSwitchContext>
 80068e4:	f04f 0000 	mov.w	r0, #0
 80068e8:	f380 8811 	msr	BASEPRI, r0
 80068ec:	bc09      	pop	{r0, r3}
 80068ee:	6819      	ldr	r1, [r3, #0]
 80068f0:	6808      	ldr	r0, [r1, #0]
 80068f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f6:	f01e 0f10 	tst.w	lr, #16
 80068fa:	bf08      	it	eq
 80068fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006900:	f380 8809 	msr	PSP, r0
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	f3af 8000 	nop.w

08006910 <pxCurrentTCBConst>:
 8006910:	20000874 	.word	0x20000874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop

08006918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	607b      	str	r3, [r7, #4]
}
 8006930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006932:	f7fe fddd 	bl	80054f0 <xTaskIncrementTick>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800693c:	4b06      	ldr	r3, [pc, #24]	@ (8006958 <xPortSysTickHandler+0x40>)
 800693e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f383 8811 	msr	BASEPRI, r3
}
 800694e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006960:	4b0b      	ldr	r3, [pc, #44]	@ (8006990 <vPortSetupTimerInterrupt+0x34>)
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006966:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <vPortSetupTimerInterrupt+0x38>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800696c:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <vPortSetupTimerInterrupt+0x3c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a0a      	ldr	r2, [pc, #40]	@ (800699c <vPortSetupTimerInterrupt+0x40>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	099b      	lsrs	r3, r3, #6
 8006978:	4a09      	ldr	r2, [pc, #36]	@ (80069a0 <vPortSetupTimerInterrupt+0x44>)
 800697a:	3b01      	subs	r3, #1
 800697c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800697e:	4b04      	ldr	r3, [pc, #16]	@ (8006990 <vPortSetupTimerInterrupt+0x34>)
 8006980:	2207      	movs	r2, #7
 8006982:	601a      	str	r2, [r3, #0]
}
 8006984:	bf00      	nop
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	e000e010 	.word	0xe000e010
 8006994:	e000e018 	.word	0xe000e018
 8006998:	20000000 	.word	0x20000000
 800699c:	10624dd3 	.word	0x10624dd3
 80069a0:	e000e014 	.word	0xe000e014

080069a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80069b4 <vPortEnableVFP+0x10>
 80069a8:	6801      	ldr	r1, [r0, #0]
 80069aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80069ae:	6001      	str	r1, [r0, #0]
 80069b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069b2:	bf00      	nop
 80069b4:	e000ed88 	.word	0xe000ed88

080069b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069be:	f3ef 8305 	mrs	r3, IPSR
 80069c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b0f      	cmp	r3, #15
 80069c8:	d915      	bls.n	80069f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069ca:	4a18      	ldr	r2, [pc, #96]	@ (8006a2c <vPortValidateInterruptPriority+0x74>)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069d4:	4b16      	ldr	r3, [pc, #88]	@ (8006a30 <vPortValidateInterruptPriority+0x78>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	7afa      	ldrb	r2, [r7, #11]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d20b      	bcs.n	80069f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	607b      	str	r3, [r7, #4]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006a34 <vPortValidateInterruptPriority+0x7c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80069fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006a38 <vPortValidateInterruptPriority+0x80>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d90b      	bls.n	8006a1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	603b      	str	r3, [r7, #0]
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	e7fd      	b.n	8006a1a <vPortValidateInterruptPriority+0x62>
	}
 8006a1e:	bf00      	nop
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	e000e3f0 	.word	0xe000e3f0
 8006a30:	20000ea8 	.word	0x20000ea8
 8006a34:	e000ed0c 	.word	0xe000ed0c
 8006a38:	20000eac 	.word	0x20000eac

08006a3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	@ 0x28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a48:	f7fe fbfa 	bl	8005240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8006bc0 <pvPortMalloc+0x184>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a54:	f000 f924 	bl	8006ca0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a58:	4b5a      	ldr	r3, [pc, #360]	@ (8006bc4 <pvPortMalloc+0x188>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f040 8095 	bne.w	8006b90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01e      	beq.n	8006aaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006a6c:	2208      	movs	r2, #8
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4413      	add	r3, r2
 8006a72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d015      	beq.n	8006aaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f023 0307 	bic.w	r3, r3, #7
 8006a84:	3308      	adds	r3, #8
 8006a86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f003 0307 	and.w	r3, r3, #7
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00b      	beq.n	8006aaa <pvPortMalloc+0x6e>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	617b      	str	r3, [r7, #20]
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop
 8006aa8:	e7fd      	b.n	8006aa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d06f      	beq.n	8006b90 <pvPortMalloc+0x154>
 8006ab0:	4b45      	ldr	r3, [pc, #276]	@ (8006bc8 <pvPortMalloc+0x18c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d86a      	bhi.n	8006b90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006aba:	4b44      	ldr	r3, [pc, #272]	@ (8006bcc <pvPortMalloc+0x190>)
 8006abc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006abe:	4b43      	ldr	r3, [pc, #268]	@ (8006bcc <pvPortMalloc+0x190>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ac4:	e004      	b.n	8006ad0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d903      	bls.n	8006ae2 <pvPortMalloc+0xa6>
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f1      	bne.n	8006ac6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ae2:	4b37      	ldr	r3, [pc, #220]	@ (8006bc0 <pvPortMalloc+0x184>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d051      	beq.n	8006b90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2208      	movs	r2, #8
 8006af2:	4413      	add	r3, r2
 8006af4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	1ad2      	subs	r2, r2, r3
 8006b06:	2308      	movs	r3, #8
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d920      	bls.n	8006b50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4413      	add	r3, r2
 8006b14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <pvPortMalloc+0xfc>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	613b      	str	r3, [r7, #16]
}
 8006b32:	bf00      	nop
 8006b34:	bf00      	nop
 8006b36:	e7fd      	b.n	8006b34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	1ad2      	subs	r2, r2, r3
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b4a:	69b8      	ldr	r0, [r7, #24]
 8006b4c:	f000 f90a 	bl	8006d64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b50:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc8 <pvPortMalloc+0x18c>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc8 <pvPortMalloc+0x18c>)
 8006b5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8006bc8 <pvPortMalloc+0x18c>)
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	4b1b      	ldr	r3, [pc, #108]	@ (8006bd0 <pvPortMalloc+0x194>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d203      	bcs.n	8006b72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b6a:	4b17      	ldr	r3, [pc, #92]	@ (8006bc8 <pvPortMalloc+0x18c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a18      	ldr	r2, [pc, #96]	@ (8006bd0 <pvPortMalloc+0x194>)
 8006b70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	4b13      	ldr	r3, [pc, #76]	@ (8006bc4 <pvPortMalloc+0x188>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b86:	4b13      	ldr	r3, [pc, #76]	@ (8006bd4 <pvPortMalloc+0x198>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	4a11      	ldr	r2, [pc, #68]	@ (8006bd4 <pvPortMalloc+0x198>)
 8006b8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b90:	f7fe fb64 	bl	800525c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <pvPortMalloc+0x17a>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	60fb      	str	r3, [r7, #12]
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	e7fd      	b.n	8006bb2 <pvPortMalloc+0x176>
	return pvReturn;
 8006bb6:	69fb      	ldr	r3, [r7, #28]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3728      	adds	r7, #40	@ 0x28
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20001a70 	.word	0x20001a70
 8006bc4:	20001a84 	.word	0x20001a84
 8006bc8:	20001a74 	.word	0x20001a74
 8006bcc:	20001a68 	.word	0x20001a68
 8006bd0:	20001a78 	.word	0x20001a78
 8006bd4:	20001a7c 	.word	0x20001a7c

08006bd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d04f      	beq.n	8006c8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bea:	2308      	movs	r3, #8
 8006bec:	425b      	negs	r3, r3
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	4b25      	ldr	r3, [pc, #148]	@ (8006c94 <vPortFree+0xbc>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4013      	ands	r3, r2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10b      	bne.n	8006c1e <vPortFree+0x46>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	60fb      	str	r3, [r7, #12]
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	e7fd      	b.n	8006c1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <vPortFree+0x66>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	60bb      	str	r3, [r7, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	e7fd      	b.n	8006c3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	4b14      	ldr	r3, [pc, #80]	@ (8006c94 <vPortFree+0xbc>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4013      	ands	r3, r2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01e      	beq.n	8006c8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11a      	bne.n	8006c8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	4b0e      	ldr	r3, [pc, #56]	@ (8006c94 <vPortFree+0xbc>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	43db      	mvns	r3, r3
 8006c5e:	401a      	ands	r2, r3
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c64:	f7fe faec 	bl	8005240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <vPortFree+0xc0>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4413      	add	r3, r2
 8006c72:	4a09      	ldr	r2, [pc, #36]	@ (8006c98 <vPortFree+0xc0>)
 8006c74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c76:	6938      	ldr	r0, [r7, #16]
 8006c78:	f000 f874 	bl	8006d64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c7c:	4b07      	ldr	r3, [pc, #28]	@ (8006c9c <vPortFree+0xc4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3301      	adds	r3, #1
 8006c82:	4a06      	ldr	r2, [pc, #24]	@ (8006c9c <vPortFree+0xc4>)
 8006c84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c86:	f7fe fae9 	bl	800525c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c8a:	bf00      	nop
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20001a84 	.word	0x20001a84
 8006c98:	20001a74 	.word	0x20001a74
 8006c9c:	20001a80 	.word	0x20001a80

08006ca0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ca6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006caa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cac:	4b27      	ldr	r3, [pc, #156]	@ (8006d4c <prvHeapInit+0xac>)
 8006cae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00c      	beq.n	8006cd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3307      	adds	r3, #7
 8006cbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0307 	bic.w	r3, r3, #7
 8006cc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	4a1f      	ldr	r2, [pc, #124]	@ (8006d4c <prvHeapInit+0xac>)
 8006cd0:	4413      	add	r3, r2
 8006cd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d50 <prvHeapInit+0xb0>)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cde:	4b1c      	ldr	r3, [pc, #112]	@ (8006d50 <prvHeapInit+0xb0>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	4413      	add	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cec:	2208      	movs	r2, #8
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0307 	bic.w	r3, r3, #7
 8006cfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4a15      	ldr	r2, [pc, #84]	@ (8006d54 <prvHeapInit+0xb4>)
 8006d00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d02:	4b14      	ldr	r3, [pc, #80]	@ (8006d54 <prvHeapInit+0xb4>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2200      	movs	r2, #0
 8006d08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d0a:	4b12      	ldr	r3, [pc, #72]	@ (8006d54 <prvHeapInit+0xb4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	1ad2      	subs	r2, r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d20:	4b0c      	ldr	r3, [pc, #48]	@ (8006d54 <prvHeapInit+0xb4>)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d58 <prvHeapInit+0xb8>)
 8006d2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	4a09      	ldr	r2, [pc, #36]	@ (8006d5c <prvHeapInit+0xbc>)
 8006d36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d38:	4b09      	ldr	r3, [pc, #36]	@ (8006d60 <prvHeapInit+0xc0>)
 8006d3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d3e:	601a      	str	r2, [r3, #0]
}
 8006d40:	bf00      	nop
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	20000eb0 	.word	0x20000eb0
 8006d50:	20001a68 	.word	0x20001a68
 8006d54:	20001a70 	.word	0x20001a70
 8006d58:	20001a78 	.word	0x20001a78
 8006d5c:	20001a74 	.word	0x20001a74
 8006d60:	20001a84 	.word	0x20001a84

08006d64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d6c:	4b28      	ldr	r3, [pc, #160]	@ (8006e10 <prvInsertBlockIntoFreeList+0xac>)
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	e002      	b.n	8006d78 <prvInsertBlockIntoFreeList+0x14>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d8f7      	bhi.n	8006d72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d108      	bne.n	8006da6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	441a      	add	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	441a      	add	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d118      	bne.n	8006dec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4b15      	ldr	r3, [pc, #84]	@ (8006e14 <prvInsertBlockIntoFreeList+0xb0>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d00d      	beq.n	8006de2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	441a      	add	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	e008      	b.n	8006df4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006de2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e14 <prvInsertBlockIntoFreeList+0xb0>)
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	e003      	b.n	8006df4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d002      	beq.n	8006e02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	20001a68 	.word	0x20001a68
 8006e14:	20001a70 	.word	0x20001a70

08006e18 <std>:
 8006e18:	2300      	movs	r3, #0
 8006e1a:	b510      	push	{r4, lr}
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e26:	6083      	str	r3, [r0, #8]
 8006e28:	8181      	strh	r1, [r0, #12]
 8006e2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e2c:	81c2      	strh	r2, [r0, #14]
 8006e2e:	6183      	str	r3, [r0, #24]
 8006e30:	4619      	mov	r1, r3
 8006e32:	2208      	movs	r2, #8
 8006e34:	305c      	adds	r0, #92	@ 0x5c
 8006e36:	f000 f9c8 	bl	80071ca <memset>
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <std+0x58>)
 8006e3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e74 <std+0x5c>)
 8006e40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e42:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <std+0x60>)
 8006e44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e46:	4b0d      	ldr	r3, [pc, #52]	@ (8006e7c <std+0x64>)
 8006e48:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e80 <std+0x68>)
 8006e4c:	6224      	str	r4, [r4, #32]
 8006e4e:	429c      	cmp	r4, r3
 8006e50:	d006      	beq.n	8006e60 <std+0x48>
 8006e52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e56:	4294      	cmp	r4, r2
 8006e58:	d002      	beq.n	8006e60 <std+0x48>
 8006e5a:	33d0      	adds	r3, #208	@ 0xd0
 8006e5c:	429c      	cmp	r4, r3
 8006e5e:	d105      	bne.n	8006e6c <std+0x54>
 8006e60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e68:	f000 ba28 	b.w	80072bc <__retarget_lock_init_recursive>
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	bf00      	nop
 8006e70:	08007145 	.word	0x08007145
 8006e74:	08007167 	.word	0x08007167
 8006e78:	0800719f 	.word	0x0800719f
 8006e7c:	080071c3 	.word	0x080071c3
 8006e80:	20001a88 	.word	0x20001a88

08006e84 <stdio_exit_handler>:
 8006e84:	4a02      	ldr	r2, [pc, #8]	@ (8006e90 <stdio_exit_handler+0xc>)
 8006e86:	4903      	ldr	r1, [pc, #12]	@ (8006e94 <stdio_exit_handler+0x10>)
 8006e88:	4803      	ldr	r0, [pc, #12]	@ (8006e98 <stdio_exit_handler+0x14>)
 8006e8a:	f000 b869 	b.w	8006f60 <_fwalk_sglue>
 8006e8e:	bf00      	nop
 8006e90:	20000010 	.word	0x20000010
 8006e94:	08007bb5 	.word	0x08007bb5
 8006e98:	20000020 	.word	0x20000020

08006e9c <cleanup_stdio>:
 8006e9c:	6841      	ldr	r1, [r0, #4]
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed0 <cleanup_stdio+0x34>)
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	d001      	beq.n	8006eac <cleanup_stdio+0x10>
 8006ea8:	f000 fe84 	bl	8007bb4 <_fflush_r>
 8006eac:	68a1      	ldr	r1, [r4, #8]
 8006eae:	4b09      	ldr	r3, [pc, #36]	@ (8006ed4 <cleanup_stdio+0x38>)
 8006eb0:	4299      	cmp	r1, r3
 8006eb2:	d002      	beq.n	8006eba <cleanup_stdio+0x1e>
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 fe7d 	bl	8007bb4 <_fflush_r>
 8006eba:	68e1      	ldr	r1, [r4, #12]
 8006ebc:	4b06      	ldr	r3, [pc, #24]	@ (8006ed8 <cleanup_stdio+0x3c>)
 8006ebe:	4299      	cmp	r1, r3
 8006ec0:	d004      	beq.n	8006ecc <cleanup_stdio+0x30>
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec8:	f000 be74 	b.w	8007bb4 <_fflush_r>
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	bf00      	nop
 8006ed0:	20001a88 	.word	0x20001a88
 8006ed4:	20001af0 	.word	0x20001af0
 8006ed8:	20001b58 	.word	0x20001b58

08006edc <global_stdio_init.part.0>:
 8006edc:	b510      	push	{r4, lr}
 8006ede:	4b0b      	ldr	r3, [pc, #44]	@ (8006f0c <global_stdio_init.part.0+0x30>)
 8006ee0:	4c0b      	ldr	r4, [pc, #44]	@ (8006f10 <global_stdio_init.part.0+0x34>)
 8006ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8006f14 <global_stdio_init.part.0+0x38>)
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2104      	movs	r1, #4
 8006eec:	f7ff ff94 	bl	8006e18 <std>
 8006ef0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	2109      	movs	r1, #9
 8006ef8:	f7ff ff8e 	bl	8006e18 <std>
 8006efc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f00:	2202      	movs	r2, #2
 8006f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f06:	2112      	movs	r1, #18
 8006f08:	f7ff bf86 	b.w	8006e18 <std>
 8006f0c:	20001bc0 	.word	0x20001bc0
 8006f10:	20001a88 	.word	0x20001a88
 8006f14:	08006e85 	.word	0x08006e85

08006f18 <__sfp_lock_acquire>:
 8006f18:	4801      	ldr	r0, [pc, #4]	@ (8006f20 <__sfp_lock_acquire+0x8>)
 8006f1a:	f000 b9d0 	b.w	80072be <__retarget_lock_acquire_recursive>
 8006f1e:	bf00      	nop
 8006f20:	20001bc9 	.word	0x20001bc9

08006f24 <__sfp_lock_release>:
 8006f24:	4801      	ldr	r0, [pc, #4]	@ (8006f2c <__sfp_lock_release+0x8>)
 8006f26:	f000 b9cb 	b.w	80072c0 <__retarget_lock_release_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	20001bc9 	.word	0x20001bc9

08006f30 <__sinit>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	4604      	mov	r4, r0
 8006f34:	f7ff fff0 	bl	8006f18 <__sfp_lock_acquire>
 8006f38:	6a23      	ldr	r3, [r4, #32]
 8006f3a:	b11b      	cbz	r3, 8006f44 <__sinit+0x14>
 8006f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f40:	f7ff bff0 	b.w	8006f24 <__sfp_lock_release>
 8006f44:	4b04      	ldr	r3, [pc, #16]	@ (8006f58 <__sinit+0x28>)
 8006f46:	6223      	str	r3, [r4, #32]
 8006f48:	4b04      	ldr	r3, [pc, #16]	@ (8006f5c <__sinit+0x2c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1f5      	bne.n	8006f3c <__sinit+0xc>
 8006f50:	f7ff ffc4 	bl	8006edc <global_stdio_init.part.0>
 8006f54:	e7f2      	b.n	8006f3c <__sinit+0xc>
 8006f56:	bf00      	nop
 8006f58:	08006e9d 	.word	0x08006e9d
 8006f5c:	20001bc0 	.word	0x20001bc0

08006f60 <_fwalk_sglue>:
 8006f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f64:	4607      	mov	r7, r0
 8006f66:	4688      	mov	r8, r1
 8006f68:	4614      	mov	r4, r2
 8006f6a:	2600      	movs	r6, #0
 8006f6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f70:	f1b9 0901 	subs.w	r9, r9, #1
 8006f74:	d505      	bpl.n	8006f82 <_fwalk_sglue+0x22>
 8006f76:	6824      	ldr	r4, [r4, #0]
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	d1f7      	bne.n	8006f6c <_fwalk_sglue+0xc>
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f82:	89ab      	ldrh	r3, [r5, #12]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d907      	bls.n	8006f98 <_fwalk_sglue+0x38>
 8006f88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	d003      	beq.n	8006f98 <_fwalk_sglue+0x38>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4638      	mov	r0, r7
 8006f94:	47c0      	blx	r8
 8006f96:	4306      	orrs	r6, r0
 8006f98:	3568      	adds	r5, #104	@ 0x68
 8006f9a:	e7e9      	b.n	8006f70 <_fwalk_sglue+0x10>

08006f9c <setvbuf>:
 8006f9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fa0:	461d      	mov	r5, r3
 8006fa2:	4b57      	ldr	r3, [pc, #348]	@ (8007100 <setvbuf+0x164>)
 8006fa4:	681f      	ldr	r7, [r3, #0]
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	460e      	mov	r6, r1
 8006faa:	4690      	mov	r8, r2
 8006fac:	b127      	cbz	r7, 8006fb8 <setvbuf+0x1c>
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	b913      	cbnz	r3, 8006fb8 <setvbuf+0x1c>
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	f7ff ffbc 	bl	8006f30 <__sinit>
 8006fb8:	f1b8 0f02 	cmp.w	r8, #2
 8006fbc:	d006      	beq.n	8006fcc <setvbuf+0x30>
 8006fbe:	f1b8 0f01 	cmp.w	r8, #1
 8006fc2:	f200 809a 	bhi.w	80070fa <setvbuf+0x15e>
 8006fc6:	2d00      	cmp	r5, #0
 8006fc8:	f2c0 8097 	blt.w	80070fa <setvbuf+0x15e>
 8006fcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fce:	07d9      	lsls	r1, r3, #31
 8006fd0:	d405      	bmi.n	8006fde <setvbuf+0x42>
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	059a      	lsls	r2, r3, #22
 8006fd6:	d402      	bmi.n	8006fde <setvbuf+0x42>
 8006fd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fda:	f000 f970 	bl	80072be <__retarget_lock_acquire_recursive>
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4638      	mov	r0, r7
 8006fe2:	f000 fde7 	bl	8007bb4 <_fflush_r>
 8006fe6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fe8:	b141      	cbz	r1, 8006ffc <setvbuf+0x60>
 8006fea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fee:	4299      	cmp	r1, r3
 8006ff0:	d002      	beq.n	8006ff8 <setvbuf+0x5c>
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	f000 f974 	bl	80072e0 <_free_r>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61a3      	str	r3, [r4, #24]
 8007000:	6063      	str	r3, [r4, #4]
 8007002:	89a3      	ldrh	r3, [r4, #12]
 8007004:	061b      	lsls	r3, r3, #24
 8007006:	d503      	bpl.n	8007010 <setvbuf+0x74>
 8007008:	6921      	ldr	r1, [r4, #16]
 800700a:	4638      	mov	r0, r7
 800700c:	f000 f968 	bl	80072e0 <_free_r>
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8007016:	f023 0303 	bic.w	r3, r3, #3
 800701a:	f1b8 0f02 	cmp.w	r8, #2
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	d061      	beq.n	80070e6 <setvbuf+0x14a>
 8007022:	ab01      	add	r3, sp, #4
 8007024:	466a      	mov	r2, sp
 8007026:	4621      	mov	r1, r4
 8007028:	4638      	mov	r0, r7
 800702a:	f000 fdeb 	bl	8007c04 <__swhatbuf_r>
 800702e:	89a3      	ldrh	r3, [r4, #12]
 8007030:	4318      	orrs	r0, r3
 8007032:	81a0      	strh	r0, [r4, #12]
 8007034:	bb2d      	cbnz	r5, 8007082 <setvbuf+0xe6>
 8007036:	9d00      	ldr	r5, [sp, #0]
 8007038:	4628      	mov	r0, r5
 800703a:	f000 f99b 	bl	8007374 <malloc>
 800703e:	4606      	mov	r6, r0
 8007040:	2800      	cmp	r0, #0
 8007042:	d152      	bne.n	80070ea <setvbuf+0x14e>
 8007044:	f8dd 9000 	ldr.w	r9, [sp]
 8007048:	45a9      	cmp	r9, r5
 800704a:	d140      	bne.n	80070ce <setvbuf+0x132>
 800704c:	f04f 35ff 	mov.w	r5, #4294967295
 8007050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007054:	f043 0202 	orr.w	r2, r3, #2
 8007058:	81a2      	strh	r2, [r4, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	60a2      	str	r2, [r4, #8]
 800705e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8007062:	6022      	str	r2, [r4, #0]
 8007064:	6122      	str	r2, [r4, #16]
 8007066:	2201      	movs	r2, #1
 8007068:	6162      	str	r2, [r4, #20]
 800706a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800706c:	07d6      	lsls	r6, r2, #31
 800706e:	d404      	bmi.n	800707a <setvbuf+0xde>
 8007070:	0598      	lsls	r0, r3, #22
 8007072:	d402      	bmi.n	800707a <setvbuf+0xde>
 8007074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007076:	f000 f923 	bl	80072c0 <__retarget_lock_release_recursive>
 800707a:	4628      	mov	r0, r5
 800707c:	b003      	add	sp, #12
 800707e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007082:	2e00      	cmp	r6, #0
 8007084:	d0d8      	beq.n	8007038 <setvbuf+0x9c>
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	b913      	cbnz	r3, 8007090 <setvbuf+0xf4>
 800708a:	4638      	mov	r0, r7
 800708c:	f7ff ff50 	bl	8006f30 <__sinit>
 8007090:	f1b8 0f01 	cmp.w	r8, #1
 8007094:	bf08      	it	eq
 8007096:	89a3      	ldrheq	r3, [r4, #12]
 8007098:	6026      	str	r6, [r4, #0]
 800709a:	bf04      	itt	eq
 800709c:	f043 0301 	orreq.w	r3, r3, #1
 80070a0:	81a3      	strheq	r3, [r4, #12]
 80070a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a6:	f013 0208 	ands.w	r2, r3, #8
 80070aa:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80070ae:	d01e      	beq.n	80070ee <setvbuf+0x152>
 80070b0:	07d9      	lsls	r1, r3, #31
 80070b2:	bf41      	itttt	mi
 80070b4:	2200      	movmi	r2, #0
 80070b6:	426d      	negmi	r5, r5
 80070b8:	60a2      	strmi	r2, [r4, #8]
 80070ba:	61a5      	strmi	r5, [r4, #24]
 80070bc:	bf58      	it	pl
 80070be:	60a5      	strpl	r5, [r4, #8]
 80070c0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80070c2:	07d2      	lsls	r2, r2, #31
 80070c4:	d401      	bmi.n	80070ca <setvbuf+0x12e>
 80070c6:	059b      	lsls	r3, r3, #22
 80070c8:	d513      	bpl.n	80070f2 <setvbuf+0x156>
 80070ca:	2500      	movs	r5, #0
 80070cc:	e7d5      	b.n	800707a <setvbuf+0xde>
 80070ce:	4648      	mov	r0, r9
 80070d0:	f000 f950 	bl	8007374 <malloc>
 80070d4:	4606      	mov	r6, r0
 80070d6:	2800      	cmp	r0, #0
 80070d8:	d0b8      	beq.n	800704c <setvbuf+0xb0>
 80070da:	89a3      	ldrh	r3, [r4, #12]
 80070dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070e0:	81a3      	strh	r3, [r4, #12]
 80070e2:	464d      	mov	r5, r9
 80070e4:	e7cf      	b.n	8007086 <setvbuf+0xea>
 80070e6:	2500      	movs	r5, #0
 80070e8:	e7b2      	b.n	8007050 <setvbuf+0xb4>
 80070ea:	46a9      	mov	r9, r5
 80070ec:	e7f5      	b.n	80070da <setvbuf+0x13e>
 80070ee:	60a2      	str	r2, [r4, #8]
 80070f0:	e7e6      	b.n	80070c0 <setvbuf+0x124>
 80070f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070f4:	f000 f8e4 	bl	80072c0 <__retarget_lock_release_recursive>
 80070f8:	e7e7      	b.n	80070ca <setvbuf+0x12e>
 80070fa:	f04f 35ff 	mov.w	r5, #4294967295
 80070fe:	e7bc      	b.n	800707a <setvbuf+0xde>
 8007100:	2000001c 	.word	0x2000001c

08007104 <siprintf>:
 8007104:	b40e      	push	{r1, r2, r3}
 8007106:	b500      	push	{lr}
 8007108:	b09c      	sub	sp, #112	@ 0x70
 800710a:	ab1d      	add	r3, sp, #116	@ 0x74
 800710c:	9002      	str	r0, [sp, #8]
 800710e:	9006      	str	r0, [sp, #24]
 8007110:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007114:	4809      	ldr	r0, [pc, #36]	@ (800713c <siprintf+0x38>)
 8007116:	9107      	str	r1, [sp, #28]
 8007118:	9104      	str	r1, [sp, #16]
 800711a:	4909      	ldr	r1, [pc, #36]	@ (8007140 <siprintf+0x3c>)
 800711c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007120:	9105      	str	r1, [sp, #20]
 8007122:	6800      	ldr	r0, [r0, #0]
 8007124:	9301      	str	r3, [sp, #4]
 8007126:	a902      	add	r1, sp, #8
 8007128:	f000 fa36 	bl	8007598 <_svfiprintf_r>
 800712c:	9b02      	ldr	r3, [sp, #8]
 800712e:	2200      	movs	r2, #0
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	b01c      	add	sp, #112	@ 0x70
 8007134:	f85d eb04 	ldr.w	lr, [sp], #4
 8007138:	b003      	add	sp, #12
 800713a:	4770      	bx	lr
 800713c:	2000001c 	.word	0x2000001c
 8007140:	ffff0208 	.word	0xffff0208

08007144 <__sread>:
 8007144:	b510      	push	{r4, lr}
 8007146:	460c      	mov	r4, r1
 8007148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800714c:	f000 f868 	bl	8007220 <_read_r>
 8007150:	2800      	cmp	r0, #0
 8007152:	bfab      	itete	ge
 8007154:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007156:	89a3      	ldrhlt	r3, [r4, #12]
 8007158:	181b      	addge	r3, r3, r0
 800715a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800715e:	bfac      	ite	ge
 8007160:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007162:	81a3      	strhlt	r3, [r4, #12]
 8007164:	bd10      	pop	{r4, pc}

08007166 <__swrite>:
 8007166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800716a:	461f      	mov	r7, r3
 800716c:	898b      	ldrh	r3, [r1, #12]
 800716e:	05db      	lsls	r3, r3, #23
 8007170:	4605      	mov	r5, r0
 8007172:	460c      	mov	r4, r1
 8007174:	4616      	mov	r6, r2
 8007176:	d505      	bpl.n	8007184 <__swrite+0x1e>
 8007178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800717c:	2302      	movs	r3, #2
 800717e:	2200      	movs	r2, #0
 8007180:	f000 f83c 	bl	80071fc <_lseek_r>
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800718a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800718e:	81a3      	strh	r3, [r4, #12]
 8007190:	4632      	mov	r2, r6
 8007192:	463b      	mov	r3, r7
 8007194:	4628      	mov	r0, r5
 8007196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800719a:	f000 b853 	b.w	8007244 <_write_r>

0800719e <__sseek>:
 800719e:	b510      	push	{r4, lr}
 80071a0:	460c      	mov	r4, r1
 80071a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a6:	f000 f829 	bl	80071fc <_lseek_r>
 80071aa:	1c43      	adds	r3, r0, #1
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	bf15      	itete	ne
 80071b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80071b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80071b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80071ba:	81a3      	strheq	r3, [r4, #12]
 80071bc:	bf18      	it	ne
 80071be:	81a3      	strhne	r3, [r4, #12]
 80071c0:	bd10      	pop	{r4, pc}

080071c2 <__sclose>:
 80071c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c6:	f000 b809 	b.w	80071dc <_close_r>

080071ca <memset>:
 80071ca:	4402      	add	r2, r0
 80071cc:	4603      	mov	r3, r0
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d100      	bne.n	80071d4 <memset+0xa>
 80071d2:	4770      	bx	lr
 80071d4:	f803 1b01 	strb.w	r1, [r3], #1
 80071d8:	e7f9      	b.n	80071ce <memset+0x4>
	...

080071dc <_close_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4d06      	ldr	r5, [pc, #24]	@ (80071f8 <_close_r+0x1c>)
 80071e0:	2300      	movs	r3, #0
 80071e2:	4604      	mov	r4, r0
 80071e4:	4608      	mov	r0, r1
 80071e6:	602b      	str	r3, [r5, #0]
 80071e8:	f7f9 fcba 	bl	8000b60 <_close>
 80071ec:	1c43      	adds	r3, r0, #1
 80071ee:	d102      	bne.n	80071f6 <_close_r+0x1a>
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	b103      	cbz	r3, 80071f6 <_close_r+0x1a>
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
 80071f8:	20001bc4 	.word	0x20001bc4

080071fc <_lseek_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4d07      	ldr	r5, [pc, #28]	@ (800721c <_lseek_r+0x20>)
 8007200:	4604      	mov	r4, r0
 8007202:	4608      	mov	r0, r1
 8007204:	4611      	mov	r1, r2
 8007206:	2200      	movs	r2, #0
 8007208:	602a      	str	r2, [r5, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	f7f9 fe28 	bl	8000e60 <_lseek>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d102      	bne.n	800721a <_lseek_r+0x1e>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	b103      	cbz	r3, 800721a <_lseek_r+0x1e>
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	20001bc4 	.word	0x20001bc4

08007220 <_read_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4d07      	ldr	r5, [pc, #28]	@ (8007240 <_read_r+0x20>)
 8007224:	4604      	mov	r4, r0
 8007226:	4608      	mov	r0, r1
 8007228:	4611      	mov	r1, r2
 800722a:	2200      	movs	r2, #0
 800722c:	602a      	str	r2, [r5, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	f7f9 fcae 	bl	8000b90 <_read>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d102      	bne.n	800723e <_read_r+0x1e>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	b103      	cbz	r3, 800723e <_read_r+0x1e>
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	20001bc4 	.word	0x20001bc4

08007244 <_write_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4d07      	ldr	r5, [pc, #28]	@ (8007264 <_write_r+0x20>)
 8007248:	4604      	mov	r4, r0
 800724a:	4608      	mov	r0, r1
 800724c:	4611      	mov	r1, r2
 800724e:	2200      	movs	r2, #0
 8007250:	602a      	str	r2, [r5, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	f7f9 fc58 	bl	8000b08 <_write>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d102      	bne.n	8007262 <_write_r+0x1e>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	b103      	cbz	r3, 8007262 <_write_r+0x1e>
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	20001bc4 	.word	0x20001bc4

08007268 <__errno>:
 8007268:	4b01      	ldr	r3, [pc, #4]	@ (8007270 <__errno+0x8>)
 800726a:	6818      	ldr	r0, [r3, #0]
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	2000001c 	.word	0x2000001c

08007274 <__libc_init_array>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	4d0d      	ldr	r5, [pc, #52]	@ (80072ac <__libc_init_array+0x38>)
 8007278:	4c0d      	ldr	r4, [pc, #52]	@ (80072b0 <__libc_init_array+0x3c>)
 800727a:	1b64      	subs	r4, r4, r5
 800727c:	10a4      	asrs	r4, r4, #2
 800727e:	2600      	movs	r6, #0
 8007280:	42a6      	cmp	r6, r4
 8007282:	d109      	bne.n	8007298 <__libc_init_array+0x24>
 8007284:	4d0b      	ldr	r5, [pc, #44]	@ (80072b4 <__libc_init_array+0x40>)
 8007286:	4c0c      	ldr	r4, [pc, #48]	@ (80072b8 <__libc_init_array+0x44>)
 8007288:	f000 fd54 	bl	8007d34 <_init>
 800728c:	1b64      	subs	r4, r4, r5
 800728e:	10a4      	asrs	r4, r4, #2
 8007290:	2600      	movs	r6, #0
 8007292:	42a6      	cmp	r6, r4
 8007294:	d105      	bne.n	80072a2 <__libc_init_array+0x2e>
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	f855 3b04 	ldr.w	r3, [r5], #4
 800729c:	4798      	blx	r3
 800729e:	3601      	adds	r6, #1
 80072a0:	e7ee      	b.n	8007280 <__libc_init_array+0xc>
 80072a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a6:	4798      	blx	r3
 80072a8:	3601      	adds	r6, #1
 80072aa:	e7f2      	b.n	8007292 <__libc_init_array+0x1e>
 80072ac:	08007f80 	.word	0x08007f80
 80072b0:	08007f80 	.word	0x08007f80
 80072b4:	08007f80 	.word	0x08007f80
 80072b8:	08007f84 	.word	0x08007f84

080072bc <__retarget_lock_init_recursive>:
 80072bc:	4770      	bx	lr

080072be <__retarget_lock_acquire_recursive>:
 80072be:	4770      	bx	lr

080072c0 <__retarget_lock_release_recursive>:
 80072c0:	4770      	bx	lr

080072c2 <memcpy>:
 80072c2:	440a      	add	r2, r1
 80072c4:	4291      	cmp	r1, r2
 80072c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80072ca:	d100      	bne.n	80072ce <memcpy+0xc>
 80072cc:	4770      	bx	lr
 80072ce:	b510      	push	{r4, lr}
 80072d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072d8:	4291      	cmp	r1, r2
 80072da:	d1f9      	bne.n	80072d0 <memcpy+0xe>
 80072dc:	bd10      	pop	{r4, pc}
	...

080072e0 <_free_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4605      	mov	r5, r0
 80072e4:	2900      	cmp	r1, #0
 80072e6:	d041      	beq.n	800736c <_free_r+0x8c>
 80072e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ec:	1f0c      	subs	r4, r1, #4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bfb8      	it	lt
 80072f2:	18e4      	addlt	r4, r4, r3
 80072f4:	f000 f8e8 	bl	80074c8 <__malloc_lock>
 80072f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007370 <_free_r+0x90>)
 80072fa:	6813      	ldr	r3, [r2, #0]
 80072fc:	b933      	cbnz	r3, 800730c <_free_r+0x2c>
 80072fe:	6063      	str	r3, [r4, #4]
 8007300:	6014      	str	r4, [r2, #0]
 8007302:	4628      	mov	r0, r5
 8007304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007308:	f000 b8e4 	b.w	80074d4 <__malloc_unlock>
 800730c:	42a3      	cmp	r3, r4
 800730e:	d908      	bls.n	8007322 <_free_r+0x42>
 8007310:	6820      	ldr	r0, [r4, #0]
 8007312:	1821      	adds	r1, r4, r0
 8007314:	428b      	cmp	r3, r1
 8007316:	bf01      	itttt	eq
 8007318:	6819      	ldreq	r1, [r3, #0]
 800731a:	685b      	ldreq	r3, [r3, #4]
 800731c:	1809      	addeq	r1, r1, r0
 800731e:	6021      	streq	r1, [r4, #0]
 8007320:	e7ed      	b.n	80072fe <_free_r+0x1e>
 8007322:	461a      	mov	r2, r3
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	b10b      	cbz	r3, 800732c <_free_r+0x4c>
 8007328:	42a3      	cmp	r3, r4
 800732a:	d9fa      	bls.n	8007322 <_free_r+0x42>
 800732c:	6811      	ldr	r1, [r2, #0]
 800732e:	1850      	adds	r0, r2, r1
 8007330:	42a0      	cmp	r0, r4
 8007332:	d10b      	bne.n	800734c <_free_r+0x6c>
 8007334:	6820      	ldr	r0, [r4, #0]
 8007336:	4401      	add	r1, r0
 8007338:	1850      	adds	r0, r2, r1
 800733a:	4283      	cmp	r3, r0
 800733c:	6011      	str	r1, [r2, #0]
 800733e:	d1e0      	bne.n	8007302 <_free_r+0x22>
 8007340:	6818      	ldr	r0, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	6053      	str	r3, [r2, #4]
 8007346:	4408      	add	r0, r1
 8007348:	6010      	str	r0, [r2, #0]
 800734a:	e7da      	b.n	8007302 <_free_r+0x22>
 800734c:	d902      	bls.n	8007354 <_free_r+0x74>
 800734e:	230c      	movs	r3, #12
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	e7d6      	b.n	8007302 <_free_r+0x22>
 8007354:	6820      	ldr	r0, [r4, #0]
 8007356:	1821      	adds	r1, r4, r0
 8007358:	428b      	cmp	r3, r1
 800735a:	bf04      	itt	eq
 800735c:	6819      	ldreq	r1, [r3, #0]
 800735e:	685b      	ldreq	r3, [r3, #4]
 8007360:	6063      	str	r3, [r4, #4]
 8007362:	bf04      	itt	eq
 8007364:	1809      	addeq	r1, r1, r0
 8007366:	6021      	streq	r1, [r4, #0]
 8007368:	6054      	str	r4, [r2, #4]
 800736a:	e7ca      	b.n	8007302 <_free_r+0x22>
 800736c:	bd38      	pop	{r3, r4, r5, pc}
 800736e:	bf00      	nop
 8007370:	20001bd0 	.word	0x20001bd0

08007374 <malloc>:
 8007374:	4b02      	ldr	r3, [pc, #8]	@ (8007380 <malloc+0xc>)
 8007376:	4601      	mov	r1, r0
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	f000 b825 	b.w	80073c8 <_malloc_r>
 800737e:	bf00      	nop
 8007380:	2000001c 	.word	0x2000001c

08007384 <sbrk_aligned>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	4e0f      	ldr	r6, [pc, #60]	@ (80073c4 <sbrk_aligned+0x40>)
 8007388:	460c      	mov	r4, r1
 800738a:	6831      	ldr	r1, [r6, #0]
 800738c:	4605      	mov	r5, r0
 800738e:	b911      	cbnz	r1, 8007396 <sbrk_aligned+0x12>
 8007390:	f000 fc8a 	bl	8007ca8 <_sbrk_r>
 8007394:	6030      	str	r0, [r6, #0]
 8007396:	4621      	mov	r1, r4
 8007398:	4628      	mov	r0, r5
 800739a:	f000 fc85 	bl	8007ca8 <_sbrk_r>
 800739e:	1c43      	adds	r3, r0, #1
 80073a0:	d103      	bne.n	80073aa <sbrk_aligned+0x26>
 80073a2:	f04f 34ff 	mov.w	r4, #4294967295
 80073a6:	4620      	mov	r0, r4
 80073a8:	bd70      	pop	{r4, r5, r6, pc}
 80073aa:	1cc4      	adds	r4, r0, #3
 80073ac:	f024 0403 	bic.w	r4, r4, #3
 80073b0:	42a0      	cmp	r0, r4
 80073b2:	d0f8      	beq.n	80073a6 <sbrk_aligned+0x22>
 80073b4:	1a21      	subs	r1, r4, r0
 80073b6:	4628      	mov	r0, r5
 80073b8:	f000 fc76 	bl	8007ca8 <_sbrk_r>
 80073bc:	3001      	adds	r0, #1
 80073be:	d1f2      	bne.n	80073a6 <sbrk_aligned+0x22>
 80073c0:	e7ef      	b.n	80073a2 <sbrk_aligned+0x1e>
 80073c2:	bf00      	nop
 80073c4:	20001bcc 	.word	0x20001bcc

080073c8 <_malloc_r>:
 80073c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073cc:	1ccd      	adds	r5, r1, #3
 80073ce:	f025 0503 	bic.w	r5, r5, #3
 80073d2:	3508      	adds	r5, #8
 80073d4:	2d0c      	cmp	r5, #12
 80073d6:	bf38      	it	cc
 80073d8:	250c      	movcc	r5, #12
 80073da:	2d00      	cmp	r5, #0
 80073dc:	4606      	mov	r6, r0
 80073de:	db01      	blt.n	80073e4 <_malloc_r+0x1c>
 80073e0:	42a9      	cmp	r1, r5
 80073e2:	d904      	bls.n	80073ee <_malloc_r+0x26>
 80073e4:	230c      	movs	r3, #12
 80073e6:	6033      	str	r3, [r6, #0]
 80073e8:	2000      	movs	r0, #0
 80073ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074c4 <_malloc_r+0xfc>
 80073f2:	f000 f869 	bl	80074c8 <__malloc_lock>
 80073f6:	f8d8 3000 	ldr.w	r3, [r8]
 80073fa:	461c      	mov	r4, r3
 80073fc:	bb44      	cbnz	r4, 8007450 <_malloc_r+0x88>
 80073fe:	4629      	mov	r1, r5
 8007400:	4630      	mov	r0, r6
 8007402:	f7ff ffbf 	bl	8007384 <sbrk_aligned>
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	4604      	mov	r4, r0
 800740a:	d158      	bne.n	80074be <_malloc_r+0xf6>
 800740c:	f8d8 4000 	ldr.w	r4, [r8]
 8007410:	4627      	mov	r7, r4
 8007412:	2f00      	cmp	r7, #0
 8007414:	d143      	bne.n	800749e <_malloc_r+0xd6>
 8007416:	2c00      	cmp	r4, #0
 8007418:	d04b      	beq.n	80074b2 <_malloc_r+0xea>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	4639      	mov	r1, r7
 800741e:	4630      	mov	r0, r6
 8007420:	eb04 0903 	add.w	r9, r4, r3
 8007424:	f000 fc40 	bl	8007ca8 <_sbrk_r>
 8007428:	4581      	cmp	r9, r0
 800742a:	d142      	bne.n	80074b2 <_malloc_r+0xea>
 800742c:	6821      	ldr	r1, [r4, #0]
 800742e:	1a6d      	subs	r5, r5, r1
 8007430:	4629      	mov	r1, r5
 8007432:	4630      	mov	r0, r6
 8007434:	f7ff ffa6 	bl	8007384 <sbrk_aligned>
 8007438:	3001      	adds	r0, #1
 800743a:	d03a      	beq.n	80074b2 <_malloc_r+0xea>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	442b      	add	r3, r5
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	f8d8 3000 	ldr.w	r3, [r8]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	bb62      	cbnz	r2, 80074a4 <_malloc_r+0xdc>
 800744a:	f8c8 7000 	str.w	r7, [r8]
 800744e:	e00f      	b.n	8007470 <_malloc_r+0xa8>
 8007450:	6822      	ldr	r2, [r4, #0]
 8007452:	1b52      	subs	r2, r2, r5
 8007454:	d420      	bmi.n	8007498 <_malloc_r+0xd0>
 8007456:	2a0b      	cmp	r2, #11
 8007458:	d917      	bls.n	800748a <_malloc_r+0xc2>
 800745a:	1961      	adds	r1, r4, r5
 800745c:	42a3      	cmp	r3, r4
 800745e:	6025      	str	r5, [r4, #0]
 8007460:	bf18      	it	ne
 8007462:	6059      	strne	r1, [r3, #4]
 8007464:	6863      	ldr	r3, [r4, #4]
 8007466:	bf08      	it	eq
 8007468:	f8c8 1000 	streq.w	r1, [r8]
 800746c:	5162      	str	r2, [r4, r5]
 800746e:	604b      	str	r3, [r1, #4]
 8007470:	4630      	mov	r0, r6
 8007472:	f000 f82f 	bl	80074d4 <__malloc_unlock>
 8007476:	f104 000b 	add.w	r0, r4, #11
 800747a:	1d23      	adds	r3, r4, #4
 800747c:	f020 0007 	bic.w	r0, r0, #7
 8007480:	1ac2      	subs	r2, r0, r3
 8007482:	bf1c      	itt	ne
 8007484:	1a1b      	subne	r3, r3, r0
 8007486:	50a3      	strne	r3, [r4, r2]
 8007488:	e7af      	b.n	80073ea <_malloc_r+0x22>
 800748a:	6862      	ldr	r2, [r4, #4]
 800748c:	42a3      	cmp	r3, r4
 800748e:	bf0c      	ite	eq
 8007490:	f8c8 2000 	streq.w	r2, [r8]
 8007494:	605a      	strne	r2, [r3, #4]
 8007496:	e7eb      	b.n	8007470 <_malloc_r+0xa8>
 8007498:	4623      	mov	r3, r4
 800749a:	6864      	ldr	r4, [r4, #4]
 800749c:	e7ae      	b.n	80073fc <_malloc_r+0x34>
 800749e:	463c      	mov	r4, r7
 80074a0:	687f      	ldr	r7, [r7, #4]
 80074a2:	e7b6      	b.n	8007412 <_malloc_r+0x4a>
 80074a4:	461a      	mov	r2, r3
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	42a3      	cmp	r3, r4
 80074aa:	d1fb      	bne.n	80074a4 <_malloc_r+0xdc>
 80074ac:	2300      	movs	r3, #0
 80074ae:	6053      	str	r3, [r2, #4]
 80074b0:	e7de      	b.n	8007470 <_malloc_r+0xa8>
 80074b2:	230c      	movs	r3, #12
 80074b4:	6033      	str	r3, [r6, #0]
 80074b6:	4630      	mov	r0, r6
 80074b8:	f000 f80c 	bl	80074d4 <__malloc_unlock>
 80074bc:	e794      	b.n	80073e8 <_malloc_r+0x20>
 80074be:	6005      	str	r5, [r0, #0]
 80074c0:	e7d6      	b.n	8007470 <_malloc_r+0xa8>
 80074c2:	bf00      	nop
 80074c4:	20001bd0 	.word	0x20001bd0

080074c8 <__malloc_lock>:
 80074c8:	4801      	ldr	r0, [pc, #4]	@ (80074d0 <__malloc_lock+0x8>)
 80074ca:	f7ff bef8 	b.w	80072be <__retarget_lock_acquire_recursive>
 80074ce:	bf00      	nop
 80074d0:	20001bc8 	.word	0x20001bc8

080074d4 <__malloc_unlock>:
 80074d4:	4801      	ldr	r0, [pc, #4]	@ (80074dc <__malloc_unlock+0x8>)
 80074d6:	f7ff bef3 	b.w	80072c0 <__retarget_lock_release_recursive>
 80074da:	bf00      	nop
 80074dc:	20001bc8 	.word	0x20001bc8

080074e0 <__ssputs_r>:
 80074e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e4:	688e      	ldr	r6, [r1, #8]
 80074e6:	461f      	mov	r7, r3
 80074e8:	42be      	cmp	r6, r7
 80074ea:	680b      	ldr	r3, [r1, #0]
 80074ec:	4682      	mov	sl, r0
 80074ee:	460c      	mov	r4, r1
 80074f0:	4690      	mov	r8, r2
 80074f2:	d82d      	bhi.n	8007550 <__ssputs_r+0x70>
 80074f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074fc:	d026      	beq.n	800754c <__ssputs_r+0x6c>
 80074fe:	6965      	ldr	r5, [r4, #20]
 8007500:	6909      	ldr	r1, [r1, #16]
 8007502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007506:	eba3 0901 	sub.w	r9, r3, r1
 800750a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800750e:	1c7b      	adds	r3, r7, #1
 8007510:	444b      	add	r3, r9
 8007512:	106d      	asrs	r5, r5, #1
 8007514:	429d      	cmp	r5, r3
 8007516:	bf38      	it	cc
 8007518:	461d      	movcc	r5, r3
 800751a:	0553      	lsls	r3, r2, #21
 800751c:	d527      	bpl.n	800756e <__ssputs_r+0x8e>
 800751e:	4629      	mov	r1, r5
 8007520:	f7ff ff52 	bl	80073c8 <_malloc_r>
 8007524:	4606      	mov	r6, r0
 8007526:	b360      	cbz	r0, 8007582 <__ssputs_r+0xa2>
 8007528:	6921      	ldr	r1, [r4, #16]
 800752a:	464a      	mov	r2, r9
 800752c:	f7ff fec9 	bl	80072c2 <memcpy>
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800753a:	81a3      	strh	r3, [r4, #12]
 800753c:	6126      	str	r6, [r4, #16]
 800753e:	6165      	str	r5, [r4, #20]
 8007540:	444e      	add	r6, r9
 8007542:	eba5 0509 	sub.w	r5, r5, r9
 8007546:	6026      	str	r6, [r4, #0]
 8007548:	60a5      	str	r5, [r4, #8]
 800754a:	463e      	mov	r6, r7
 800754c:	42be      	cmp	r6, r7
 800754e:	d900      	bls.n	8007552 <__ssputs_r+0x72>
 8007550:	463e      	mov	r6, r7
 8007552:	6820      	ldr	r0, [r4, #0]
 8007554:	4632      	mov	r2, r6
 8007556:	4641      	mov	r1, r8
 8007558:	f000 fb7a 	bl	8007c50 <memmove>
 800755c:	68a3      	ldr	r3, [r4, #8]
 800755e:	1b9b      	subs	r3, r3, r6
 8007560:	60a3      	str	r3, [r4, #8]
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	4433      	add	r3, r6
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	2000      	movs	r0, #0
 800756a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756e:	462a      	mov	r2, r5
 8007570:	f000 fbaa 	bl	8007cc8 <_realloc_r>
 8007574:	4606      	mov	r6, r0
 8007576:	2800      	cmp	r0, #0
 8007578:	d1e0      	bne.n	800753c <__ssputs_r+0x5c>
 800757a:	6921      	ldr	r1, [r4, #16]
 800757c:	4650      	mov	r0, sl
 800757e:	f7ff feaf 	bl	80072e0 <_free_r>
 8007582:	230c      	movs	r3, #12
 8007584:	f8ca 3000 	str.w	r3, [sl]
 8007588:	89a3      	ldrh	r3, [r4, #12]
 800758a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	f04f 30ff 	mov.w	r0, #4294967295
 8007594:	e7e9      	b.n	800756a <__ssputs_r+0x8a>
	...

08007598 <_svfiprintf_r>:
 8007598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759c:	4698      	mov	r8, r3
 800759e:	898b      	ldrh	r3, [r1, #12]
 80075a0:	061b      	lsls	r3, r3, #24
 80075a2:	b09d      	sub	sp, #116	@ 0x74
 80075a4:	4607      	mov	r7, r0
 80075a6:	460d      	mov	r5, r1
 80075a8:	4614      	mov	r4, r2
 80075aa:	d510      	bpl.n	80075ce <_svfiprintf_r+0x36>
 80075ac:	690b      	ldr	r3, [r1, #16]
 80075ae:	b973      	cbnz	r3, 80075ce <_svfiprintf_r+0x36>
 80075b0:	2140      	movs	r1, #64	@ 0x40
 80075b2:	f7ff ff09 	bl	80073c8 <_malloc_r>
 80075b6:	6028      	str	r0, [r5, #0]
 80075b8:	6128      	str	r0, [r5, #16]
 80075ba:	b930      	cbnz	r0, 80075ca <_svfiprintf_r+0x32>
 80075bc:	230c      	movs	r3, #12
 80075be:	603b      	str	r3, [r7, #0]
 80075c0:	f04f 30ff 	mov.w	r0, #4294967295
 80075c4:	b01d      	add	sp, #116	@ 0x74
 80075c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ca:	2340      	movs	r3, #64	@ 0x40
 80075cc:	616b      	str	r3, [r5, #20]
 80075ce:	2300      	movs	r3, #0
 80075d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80075d2:	2320      	movs	r3, #32
 80075d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075dc:	2330      	movs	r3, #48	@ 0x30
 80075de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800777c <_svfiprintf_r+0x1e4>
 80075e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075e6:	f04f 0901 	mov.w	r9, #1
 80075ea:	4623      	mov	r3, r4
 80075ec:	469a      	mov	sl, r3
 80075ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075f2:	b10a      	cbz	r2, 80075f8 <_svfiprintf_r+0x60>
 80075f4:	2a25      	cmp	r2, #37	@ 0x25
 80075f6:	d1f9      	bne.n	80075ec <_svfiprintf_r+0x54>
 80075f8:	ebba 0b04 	subs.w	fp, sl, r4
 80075fc:	d00b      	beq.n	8007616 <_svfiprintf_r+0x7e>
 80075fe:	465b      	mov	r3, fp
 8007600:	4622      	mov	r2, r4
 8007602:	4629      	mov	r1, r5
 8007604:	4638      	mov	r0, r7
 8007606:	f7ff ff6b 	bl	80074e0 <__ssputs_r>
 800760a:	3001      	adds	r0, #1
 800760c:	f000 80a7 	beq.w	800775e <_svfiprintf_r+0x1c6>
 8007610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007612:	445a      	add	r2, fp
 8007614:	9209      	str	r2, [sp, #36]	@ 0x24
 8007616:	f89a 3000 	ldrb.w	r3, [sl]
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 809f 	beq.w	800775e <_svfiprintf_r+0x1c6>
 8007620:	2300      	movs	r3, #0
 8007622:	f04f 32ff 	mov.w	r2, #4294967295
 8007626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800762a:	f10a 0a01 	add.w	sl, sl, #1
 800762e:	9304      	str	r3, [sp, #16]
 8007630:	9307      	str	r3, [sp, #28]
 8007632:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007636:	931a      	str	r3, [sp, #104]	@ 0x68
 8007638:	4654      	mov	r4, sl
 800763a:	2205      	movs	r2, #5
 800763c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007640:	484e      	ldr	r0, [pc, #312]	@ (800777c <_svfiprintf_r+0x1e4>)
 8007642:	f7f8 fdcd 	bl	80001e0 <memchr>
 8007646:	9a04      	ldr	r2, [sp, #16]
 8007648:	b9d8      	cbnz	r0, 8007682 <_svfiprintf_r+0xea>
 800764a:	06d0      	lsls	r0, r2, #27
 800764c:	bf44      	itt	mi
 800764e:	2320      	movmi	r3, #32
 8007650:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007654:	0711      	lsls	r1, r2, #28
 8007656:	bf44      	itt	mi
 8007658:	232b      	movmi	r3, #43	@ 0x2b
 800765a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800765e:	f89a 3000 	ldrb.w	r3, [sl]
 8007662:	2b2a      	cmp	r3, #42	@ 0x2a
 8007664:	d015      	beq.n	8007692 <_svfiprintf_r+0xfa>
 8007666:	9a07      	ldr	r2, [sp, #28]
 8007668:	4654      	mov	r4, sl
 800766a:	2000      	movs	r0, #0
 800766c:	f04f 0c0a 	mov.w	ip, #10
 8007670:	4621      	mov	r1, r4
 8007672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007676:	3b30      	subs	r3, #48	@ 0x30
 8007678:	2b09      	cmp	r3, #9
 800767a:	d94b      	bls.n	8007714 <_svfiprintf_r+0x17c>
 800767c:	b1b0      	cbz	r0, 80076ac <_svfiprintf_r+0x114>
 800767e:	9207      	str	r2, [sp, #28]
 8007680:	e014      	b.n	80076ac <_svfiprintf_r+0x114>
 8007682:	eba0 0308 	sub.w	r3, r0, r8
 8007686:	fa09 f303 	lsl.w	r3, r9, r3
 800768a:	4313      	orrs	r3, r2
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	46a2      	mov	sl, r4
 8007690:	e7d2      	b.n	8007638 <_svfiprintf_r+0xa0>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	1d19      	adds	r1, r3, #4
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	9103      	str	r1, [sp, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	bfbb      	ittet	lt
 800769e:	425b      	neglt	r3, r3
 80076a0:	f042 0202 	orrlt.w	r2, r2, #2
 80076a4:	9307      	strge	r3, [sp, #28]
 80076a6:	9307      	strlt	r3, [sp, #28]
 80076a8:	bfb8      	it	lt
 80076aa:	9204      	strlt	r2, [sp, #16]
 80076ac:	7823      	ldrb	r3, [r4, #0]
 80076ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80076b0:	d10a      	bne.n	80076c8 <_svfiprintf_r+0x130>
 80076b2:	7863      	ldrb	r3, [r4, #1]
 80076b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80076b6:	d132      	bne.n	800771e <_svfiprintf_r+0x186>
 80076b8:	9b03      	ldr	r3, [sp, #12]
 80076ba:	1d1a      	adds	r2, r3, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	9203      	str	r2, [sp, #12]
 80076c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076c4:	3402      	adds	r4, #2
 80076c6:	9305      	str	r3, [sp, #20]
 80076c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800778c <_svfiprintf_r+0x1f4>
 80076cc:	7821      	ldrb	r1, [r4, #0]
 80076ce:	2203      	movs	r2, #3
 80076d0:	4650      	mov	r0, sl
 80076d2:	f7f8 fd85 	bl	80001e0 <memchr>
 80076d6:	b138      	cbz	r0, 80076e8 <_svfiprintf_r+0x150>
 80076d8:	9b04      	ldr	r3, [sp, #16]
 80076da:	eba0 000a 	sub.w	r0, r0, sl
 80076de:	2240      	movs	r2, #64	@ 0x40
 80076e0:	4082      	lsls	r2, r0
 80076e2:	4313      	orrs	r3, r2
 80076e4:	3401      	adds	r4, #1
 80076e6:	9304      	str	r3, [sp, #16]
 80076e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ec:	4824      	ldr	r0, [pc, #144]	@ (8007780 <_svfiprintf_r+0x1e8>)
 80076ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076f2:	2206      	movs	r2, #6
 80076f4:	f7f8 fd74 	bl	80001e0 <memchr>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d036      	beq.n	800776a <_svfiprintf_r+0x1d2>
 80076fc:	4b21      	ldr	r3, [pc, #132]	@ (8007784 <_svfiprintf_r+0x1ec>)
 80076fe:	bb1b      	cbnz	r3, 8007748 <_svfiprintf_r+0x1b0>
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	3307      	adds	r3, #7
 8007704:	f023 0307 	bic.w	r3, r3, #7
 8007708:	3308      	adds	r3, #8
 800770a:	9303      	str	r3, [sp, #12]
 800770c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800770e:	4433      	add	r3, r6
 8007710:	9309      	str	r3, [sp, #36]	@ 0x24
 8007712:	e76a      	b.n	80075ea <_svfiprintf_r+0x52>
 8007714:	fb0c 3202 	mla	r2, ip, r2, r3
 8007718:	460c      	mov	r4, r1
 800771a:	2001      	movs	r0, #1
 800771c:	e7a8      	b.n	8007670 <_svfiprintf_r+0xd8>
 800771e:	2300      	movs	r3, #0
 8007720:	3401      	adds	r4, #1
 8007722:	9305      	str	r3, [sp, #20]
 8007724:	4619      	mov	r1, r3
 8007726:	f04f 0c0a 	mov.w	ip, #10
 800772a:	4620      	mov	r0, r4
 800772c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007730:	3a30      	subs	r2, #48	@ 0x30
 8007732:	2a09      	cmp	r2, #9
 8007734:	d903      	bls.n	800773e <_svfiprintf_r+0x1a6>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0c6      	beq.n	80076c8 <_svfiprintf_r+0x130>
 800773a:	9105      	str	r1, [sp, #20]
 800773c:	e7c4      	b.n	80076c8 <_svfiprintf_r+0x130>
 800773e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007742:	4604      	mov	r4, r0
 8007744:	2301      	movs	r3, #1
 8007746:	e7f0      	b.n	800772a <_svfiprintf_r+0x192>
 8007748:	ab03      	add	r3, sp, #12
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	462a      	mov	r2, r5
 800774e:	4b0e      	ldr	r3, [pc, #56]	@ (8007788 <_svfiprintf_r+0x1f0>)
 8007750:	a904      	add	r1, sp, #16
 8007752:	4638      	mov	r0, r7
 8007754:	f3af 8000 	nop.w
 8007758:	1c42      	adds	r2, r0, #1
 800775a:	4606      	mov	r6, r0
 800775c:	d1d6      	bne.n	800770c <_svfiprintf_r+0x174>
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	065b      	lsls	r3, r3, #25
 8007762:	f53f af2d 	bmi.w	80075c0 <_svfiprintf_r+0x28>
 8007766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007768:	e72c      	b.n	80075c4 <_svfiprintf_r+0x2c>
 800776a:	ab03      	add	r3, sp, #12
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	462a      	mov	r2, r5
 8007770:	4b05      	ldr	r3, [pc, #20]	@ (8007788 <_svfiprintf_r+0x1f0>)
 8007772:	a904      	add	r1, sp, #16
 8007774:	4638      	mov	r0, r7
 8007776:	f000 f879 	bl	800786c <_printf_i>
 800777a:	e7ed      	b.n	8007758 <_svfiprintf_r+0x1c0>
 800777c:	08007f44 	.word	0x08007f44
 8007780:	08007f4e 	.word	0x08007f4e
 8007784:	00000000 	.word	0x00000000
 8007788:	080074e1 	.word	0x080074e1
 800778c:	08007f4a 	.word	0x08007f4a

08007790 <_printf_common>:
 8007790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	4616      	mov	r6, r2
 8007796:	4698      	mov	r8, r3
 8007798:	688a      	ldr	r2, [r1, #8]
 800779a:	690b      	ldr	r3, [r1, #16]
 800779c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077a0:	4293      	cmp	r3, r2
 80077a2:	bfb8      	it	lt
 80077a4:	4613      	movlt	r3, r2
 80077a6:	6033      	str	r3, [r6, #0]
 80077a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077ac:	4607      	mov	r7, r0
 80077ae:	460c      	mov	r4, r1
 80077b0:	b10a      	cbz	r2, 80077b6 <_printf_common+0x26>
 80077b2:	3301      	adds	r3, #1
 80077b4:	6033      	str	r3, [r6, #0]
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	0699      	lsls	r1, r3, #26
 80077ba:	bf42      	ittt	mi
 80077bc:	6833      	ldrmi	r3, [r6, #0]
 80077be:	3302      	addmi	r3, #2
 80077c0:	6033      	strmi	r3, [r6, #0]
 80077c2:	6825      	ldr	r5, [r4, #0]
 80077c4:	f015 0506 	ands.w	r5, r5, #6
 80077c8:	d106      	bne.n	80077d8 <_printf_common+0x48>
 80077ca:	f104 0a19 	add.w	sl, r4, #25
 80077ce:	68e3      	ldr	r3, [r4, #12]
 80077d0:	6832      	ldr	r2, [r6, #0]
 80077d2:	1a9b      	subs	r3, r3, r2
 80077d4:	42ab      	cmp	r3, r5
 80077d6:	dc26      	bgt.n	8007826 <_printf_common+0x96>
 80077d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077dc:	6822      	ldr	r2, [r4, #0]
 80077de:	3b00      	subs	r3, #0
 80077e0:	bf18      	it	ne
 80077e2:	2301      	movne	r3, #1
 80077e4:	0692      	lsls	r2, r2, #26
 80077e6:	d42b      	bmi.n	8007840 <_printf_common+0xb0>
 80077e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077ec:	4641      	mov	r1, r8
 80077ee:	4638      	mov	r0, r7
 80077f0:	47c8      	blx	r9
 80077f2:	3001      	adds	r0, #1
 80077f4:	d01e      	beq.n	8007834 <_printf_common+0xa4>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	6922      	ldr	r2, [r4, #16]
 80077fa:	f003 0306 	and.w	r3, r3, #6
 80077fe:	2b04      	cmp	r3, #4
 8007800:	bf02      	ittt	eq
 8007802:	68e5      	ldreq	r5, [r4, #12]
 8007804:	6833      	ldreq	r3, [r6, #0]
 8007806:	1aed      	subeq	r5, r5, r3
 8007808:	68a3      	ldr	r3, [r4, #8]
 800780a:	bf0c      	ite	eq
 800780c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007810:	2500      	movne	r5, #0
 8007812:	4293      	cmp	r3, r2
 8007814:	bfc4      	itt	gt
 8007816:	1a9b      	subgt	r3, r3, r2
 8007818:	18ed      	addgt	r5, r5, r3
 800781a:	2600      	movs	r6, #0
 800781c:	341a      	adds	r4, #26
 800781e:	42b5      	cmp	r5, r6
 8007820:	d11a      	bne.n	8007858 <_printf_common+0xc8>
 8007822:	2000      	movs	r0, #0
 8007824:	e008      	b.n	8007838 <_printf_common+0xa8>
 8007826:	2301      	movs	r3, #1
 8007828:	4652      	mov	r2, sl
 800782a:	4641      	mov	r1, r8
 800782c:	4638      	mov	r0, r7
 800782e:	47c8      	blx	r9
 8007830:	3001      	adds	r0, #1
 8007832:	d103      	bne.n	800783c <_printf_common+0xac>
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783c:	3501      	adds	r5, #1
 800783e:	e7c6      	b.n	80077ce <_printf_common+0x3e>
 8007840:	18e1      	adds	r1, r4, r3
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	2030      	movs	r0, #48	@ 0x30
 8007846:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800784a:	4422      	add	r2, r4
 800784c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007854:	3302      	adds	r3, #2
 8007856:	e7c7      	b.n	80077e8 <_printf_common+0x58>
 8007858:	2301      	movs	r3, #1
 800785a:	4622      	mov	r2, r4
 800785c:	4641      	mov	r1, r8
 800785e:	4638      	mov	r0, r7
 8007860:	47c8      	blx	r9
 8007862:	3001      	adds	r0, #1
 8007864:	d0e6      	beq.n	8007834 <_printf_common+0xa4>
 8007866:	3601      	adds	r6, #1
 8007868:	e7d9      	b.n	800781e <_printf_common+0x8e>
	...

0800786c <_printf_i>:
 800786c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007870:	7e0f      	ldrb	r7, [r1, #24]
 8007872:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007874:	2f78      	cmp	r7, #120	@ 0x78
 8007876:	4691      	mov	r9, r2
 8007878:	4680      	mov	r8, r0
 800787a:	460c      	mov	r4, r1
 800787c:	469a      	mov	sl, r3
 800787e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007882:	d807      	bhi.n	8007894 <_printf_i+0x28>
 8007884:	2f62      	cmp	r7, #98	@ 0x62
 8007886:	d80a      	bhi.n	800789e <_printf_i+0x32>
 8007888:	2f00      	cmp	r7, #0
 800788a:	f000 80d2 	beq.w	8007a32 <_printf_i+0x1c6>
 800788e:	2f58      	cmp	r7, #88	@ 0x58
 8007890:	f000 80b9 	beq.w	8007a06 <_printf_i+0x19a>
 8007894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007898:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800789c:	e03a      	b.n	8007914 <_printf_i+0xa8>
 800789e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078a2:	2b15      	cmp	r3, #21
 80078a4:	d8f6      	bhi.n	8007894 <_printf_i+0x28>
 80078a6:	a101      	add	r1, pc, #4	@ (adr r1, 80078ac <_printf_i+0x40>)
 80078a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078ac:	08007905 	.word	0x08007905
 80078b0:	08007919 	.word	0x08007919
 80078b4:	08007895 	.word	0x08007895
 80078b8:	08007895 	.word	0x08007895
 80078bc:	08007895 	.word	0x08007895
 80078c0:	08007895 	.word	0x08007895
 80078c4:	08007919 	.word	0x08007919
 80078c8:	08007895 	.word	0x08007895
 80078cc:	08007895 	.word	0x08007895
 80078d0:	08007895 	.word	0x08007895
 80078d4:	08007895 	.word	0x08007895
 80078d8:	08007a19 	.word	0x08007a19
 80078dc:	08007943 	.word	0x08007943
 80078e0:	080079d3 	.word	0x080079d3
 80078e4:	08007895 	.word	0x08007895
 80078e8:	08007895 	.word	0x08007895
 80078ec:	08007a3b 	.word	0x08007a3b
 80078f0:	08007895 	.word	0x08007895
 80078f4:	08007943 	.word	0x08007943
 80078f8:	08007895 	.word	0x08007895
 80078fc:	08007895 	.word	0x08007895
 8007900:	080079db 	.word	0x080079db
 8007904:	6833      	ldr	r3, [r6, #0]
 8007906:	1d1a      	adds	r2, r3, #4
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6032      	str	r2, [r6, #0]
 800790c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007910:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007914:	2301      	movs	r3, #1
 8007916:	e09d      	b.n	8007a54 <_printf_i+0x1e8>
 8007918:	6833      	ldr	r3, [r6, #0]
 800791a:	6820      	ldr	r0, [r4, #0]
 800791c:	1d19      	adds	r1, r3, #4
 800791e:	6031      	str	r1, [r6, #0]
 8007920:	0606      	lsls	r6, r0, #24
 8007922:	d501      	bpl.n	8007928 <_printf_i+0xbc>
 8007924:	681d      	ldr	r5, [r3, #0]
 8007926:	e003      	b.n	8007930 <_printf_i+0xc4>
 8007928:	0645      	lsls	r5, r0, #25
 800792a:	d5fb      	bpl.n	8007924 <_printf_i+0xb8>
 800792c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007930:	2d00      	cmp	r5, #0
 8007932:	da03      	bge.n	800793c <_printf_i+0xd0>
 8007934:	232d      	movs	r3, #45	@ 0x2d
 8007936:	426d      	negs	r5, r5
 8007938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800793c:	4859      	ldr	r0, [pc, #356]	@ (8007aa4 <_printf_i+0x238>)
 800793e:	230a      	movs	r3, #10
 8007940:	e011      	b.n	8007966 <_printf_i+0xfa>
 8007942:	6821      	ldr	r1, [r4, #0]
 8007944:	6833      	ldr	r3, [r6, #0]
 8007946:	0608      	lsls	r0, r1, #24
 8007948:	f853 5b04 	ldr.w	r5, [r3], #4
 800794c:	d402      	bmi.n	8007954 <_printf_i+0xe8>
 800794e:	0649      	lsls	r1, r1, #25
 8007950:	bf48      	it	mi
 8007952:	b2ad      	uxthmi	r5, r5
 8007954:	2f6f      	cmp	r7, #111	@ 0x6f
 8007956:	4853      	ldr	r0, [pc, #332]	@ (8007aa4 <_printf_i+0x238>)
 8007958:	6033      	str	r3, [r6, #0]
 800795a:	bf14      	ite	ne
 800795c:	230a      	movne	r3, #10
 800795e:	2308      	moveq	r3, #8
 8007960:	2100      	movs	r1, #0
 8007962:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007966:	6866      	ldr	r6, [r4, #4]
 8007968:	60a6      	str	r6, [r4, #8]
 800796a:	2e00      	cmp	r6, #0
 800796c:	bfa2      	ittt	ge
 800796e:	6821      	ldrge	r1, [r4, #0]
 8007970:	f021 0104 	bicge.w	r1, r1, #4
 8007974:	6021      	strge	r1, [r4, #0]
 8007976:	b90d      	cbnz	r5, 800797c <_printf_i+0x110>
 8007978:	2e00      	cmp	r6, #0
 800797a:	d04b      	beq.n	8007a14 <_printf_i+0x1a8>
 800797c:	4616      	mov	r6, r2
 800797e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007982:	fb03 5711 	mls	r7, r3, r1, r5
 8007986:	5dc7      	ldrb	r7, [r0, r7]
 8007988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800798c:	462f      	mov	r7, r5
 800798e:	42bb      	cmp	r3, r7
 8007990:	460d      	mov	r5, r1
 8007992:	d9f4      	bls.n	800797e <_printf_i+0x112>
 8007994:	2b08      	cmp	r3, #8
 8007996:	d10b      	bne.n	80079b0 <_printf_i+0x144>
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	07df      	lsls	r7, r3, #31
 800799c:	d508      	bpl.n	80079b0 <_printf_i+0x144>
 800799e:	6923      	ldr	r3, [r4, #16]
 80079a0:	6861      	ldr	r1, [r4, #4]
 80079a2:	4299      	cmp	r1, r3
 80079a4:	bfde      	ittt	le
 80079a6:	2330      	movle	r3, #48	@ 0x30
 80079a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079b0:	1b92      	subs	r2, r2, r6
 80079b2:	6122      	str	r2, [r4, #16]
 80079b4:	f8cd a000 	str.w	sl, [sp]
 80079b8:	464b      	mov	r3, r9
 80079ba:	aa03      	add	r2, sp, #12
 80079bc:	4621      	mov	r1, r4
 80079be:	4640      	mov	r0, r8
 80079c0:	f7ff fee6 	bl	8007790 <_printf_common>
 80079c4:	3001      	adds	r0, #1
 80079c6:	d14a      	bne.n	8007a5e <_printf_i+0x1f2>
 80079c8:	f04f 30ff 	mov.w	r0, #4294967295
 80079cc:	b004      	add	sp, #16
 80079ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	f043 0320 	orr.w	r3, r3, #32
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	4833      	ldr	r0, [pc, #204]	@ (8007aa8 <_printf_i+0x23c>)
 80079dc:	2778      	movs	r7, #120	@ 0x78
 80079de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	6831      	ldr	r1, [r6, #0]
 80079e6:	061f      	lsls	r7, r3, #24
 80079e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80079ec:	d402      	bmi.n	80079f4 <_printf_i+0x188>
 80079ee:	065f      	lsls	r7, r3, #25
 80079f0:	bf48      	it	mi
 80079f2:	b2ad      	uxthmi	r5, r5
 80079f4:	6031      	str	r1, [r6, #0]
 80079f6:	07d9      	lsls	r1, r3, #31
 80079f8:	bf44      	itt	mi
 80079fa:	f043 0320 	orrmi.w	r3, r3, #32
 80079fe:	6023      	strmi	r3, [r4, #0]
 8007a00:	b11d      	cbz	r5, 8007a0a <_printf_i+0x19e>
 8007a02:	2310      	movs	r3, #16
 8007a04:	e7ac      	b.n	8007960 <_printf_i+0xf4>
 8007a06:	4827      	ldr	r0, [pc, #156]	@ (8007aa4 <_printf_i+0x238>)
 8007a08:	e7e9      	b.n	80079de <_printf_i+0x172>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	f023 0320 	bic.w	r3, r3, #32
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	e7f6      	b.n	8007a02 <_printf_i+0x196>
 8007a14:	4616      	mov	r6, r2
 8007a16:	e7bd      	b.n	8007994 <_printf_i+0x128>
 8007a18:	6833      	ldr	r3, [r6, #0]
 8007a1a:	6825      	ldr	r5, [r4, #0]
 8007a1c:	6961      	ldr	r1, [r4, #20]
 8007a1e:	1d18      	adds	r0, r3, #4
 8007a20:	6030      	str	r0, [r6, #0]
 8007a22:	062e      	lsls	r6, r5, #24
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	d501      	bpl.n	8007a2c <_printf_i+0x1c0>
 8007a28:	6019      	str	r1, [r3, #0]
 8007a2a:	e002      	b.n	8007a32 <_printf_i+0x1c6>
 8007a2c:	0668      	lsls	r0, r5, #25
 8007a2e:	d5fb      	bpl.n	8007a28 <_printf_i+0x1bc>
 8007a30:	8019      	strh	r1, [r3, #0]
 8007a32:	2300      	movs	r3, #0
 8007a34:	6123      	str	r3, [r4, #16]
 8007a36:	4616      	mov	r6, r2
 8007a38:	e7bc      	b.n	80079b4 <_printf_i+0x148>
 8007a3a:	6833      	ldr	r3, [r6, #0]
 8007a3c:	1d1a      	adds	r2, r3, #4
 8007a3e:	6032      	str	r2, [r6, #0]
 8007a40:	681e      	ldr	r6, [r3, #0]
 8007a42:	6862      	ldr	r2, [r4, #4]
 8007a44:	2100      	movs	r1, #0
 8007a46:	4630      	mov	r0, r6
 8007a48:	f7f8 fbca 	bl	80001e0 <memchr>
 8007a4c:	b108      	cbz	r0, 8007a52 <_printf_i+0x1e6>
 8007a4e:	1b80      	subs	r0, r0, r6
 8007a50:	6060      	str	r0, [r4, #4]
 8007a52:	6863      	ldr	r3, [r4, #4]
 8007a54:	6123      	str	r3, [r4, #16]
 8007a56:	2300      	movs	r3, #0
 8007a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a5c:	e7aa      	b.n	80079b4 <_printf_i+0x148>
 8007a5e:	6923      	ldr	r3, [r4, #16]
 8007a60:	4632      	mov	r2, r6
 8007a62:	4649      	mov	r1, r9
 8007a64:	4640      	mov	r0, r8
 8007a66:	47d0      	blx	sl
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d0ad      	beq.n	80079c8 <_printf_i+0x15c>
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	079b      	lsls	r3, r3, #30
 8007a70:	d413      	bmi.n	8007a9a <_printf_i+0x22e>
 8007a72:	68e0      	ldr	r0, [r4, #12]
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	4298      	cmp	r0, r3
 8007a78:	bfb8      	it	lt
 8007a7a:	4618      	movlt	r0, r3
 8007a7c:	e7a6      	b.n	80079cc <_printf_i+0x160>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	4632      	mov	r2, r6
 8007a82:	4649      	mov	r1, r9
 8007a84:	4640      	mov	r0, r8
 8007a86:	47d0      	blx	sl
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d09d      	beq.n	80079c8 <_printf_i+0x15c>
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	68e3      	ldr	r3, [r4, #12]
 8007a90:	9903      	ldr	r1, [sp, #12]
 8007a92:	1a5b      	subs	r3, r3, r1
 8007a94:	42ab      	cmp	r3, r5
 8007a96:	dcf2      	bgt.n	8007a7e <_printf_i+0x212>
 8007a98:	e7eb      	b.n	8007a72 <_printf_i+0x206>
 8007a9a:	2500      	movs	r5, #0
 8007a9c:	f104 0619 	add.w	r6, r4, #25
 8007aa0:	e7f5      	b.n	8007a8e <_printf_i+0x222>
 8007aa2:	bf00      	nop
 8007aa4:	08007f55 	.word	0x08007f55
 8007aa8:	08007f66 	.word	0x08007f66

08007aac <__sflush_r>:
 8007aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab4:	0716      	lsls	r6, r2, #28
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	d454      	bmi.n	8007b66 <__sflush_r+0xba>
 8007abc:	684b      	ldr	r3, [r1, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	dc02      	bgt.n	8007ac8 <__sflush_r+0x1c>
 8007ac2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	dd48      	ble.n	8007b5a <__sflush_r+0xae>
 8007ac8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007aca:	2e00      	cmp	r6, #0
 8007acc:	d045      	beq.n	8007b5a <__sflush_r+0xae>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ad4:	682f      	ldr	r7, [r5, #0]
 8007ad6:	6a21      	ldr	r1, [r4, #32]
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	d030      	beq.n	8007b3e <__sflush_r+0x92>
 8007adc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	0759      	lsls	r1, r3, #29
 8007ae2:	d505      	bpl.n	8007af0 <__sflush_r+0x44>
 8007ae4:	6863      	ldr	r3, [r4, #4]
 8007ae6:	1ad2      	subs	r2, r2, r3
 8007ae8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007aea:	b10b      	cbz	r3, 8007af0 <__sflush_r+0x44>
 8007aec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007aee:	1ad2      	subs	r2, r2, r3
 8007af0:	2300      	movs	r3, #0
 8007af2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007af4:	6a21      	ldr	r1, [r4, #32]
 8007af6:	4628      	mov	r0, r5
 8007af8:	47b0      	blx	r6
 8007afa:	1c43      	adds	r3, r0, #1
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	d106      	bne.n	8007b0e <__sflush_r+0x62>
 8007b00:	6829      	ldr	r1, [r5, #0]
 8007b02:	291d      	cmp	r1, #29
 8007b04:	d82b      	bhi.n	8007b5e <__sflush_r+0xb2>
 8007b06:	4a2a      	ldr	r2, [pc, #168]	@ (8007bb0 <__sflush_r+0x104>)
 8007b08:	410a      	asrs	r2, r1
 8007b0a:	07d6      	lsls	r6, r2, #31
 8007b0c:	d427      	bmi.n	8007b5e <__sflush_r+0xb2>
 8007b0e:	2200      	movs	r2, #0
 8007b10:	6062      	str	r2, [r4, #4]
 8007b12:	04d9      	lsls	r1, r3, #19
 8007b14:	6922      	ldr	r2, [r4, #16]
 8007b16:	6022      	str	r2, [r4, #0]
 8007b18:	d504      	bpl.n	8007b24 <__sflush_r+0x78>
 8007b1a:	1c42      	adds	r2, r0, #1
 8007b1c:	d101      	bne.n	8007b22 <__sflush_r+0x76>
 8007b1e:	682b      	ldr	r3, [r5, #0]
 8007b20:	b903      	cbnz	r3, 8007b24 <__sflush_r+0x78>
 8007b22:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b26:	602f      	str	r7, [r5, #0]
 8007b28:	b1b9      	cbz	r1, 8007b5a <__sflush_r+0xae>
 8007b2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b2e:	4299      	cmp	r1, r3
 8007b30:	d002      	beq.n	8007b38 <__sflush_r+0x8c>
 8007b32:	4628      	mov	r0, r5
 8007b34:	f7ff fbd4 	bl	80072e0 <_free_r>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b3c:	e00d      	b.n	8007b5a <__sflush_r+0xae>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4628      	mov	r0, r5
 8007b42:	47b0      	blx	r6
 8007b44:	4602      	mov	r2, r0
 8007b46:	1c50      	adds	r0, r2, #1
 8007b48:	d1c9      	bne.n	8007ade <__sflush_r+0x32>
 8007b4a:	682b      	ldr	r3, [r5, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0c6      	beq.n	8007ade <__sflush_r+0x32>
 8007b50:	2b1d      	cmp	r3, #29
 8007b52:	d001      	beq.n	8007b58 <__sflush_r+0xac>
 8007b54:	2b16      	cmp	r3, #22
 8007b56:	d11e      	bne.n	8007b96 <__sflush_r+0xea>
 8007b58:	602f      	str	r7, [r5, #0]
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	e022      	b.n	8007ba4 <__sflush_r+0xf8>
 8007b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b62:	b21b      	sxth	r3, r3
 8007b64:	e01b      	b.n	8007b9e <__sflush_r+0xf2>
 8007b66:	690f      	ldr	r7, [r1, #16]
 8007b68:	2f00      	cmp	r7, #0
 8007b6a:	d0f6      	beq.n	8007b5a <__sflush_r+0xae>
 8007b6c:	0793      	lsls	r3, r2, #30
 8007b6e:	680e      	ldr	r6, [r1, #0]
 8007b70:	bf08      	it	eq
 8007b72:	694b      	ldreq	r3, [r1, #20]
 8007b74:	600f      	str	r7, [r1, #0]
 8007b76:	bf18      	it	ne
 8007b78:	2300      	movne	r3, #0
 8007b7a:	eba6 0807 	sub.w	r8, r6, r7
 8007b7e:	608b      	str	r3, [r1, #8]
 8007b80:	f1b8 0f00 	cmp.w	r8, #0
 8007b84:	dde9      	ble.n	8007b5a <__sflush_r+0xae>
 8007b86:	6a21      	ldr	r1, [r4, #32]
 8007b88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b8a:	4643      	mov	r3, r8
 8007b8c:	463a      	mov	r2, r7
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b0      	blx	r6
 8007b92:	2800      	cmp	r0, #0
 8007b94:	dc08      	bgt.n	8007ba8 <__sflush_r+0xfc>
 8007b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b9e:	81a3      	strh	r3, [r4, #12]
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba8:	4407      	add	r7, r0
 8007baa:	eba8 0800 	sub.w	r8, r8, r0
 8007bae:	e7e7      	b.n	8007b80 <__sflush_r+0xd4>
 8007bb0:	dfbffffe 	.word	0xdfbffffe

08007bb4 <_fflush_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	690b      	ldr	r3, [r1, #16]
 8007bb8:	4605      	mov	r5, r0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	b913      	cbnz	r3, 8007bc4 <_fflush_r+0x10>
 8007bbe:	2500      	movs	r5, #0
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	b118      	cbz	r0, 8007bce <_fflush_r+0x1a>
 8007bc6:	6a03      	ldr	r3, [r0, #32]
 8007bc8:	b90b      	cbnz	r3, 8007bce <_fflush_r+0x1a>
 8007bca:	f7ff f9b1 	bl	8006f30 <__sinit>
 8007bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f3      	beq.n	8007bbe <_fflush_r+0xa>
 8007bd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007bd8:	07d0      	lsls	r0, r2, #31
 8007bda:	d404      	bmi.n	8007be6 <_fflush_r+0x32>
 8007bdc:	0599      	lsls	r1, r3, #22
 8007bde:	d402      	bmi.n	8007be6 <_fflush_r+0x32>
 8007be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007be2:	f7ff fb6c 	bl	80072be <__retarget_lock_acquire_recursive>
 8007be6:	4628      	mov	r0, r5
 8007be8:	4621      	mov	r1, r4
 8007bea:	f7ff ff5f 	bl	8007aac <__sflush_r>
 8007bee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bf0:	07da      	lsls	r2, r3, #31
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	d4e4      	bmi.n	8007bc0 <_fflush_r+0xc>
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	059b      	lsls	r3, r3, #22
 8007bfa:	d4e1      	bmi.n	8007bc0 <_fflush_r+0xc>
 8007bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bfe:	f7ff fb5f 	bl	80072c0 <__retarget_lock_release_recursive>
 8007c02:	e7dd      	b.n	8007bc0 <_fflush_r+0xc>

08007c04 <__swhatbuf_r>:
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	460c      	mov	r4, r1
 8007c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	b096      	sub	sp, #88	@ 0x58
 8007c10:	4615      	mov	r5, r2
 8007c12:	461e      	mov	r6, r3
 8007c14:	da0d      	bge.n	8007c32 <__swhatbuf_r+0x2e>
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c1c:	f04f 0100 	mov.w	r1, #0
 8007c20:	bf14      	ite	ne
 8007c22:	2340      	movne	r3, #64	@ 0x40
 8007c24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c28:	2000      	movs	r0, #0
 8007c2a:	6031      	str	r1, [r6, #0]
 8007c2c:	602b      	str	r3, [r5, #0]
 8007c2e:	b016      	add	sp, #88	@ 0x58
 8007c30:	bd70      	pop	{r4, r5, r6, pc}
 8007c32:	466a      	mov	r2, sp
 8007c34:	f000 f826 	bl	8007c84 <_fstat_r>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	dbec      	blt.n	8007c16 <__swhatbuf_r+0x12>
 8007c3c:	9901      	ldr	r1, [sp, #4]
 8007c3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c46:	4259      	negs	r1, r3
 8007c48:	4159      	adcs	r1, r3
 8007c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c4e:	e7eb      	b.n	8007c28 <__swhatbuf_r+0x24>

08007c50 <memmove>:
 8007c50:	4288      	cmp	r0, r1
 8007c52:	b510      	push	{r4, lr}
 8007c54:	eb01 0402 	add.w	r4, r1, r2
 8007c58:	d902      	bls.n	8007c60 <memmove+0x10>
 8007c5a:	4284      	cmp	r4, r0
 8007c5c:	4623      	mov	r3, r4
 8007c5e:	d807      	bhi.n	8007c70 <memmove+0x20>
 8007c60:	1e43      	subs	r3, r0, #1
 8007c62:	42a1      	cmp	r1, r4
 8007c64:	d008      	beq.n	8007c78 <memmove+0x28>
 8007c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c6e:	e7f8      	b.n	8007c62 <memmove+0x12>
 8007c70:	4402      	add	r2, r0
 8007c72:	4601      	mov	r1, r0
 8007c74:	428a      	cmp	r2, r1
 8007c76:	d100      	bne.n	8007c7a <memmove+0x2a>
 8007c78:	bd10      	pop	{r4, pc}
 8007c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c82:	e7f7      	b.n	8007c74 <memmove+0x24>

08007c84 <_fstat_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4d07      	ldr	r5, [pc, #28]	@ (8007ca4 <_fstat_r+0x20>)
 8007c88:	2300      	movs	r3, #0
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	4611      	mov	r1, r2
 8007c90:	602b      	str	r3, [r5, #0]
 8007c92:	f7f8 ffa5 	bl	8000be0 <_fstat>
 8007c96:	1c43      	adds	r3, r0, #1
 8007c98:	d102      	bne.n	8007ca0 <_fstat_r+0x1c>
 8007c9a:	682b      	ldr	r3, [r5, #0]
 8007c9c:	b103      	cbz	r3, 8007ca0 <_fstat_r+0x1c>
 8007c9e:	6023      	str	r3, [r4, #0]
 8007ca0:	bd38      	pop	{r3, r4, r5, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20001bc4 	.word	0x20001bc4

08007ca8 <_sbrk_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d06      	ldr	r5, [pc, #24]	@ (8007cc4 <_sbrk_r+0x1c>)
 8007cac:	2300      	movs	r3, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	602b      	str	r3, [r5, #0]
 8007cb4:	f7f9 f8e2 	bl	8000e7c <_sbrk>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_sbrk_r+0x1a>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_sbrk_r+0x1a>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	20001bc4 	.word	0x20001bc4

08007cc8 <_realloc_r>:
 8007cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ccc:	4680      	mov	r8, r0
 8007cce:	4615      	mov	r5, r2
 8007cd0:	460c      	mov	r4, r1
 8007cd2:	b921      	cbnz	r1, 8007cde <_realloc_r+0x16>
 8007cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd8:	4611      	mov	r1, r2
 8007cda:	f7ff bb75 	b.w	80073c8 <_malloc_r>
 8007cde:	b92a      	cbnz	r2, 8007cec <_realloc_r+0x24>
 8007ce0:	f7ff fafe 	bl	80072e0 <_free_r>
 8007ce4:	2400      	movs	r4, #0
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cec:	f000 f81a 	bl	8007d24 <_malloc_usable_size_r>
 8007cf0:	4285      	cmp	r5, r0
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	d802      	bhi.n	8007cfc <_realloc_r+0x34>
 8007cf6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007cfa:	d8f4      	bhi.n	8007ce6 <_realloc_r+0x1e>
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	4640      	mov	r0, r8
 8007d00:	f7ff fb62 	bl	80073c8 <_malloc_r>
 8007d04:	4607      	mov	r7, r0
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d0ec      	beq.n	8007ce4 <_realloc_r+0x1c>
 8007d0a:	42b5      	cmp	r5, r6
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	4621      	mov	r1, r4
 8007d10:	bf28      	it	cs
 8007d12:	4632      	movcs	r2, r6
 8007d14:	f7ff fad5 	bl	80072c2 <memcpy>
 8007d18:	4621      	mov	r1, r4
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	f7ff fae0 	bl	80072e0 <_free_r>
 8007d20:	463c      	mov	r4, r7
 8007d22:	e7e0      	b.n	8007ce6 <_realloc_r+0x1e>

08007d24 <_malloc_usable_size_r>:
 8007d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d28:	1f18      	subs	r0, r3, #4
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bfbc      	itt	lt
 8007d2e:	580b      	ldrlt	r3, [r1, r0]
 8007d30:	18c0      	addlt	r0, r0, r3
 8007d32:	4770      	bx	lr

08007d34 <_init>:
 8007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d36:	bf00      	nop
 8007d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3a:	bc08      	pop	{r3}
 8007d3c:	469e      	mov	lr, r3
 8007d3e:	4770      	bx	lr

08007d40 <_fini>:
 8007d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d42:	bf00      	nop
 8007d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d46:	bc08      	pop	{r3}
 8007d48:	469e      	mov	lr, r3
 8007d4a:	4770      	bx	lr
